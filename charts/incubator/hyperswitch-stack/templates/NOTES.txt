1. Get the Application URL:

   - Check if Ingress is available:
     ```shell
     export ADDRESS_CREATED=$(kubectl get ingress -n {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
     ```

   - If Ingress is not available, use port-forwarding:
     ```shell
     if [ -z "$ADDRESS_CREATED" ]; then
       echo "Ingress not available. Using port-forwarding to access the services."

       # Port-forwarding commands
       kubectl port-forward deployment/hyperswitch-server-v1o112o0 8080:8080 -n {{ .Release.Namespace }} & \
       kubectl port-forward deployment/hyperswitch-control-center-v1o34o2 9000:9000 -n {{ .Release.Namespace }} & \
       kubectl port-forward service/hyperswitch-web 9090:9090 -n {{ .Release.Namespace }} &

       echo "======================================================"
       echo " App server running on: http://localhost:8080      "
       echo " Control center running on: http://localhost:9000  "
       echo " Hyperswitch Web running on: http://localhost:9090/web/0.103.1/v0/HyperLoader.js "
       echo "======================================================"

       echo "\nTo close the exposed ports, run the following command:\n"
       echo "kill \$( lsof -i:8080 -t ); kill \$( lsof -i:9090 -t ); kill \$( lsof -i:9000 -t )"
       echo "======================================================"
     else
       echo "Ingress available. Access the services using the following command:"
       kubectl get ingress -n {{ .Release.Namespace }}
     fi
     ```

2. Grafana Loki Setup:
   - Expose Grafana at http://localhost:3000 to view logs:
     ```shell
     kubectl port-forward service/{{ .Release.Name }}-grafana 3000:3000 -n {{ .Release.Namespace }} &
     ```

3. Vector Setup:
   - Expose Vector at http://localhost:3103 to collect logs:
     ```shell
     kubectl port-forward service/{{ .Release.Name }}-vector 3103:3103 -n {{ .Release.Namespace }} &
     ```

4. Clickhouse Setup:
   - Run Clickhouse init script after Clickhouse is started:
     ```shell
     CKH_PASS=$(kubectl get secret clickhouse -n {{ .Release.Namespace }} -o jsonpath="{.data.admin-password}" | base64 --decode)
     kubectl exec -it clickhouse-shard0-0 -n {{ .Release.Namespace }} -- sh -c 'cat docker-entrypoint-initdb.d/*.sql | clickhouse-client --user default --password '${CKH_PASS}' --multiquery'
     ```

5. Expose Mailhog for Local Email Service:
   - Expose Mailhog and access it at http://localhost:8025/:
     ```shell
     kubectl expose deployment mailhog --type=LoadBalancer --name=mailhog-service -n {{ .Release.Namespace }}
     ```

========================================================