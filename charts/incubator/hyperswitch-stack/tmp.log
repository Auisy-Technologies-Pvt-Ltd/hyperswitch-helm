NAME: hypers-v1
LAST DEPLOYED: Tue Dec 10 23:39:12 2024
NAMESPACE: hyperswitch
STATUS: pending-install
REVISION: 1
HOOKS:
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/grafana/templates/tests/test-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: grafana-6.43.5
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "10.0.1"
    app.kubernetes.io/managed-by: Helm
  name: hypers-v1-grafana-test
  namespace: hyperswitch
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/grafana/templates/tests/test-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hypers-v1-grafana-test
  namespace: hyperswitch
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: grafana-6.43.5
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "10.0.1"
    app.kubernetes.io/managed-by: Helm
data:
  run.sh: |-
    @test "Test Health" {
      url="http://hypers-v1-grafana/api/health"

      code=$(wget --server-response --spider --timeout 90 --tries 10 ${url} 2>&1 | awk '/^  HTTP/{print $2}')
      [ "$code" == "200" ]
    }
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/grafana/templates/tests/test-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: hypers-v1-grafana-test
  namespace: hyperswitch
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: grafana-6.43.5
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "10.0.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:      ['policy']
  resources:      ['podsecuritypolicies']
  verbs:          ['use']
  resourceNames:  [hypers-v1-grafana-test]
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/grafana/templates/tests/test-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: hypers-v1-grafana-test
  namespace: hyperswitch
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: grafana-6.43.5
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "10.0.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: hypers-v1-grafana-test
subjects:
- kind: ServiceAccount
  name: hypers-v1-grafana-test
  namespace: hyperswitch
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/grafana/templates/tests/test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: hypers-v1-grafana-test
  labels:
    helm.sh/chart: grafana-6.43.5
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "10.0.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  namespace: hyperswitch
spec:
  serviceAccountName: hypers-v1-grafana-test
  containers:
    - name: hypers-v1-test
      image: "bats/bats:v1.4.1"
      imagePullPolicy: "IfNotPresent"
      command: ["/opt/bats/bin/bats", "-t", "/tests/run.sh"]
      volumeMounts:
        - mountPath: /tests
          name: tests
          readOnly: true
  volumes:
  - name: tests
    configMap:
      name: hypers-v1-grafana-test
  restartPolicy: Never
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/templates/tests/loki-test-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  annotations:
    "helm.sh/hook": test-success
  labels:
    app: loki-stack
    chart: loki-stack-2.10.2
    release: hypers-v1
    heritage: Helm
  name: hypers-v1-loki-stack-test
spec:
  containers:
  - name: test
    image: "bats/bats:1.8.2"
    imagePullPolicy: ""
    args:
    - /var/lib/loki/test.sh
    env:
    - name: LOKI_SERVICE
      value: loki
    - name: LOKI_PORT
      value: "3100"
    volumeMounts:
    - name: tests
      mountPath: /var/lib/loki
  restartPolicy: Never
  volumes:
  - name: tests
    configMap:
      name: hypers-v1-loki-stack-test
---
# Source: hyperswitch-stack/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "hypers-v1-hyperswitch-stack-test-connection"
  labels:
    helm.sh/chart: hyperswitch-stack-0.1.3
    app.kubernetes.io/name: hyperswitch-stack
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['hypers-v1-hyperswitch-stack:80']
  restartPolicy: Never
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/hyperswitch-card-vault/templates/migration-db.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: create-locker-db
  labels:
    app: create-locker-db
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    spec:
      restartPolicy: OnFailure
      initContainers:
        - name: check-postgres
          image: postgres:16-alpine3.19
          command: [ "/bin/sh", "-c" ]
          #language=sh
          args:
          - >
            MAX_ATTEMPTS=10
            SLEEP_SECONDS=10;
            attempt=0;
            while ! pg_isready -U db_user -d locker-db -h hypers-v1-locker-db -p "5432"; do
              if [ $attempt -ge $MAX_ATTEMPTS ]; then
                echo "PostgreSQL did not become ready in time";
                exit 1;
              fi;
              attempt=$((attempt+1));
              echo "Waiting for PostgreSQL to be ready... Attempt: $attempt";
              sleep $SLEEP_SECONDS;
            done;
            echo "PostgreSQL is ready.";
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
      containers:
        - name: run-locker-db-migration
          image: christophwurst/diesel-cli:latest
          imagePullPolicy: IfNotPresent
          command: [ '/bin/sh', '-c' ]
          #language=sh
          args:
            - |-
              curl -L -o hyperswitch-card-vault.tar.gz https://github.com/juspay/hyperswitch-card-vault/archive/refs/tags/$VERSION.zip
              tar -xzvf hyperswitch-card-vault.tar.gz --transform 's|[^/]*/|hyperswitch-card-vault/|'
              cd hyperswitch-card-vault
              diesel migration --database-url postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:5432/$DBNAME run
              echo "Completed hyperswitch card vault database migration"
          env:
            - name: POSTGRES_HOST
              value: hypers-v1-locker-db
            - name: DBNAME
              value: locker-db
            - name: POSTGRES_USER
              value: db_user
            - name: VERSION
              value: v0.4.0
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: locker-secrets-hypers-v1
                  key: LOCKER__DATABASE__PASSWORD
---
# Source: hyperswitch-stack/charts/hyperswitch-app/templates/db/hyperswitch-db-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: create-hyperswitch-db-v1.112.0
  labels:
    app: create-hyperswitch-db-v1.112.0
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    spec:
      restartPolicy: OnFailure
      initContainers:
        - name: check-postgres
          image: postgres:16-alpine3.19
          command: [ "/bin/sh", "-c" ]
          #language=sh
          args:
          - >
            MAX_ATTEMPTS=30;
            SLEEP_SECONDS=10;
            attempt=0;
            while ! pg_isready -U hyperswitch -d hyperswitch -h hypers-v1-postgresql -p 5432; do
              if [ $attempt -ge $MAX_ATTEMPTS ]; then
                echo "PostgreSQL did not become ready in time";
                exit 1;
              fi;
              attempt=$((attempt+1));
              echo "Waiting for PostgreSQL to be ready... Attempt: $attempt";
              sleep $SLEEP_SECONDS;
            done;
            echo "PostgreSQL is ready.";
      containers:
        - name: run-hyperswitch-db-migration
          image: christophwurst/diesel-cli:latest
          imagePullPolicy: IfNotPresent
          command: [ '/bin/sh', '-c' ]
          #language=sh
          args:
            - |-
              curl -L -o hyperswitch.tar.gz https://github.com/juspay/hyperswitch/archive/refs/$REFERENCE/$ROUTER_VERSION.tar.gz
              tar -xzvf hyperswitch.tar.gz --transform 's|[^/]*/|hyperswitch/|'
              cd hyperswitch
              diesel migration --database-url postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:5432/$DBNAME run
              echo "Completed hyperswitch database migration"
          env:
            - name: REFERENCE
              value: tags
            - name: ROUTER_VERSION
              value: v1.112.0
            - name: POSTGRES_HOST
              value: hypers-v1-postgresql
            - name: DBNAME
              value: hyperswitch
            - name: POSTGRES_USER
              value: hyperswitch
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hypers-v1-postgresql
                  key: password
MANIFEST:
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/clickhouse/charts/zookeeper/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: hypers-v1-zookeeper
  namespace: hyperswitch
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/version: 3.9.3
    helm.sh/chart: zookeeper-13.6.0
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: hypers-v1
      app.kubernetes.io/name: zookeeper
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow inbound connections to ZooKeeper
    - ports:
        - port: 2181
    # Allow internal communications between nodes
    - ports:
        - port: 2888
        - port: 3888
      from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/instance: hypers-v1
              app.kubernetes.io/name: zookeeper
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/clickhouse/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: clickhouse
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: clickhouse
    app.kubernetes.io/version: 24.10.2
    helm.sh/chart: clickhouse-6.3.3
    app.kubernetes.io/component: clickhouse
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: hypers-v1
      app.kubernetes.io/name: clickhouse
      app.kubernetes.io/component: clickhouse
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8123
        - port: 9000
        - port: 9004
        - port: 9005
        - port: 9009
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/kafka/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: kafka0
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.9.0
    helm.sh/chart: kafka-31.0.0
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: hypers-v1
      app.kubernetes.io/name: kafka
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow client connections
    - ports:
        - port: 9092
        - port: 9094
        - port: 9093
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/clickhouse/charts/zookeeper/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: hypers-v1-zookeeper
  namespace: hyperswitch
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/version: 3.9.3
    helm.sh/chart: zookeeper-13.6.0
    app.kubernetes.io/component: zookeeper
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: hypers-v1
      app.kubernetes.io/name: zookeeper
      app.kubernetes.io/component: zookeeper
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/clickhouse/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: clickhouse-shard0
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: clickhouse
    app.kubernetes.io/version: 24.10.2
    helm.sh/chart: clickhouse-6.3.3
    app.kubernetes.io/component: clickhouse
    shard: "0"
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: hypers-v1
      app.kubernetes.io/name: clickhouse
      app.kubernetes.io/component: clickhouse
      shard: "0"
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/kafka/templates/broker/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: kafka0-broker
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.9.0
    helm.sh/chart: kafka-31.0.0
    app.kubernetes.io/component: broker
    app.kubernetes.io/part-of: kafka
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: hypers-v1
      app.kubernetes.io/name: kafka
      app.kubernetes.io/component: broker
      app.kubernetes.io/part-of: kafka
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/kafka/templates/controller-eligible/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: kafka0-controller
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.9.0
    helm.sh/chart: kafka-31.0.0
    app.kubernetes.io/component: controller-eligible
    app.kubernetes.io/part-of: kafka
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: hypers-v1
      app.kubernetes.io/name: kafka
      app.kubernetes.io/component: controller-eligible
      app.kubernetes.io/part-of: kafka
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/clickhouse/charts/zookeeper/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hypers-v1-zookeeper
  namespace: hyperswitch
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/version: 3.9.3
    helm.sh/chart: zookeeper-13.6.0
    app.kubernetes.io/component: zookeeper
    role: zookeeper
automountServiceAccountToken: false
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/clickhouse/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: clickhouse
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: clickhouse
    app.kubernetes.io/version: 24.10.2
    helm.sh/chart: clickhouse-6.3.3
    app.kubernetes.io/component: clickhouse
automountServiceAccountToken: false
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/hyperswitch-card-vault/templates/sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hyperswitch-vault-role
  namespace: hyperswitch
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/kafka/templates/provisioning/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafka0-provisioning
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.9.0
    helm.sh/chart: kafka-31.0.0
automountServiceAccountToken: false
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/kafka/templates/rbac/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafka0
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.9.0
    helm.sh/chart: kafka-31.0.0
    app.kubernetes.io/component: kafka
automountServiceAccountToken: false
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/grafana/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: grafana-6.43.5
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "10.0.1"
    app.kubernetes.io/managed-by: Helm
  name: hypers-v1-grafana
  namespace: hyperswitch
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/loki/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: loki
    chart: loki-2.16.0
    release: hypers-v1
    heritage: Helm
  annotations:
    {}
  name: loki
  namespace: hyperswitch
automountServiceAccountToken: true
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/promtail/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hypers-v1-promtail
  namespace: hyperswitch
  labels:
    helm.sh/chart: promtail-6.15.5
    app.kubernetes.io/name: promtail
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "2.9.3"
    app.kubernetes.io/managed-by: Helm
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/mailhog/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mailhog
  labels:
    helm.sh/chart: mailhog-4.0.0
    app.kubernetes.io/name: mailhog
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "v1.0.1"
    app.kubernetes.io/managed-by: Helm
  namespace: hyperswitch
imagePullSecrets:
    []
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: hypers-v1-redis
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.3
    helm.sh/chart: redis-18.6.1
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/vector/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hypers-v1-vector
  labels:
    helm.sh/chart: vector-0.37.0
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/component: Aggregator
    app.kubernetes.io/version: "0.42.0-distroless-libc"
    app.kubernetes.io/managed-by: Helm
    
automountServiceAccountToken: true
---
# Source: hyperswitch-stack/charts/hyperswitch-app/templates/control-center/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hyperswitch-control-center-role
  namespace: hyperswitch
---
# Source: hyperswitch-stack/charts/hyperswitch-app/templates/router/sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    eks.amazonaws.com/role-arn: my-role-arn
  name: hyperswitch-router-role
  namespace: hyperswitch
---
# Source: hyperswitch-stack/charts/hyperswitch-web/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hyperswitch-web
  labels:
    helm.sh/chart: hyperswitch-web-0.2.0
    app.kubernetes.io/name: hyperswitch-web
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "0.15.8"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/clickhouse/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clickhouse
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: clickhouse
    app.kubernetes.io/version: 24.10.2
    helm.sh/chart: clickhouse-6.3.3
    app.kubernetes.io/component: clickhouse
type: Opaque
data:
  admin-password: "MDZJZHdtRTEzQw=="
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/hyperswitch-card-vault/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hypers-v1-locker-db
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: locker-db
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.27
type: Opaque
data:
  postgres-password: "WmxLTWxiS3RUSg=="
  password: "VjJ0a1MxcHRUa2hTYm5CcVpESTRPVU5uUFQwSw=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/hyperswitch-card-vault/templates/secrets.yaml
apiVersion: v1
data:
  LOCKER__DATABASE__PASSWORD: VjJ0a1MxcHRUa2hTYm5CcVpESTRPVU5uUFQwSw==
  LOCKER__SECRETS__MASTER_KEY: N2ZlNDA2MDgyMDE0MDBkYTlkYjk1YmI1Y2MwOTBiMjI4MDQwNTYxN2E1YWI0MmYyZjZmOTRlNjIxM2Q3NzNlOTU1ODViZjY4NWY3OWJkYzYzNjhmYzFlM2FhN2RmOTg0ZTNkYWZjNjUxNmJjZWUzNWJmNjRiNTJm
  LOCKER__SECRETS__LOCKER_PRIVATE_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBc2d3RUphR2JSQTFETk16dWJxNE03ZCtpNlRTckZQaXFycW5Oa08wRGN0NThqR2JKCjM2eElPeGZzZjdxYTAza1AraWRFWm5oMHc5a1djVm14NGFMK25xZUR6UXRaOFJRZEJNZzJsSmw0c3JEanhkS1QKQUJkZU1xM2M2Vyt0eVhHMUUvdnoycWlrMFJPcDY1Smt4bFRTVDFlNHdXQzlJd3BtYU5BRnRqVzlvRmM0OEs2Twp1N1NaT2wvaEFtNVFKUFV4c1kxbEZiYlZ3UUQ2cGJSUmhMYXN6ckdSRnFjelFWaHRDejZac0pXU3BTd2ZwWkFoCk5LbEJIYXRrdW9qWTR5THcvUWV5M3hhQ1I4M2ZuMmhDYW9YTysrOWZmY2JQSXd4YjdYVGtiYzI1a0pUK2JPdU4KNXR0bm1BUFJEVjFsNWhSNDMyZmlTcU5JbzAxNWdUeTgzTnYyTHdJREFRQUJBb0lCQUdDcFhXY0F3Y2JFWElSQgo3Z0J3eGR3dTJjYzZMTmVKMlVCU042UkN5T2lJR1o0di85RkxPenU1MVUvVEExTmtHbVI1QlEyTXYvZkQyQWRaCjV0VFZKTjhGbXV5ckNQMTFLZnY2cG9jdWV2U29URUNOL2ZqQ3R3VlVsdWExRnVpU3J2aFdoU0ZsQlhYczh3ZE4KeHlCVjFJZjIyL3RBaGU2TUt1VWthclZ0bjdGNFFUYSt2V2JkYkVJNWNDNFk0azNoNlc4aDA2NVpIVzhDTFYyVgpGazlXdHFEZitlN0s0RTA0UjBrNkN2TzVmSzNQdnhSQkI1L2ZvT2JHMjh1dC84ZWwrMlNtUDgwOWFZUW5ZeThqCjh1VmJPSVlFYjJHVFBXQnhOay9ndklYNW8zS2s2RFQyUnBVdXU2Uk13YU1rMkdXV29JakpCejE3YkFDZWxNaUcKUzM2eGFLRUNnWUVBMml0TDQ0Nm1Za1FZaEpNMUF3RW9qeHM4TzMvTXlzREpmaU9aWTB2Rm9YVGsrWHY5QWUxNQpuN1ZOUGR3clF5OFlNc0Iza3BYalUzVzZnS1hscFc3Ym5GcDRoMi9WNFZ1TGFFaFNrbkYraFlOUGsxVjJ5MWlxClhjVWxncURpM040M28wWjBzUzdEMUlBMWh6ZUk2M1lROUZQUC9rWUY2MVNFTHRUOVU4T0gxMTBDZ1lFQTBPdXAKMTFBMFlqRkVGM09lbXRPV1hFeGkwREZvY241Yysvbyt0SVBaWDNNVUNJU09TRXNsVDFxWWUrK05Sb1FCSUIrcApzbFIzMERKUlpybDZSNGZzUDRVcHIvaWNseUJZWnNYN0tvbk9kaG16UGl1VEcra2hWU2IyMmVqWTgxaEFVempsCkFlRFYzUWxNTjNsbUhBVmNmYXZKZ2ZJZVlDQy9obTFQMzJoRUp2c0NnWUFNYlV6c1VGTFA1QnNWYWlFcDQ2WUEKeU1kY2lFSU5Cb0F6ckNsdmk0QmRXd0F6NmNrV2xBVktnSlErd3N6QURlMnQ3bUtoT2VKeC9aRzdCRGdaZlVBTApIdWdncHRFaS9nanB6cnpOVktPbFRUNTZJUE1jVUJlY01iK2FPam5SNU9KOGJXWDJOYmkzNFBtcmt4RThnRVFrCjlxVXhVYUhDcnRTOHFpc24yMHBnalFLQmdRQzRmVE1aS1FGcEtKbzVuMmNTei8vNmQ1WFd4WnEzYUhFU0xwVEsKOFplMkd6ZzRvVjNINTF3R0xEbDFVRUJRWWVkZ2g3VmgvZ2RqdWR0NlBCWUlMclpvRFY2WHY1SUFQcGJ5QXFqZQprcHpZVzYrV0dnS3BaZ0NDWW9zZ09PZkVWRTFSY0crQ2JocE5PNVdyY3kvQlZOYXRQMU1OeGxJZWp5eXlON3VOCnpGUkttd0tCZ1FDT2RBUTU3aHRQSGtwY1h6WXJlUmx3aktpRHFhTjhydnhxTUV1MVd5VzlZMThUK2hjUHc4cisKZGVZTW1VSEt2UUJVYVBHMFEydXUybittWUtGUUs2WHVjUkZlSGNQU3pFbGsxNW5raS9EQVlheE9MekJFaThoSQowdkNuQ3FtK2Q2S0JLc1M1aTBwTWd2UGRDMDdWcldLbnl6ZFg0Z29QMENhQWhJMEExT0dsc0E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  LOCKER__SECRETS__TENANT_PUBLIC_KEY: LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFzU25XbHRHYzZramNEQWh0VW9hZAoweGxMSlpDd0xjNlA4MGo4azNkZ285Mm5xb2NVS0Q3dHNZNjFkZ20zZ0tGcjhzWlBMYlRhRFYxU0orakFlWk5QCjQ3NmFvbkpWUG90dFF2R2R1QjVEcURDTWNIRFFrcllrQnRPYisvSUQ1cU9pOEFUVlZNZkpBU2pWYncvRDBSL0EKRXVpRzB2bWRkbCs4Njc2eFdJVDhUWlRtem93SXZ2VUlZRXVhVVM4RFJwbVRBV1BYWWR2NzJmRFp0dXlocFUwWQpHQWRIR3lRckhYd0dkR2UzMU42NXZtcU15V29pSVhHTXVKS3FQL0VaRXFtVmtrZldYdURpb2E1N1lyUFVVMDdvCkQ3S3NTMDBMNFFHQkIzTWVKeEVwUWpobU55YmpRZURlamw0WVBqM2Rib0Z5ZjY0Njhza0tTOTErd1YwRXhnaHkKVHdJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg==
kind: Secret
metadata:
  name: locker-secrets-hypers-v1
  namespace: hyperswitch
type: Opaque
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/kafka/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kafka0-kraft-cluster-id
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.9.0
    helm.sh/chart: kafka-31.0.0
type: Opaque
data:
  kraft-cluster-id: "Vkhpd2lZa2VXdERVd3JYTU4zSTBsaA=="
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/grafana/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hypers-v1-grafana
  namespace: hyperswitch
  labels:
    helm.sh/chart: grafana-6.43.5
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "10.0.1"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  admin-user: "YWRtaW4="
  admin-password: "YWRtaW4="
  ldap-toml: ""
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/loki/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: loki
  namespace: hyperswitch
  labels:
    app: loki
    chart: loki-2.16.0
    release: hypers-v1
    heritage: Helm
data:
  loki.yaml: YXV0aF9lbmFibGVkOiBmYWxzZQpjaHVua19zdG9yZV9jb25maWc6CiAgbWF4X2xvb2tfYmFja19wZXJpb2Q6IDBzCmNvbXBhY3RvcjoKICBzaGFyZWRfc3RvcmU6IGZpbGVzeXN0ZW0KICB3b3JraW5nX2RpcmVjdG9yeTogL2RhdGEvbG9raS9ib2x0ZGItc2hpcHBlci1jb21wYWN0b3IKaW5nZXN0ZXI6CiAgY2h1bmtfYmxvY2tfc2l6ZTogMjYyMTQ0CiAgY2h1bmtfaWRsZV9wZXJpb2Q6IDNtCiAgY2h1bmtfcmV0YWluX3BlcmlvZDogMW0KICBsaWZlY3ljbGVyOgogICAgcmluZzoKICAgICAgcmVwbGljYXRpb25fZmFjdG9yOiAxCiAgbWF4X3RyYW5zZmVyX3JldHJpZXM6IDAKICB3YWw6CiAgICBkaXI6IC9kYXRhL2xva2kvd2FsCmxpbWl0c19jb25maWc6CiAgZW5mb3JjZV9tZXRyaWNfbmFtZTogZmFsc2UKICBtYXhfZW50cmllc19saW1pdF9wZXJfcXVlcnk6IDUwMDAKICByZWplY3Rfb2xkX3NhbXBsZXM6IHRydWUKICByZWplY3Rfb2xkX3NhbXBsZXNfbWF4X2FnZTogMTY4aAptZW1iZXJsaXN0OgogIGpvaW5fbWVtYmVyczoKICAtICdsb2tpLW1lbWJlcmxpc3QnCnNjaGVtYV9jb25maWc6CiAgY29uZmlnczoKICAtIGZyb206ICIyMDIwLTEwLTI0IgogICAgaW5kZXg6CiAgICAgIHBlcmlvZDogMjRoCiAgICAgIHByZWZpeDogaW5kZXhfCiAgICBvYmplY3Rfc3RvcmU6IGZpbGVzeXN0ZW0KICAgIHNjaGVtYTogdjExCiAgICBzdG9yZTogYm9sdGRiLXNoaXBwZXIKc2VydmVyOgogIGdycGNfbGlzdGVuX3BvcnQ6IDkwOTUKICBodHRwX2xpc3Rlbl9wb3J0OiAzMTAwCnN0b3JhZ2VfY29uZmlnOgogIGJvbHRkYl9zaGlwcGVyOgogICAgYWN0aXZlX2luZGV4X2RpcmVjdG9yeTogL2RhdGEvbG9raS9ib2x0ZGItc2hpcHBlci1hY3RpdmUKICAgIGNhY2hlX2xvY2F0aW9uOiAvZGF0YS9sb2tpL2JvbHRkYi1zaGlwcGVyLWNhY2hlCiAgICBjYWNoZV90dGw6IDI0aAogICAgc2hhcmVkX3N0b3JlOiBmaWxlc3lzdGVtCiAgZmlsZXN5c3RlbToKICAgIGRpcmVjdG9yeTogL2RhdGEvbG9raS9jaHVua3MKdGFibGVfbWFuYWdlcjoKICByZXRlbnRpb25fZGVsZXRlc19lbmFibGVkOiBmYWxzZQogIHJldGVudGlvbl9wZXJpb2Q6IDBz
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/promtail/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hypers-v1-promtail
  namespace: hyperswitch
  labels:
    helm.sh/chart: promtail-6.15.5
    app.kubernetes.io/name: promtail
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "2.9.3"
    app.kubernetes.io/managed-by: Helm
stringData:
  promtail.yaml: |
    server:
      log_level: info
      log_format: logfmt
      http_listen_port: 3101
      
    
    clients:
      - url: http://loki:3100/loki/api/v1/push
    
    positions:
      filename: /run/promtail/positions.yaml
    
    scrape_configs:
      # See also https://github.com/grafana/loki/blob/master/production/ksonnet/promtail/scrape_config.libsonnet for reference
      - job_name: kubernetes-pods
        pipeline_stages:
          - cri: {}
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_pod_controller_name
            regex: ([0-9a-z-.]+?)(-[0-9a-f]{8,10})?
            action: replace
            target_label: __tmp_controller_name
          - source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_name
              - __meta_kubernetes_pod_label_app
              - __tmp_controller_name
              - __meta_kubernetes_pod_name
            regex: ^;*([^;]+)(;.*)?$
            action: replace
            target_label: app
          - source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_instance
              - __meta_kubernetes_pod_label_instance
            regex: ^;*([^;]+)(;.*)?$
            action: replace
            target_label: instance
          - source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_component
              - __meta_kubernetes_pod_label_component
            regex: ^;*([^;]+)(;.*)?$
            action: replace
            target_label: component
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_node_name
            target_label: node_name
          - action: replace
            source_labels:
            - __meta_kubernetes_namespace
            target_label: namespace
          - action: replace
            replacement: $1
            separator: /
            source_labels:
            - namespace
            - app
            target_label: job
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_name
            target_label: pod
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_container_name
            target_label: container
          - action: replace
            replacement: /var/log/pods/*$1/*.log
            separator: /
            source_labels:
            - __meta_kubernetes_pod_uid
            - __meta_kubernetes_pod_container_name
            target_label: __path__
          - action: replace
            regex: true/(.*)
            replacement: /var/log/pods/*$1/*.log
            separator: /
            source_labels:
            - __meta_kubernetes_pod_annotationpresent_kubernetes_io_config_hash
            - __meta_kubernetes_pod_annotation_kubernetes_io_config_hash
            - __meta_kubernetes_pod_container_name
            target_label: __path__
          - action: keep
            regex: hyperswitch-.*
            source_labels:
            - __meta_kubernetes_pod_label_app
      
      
    
    limits_config:
      
    
    tracing:
      enabled: false
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hypers-v1-postgresql
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.27
type: Opaque
data:
  postgres-password: "NXBoVDZDaHZPRA=="
  password: "WkdKd1lYTnpkMjl5WkRFeA=="
  replication-password: "d2dqQzY3NEFqSw=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: hyperswitch-stack/charts/hyperswitch-app/templates/consumer/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: consumer-secret-hypers-v1
  namespace: hyperswitch
data:
  ROUTER__ANALYTICS__SQLX__USERNAME: aHlwZXJzd2l0Y2g=
  ROUTER__ANALYTICS__SQLX__HOST: aHlwZXJzLXYxLXBvc3RncmVzcWwtcmVhZA==
  ROUTER__ANALYTICS__SQLX__PORT: NTQzMg==
  ROUTER__ANALYTICS__SQLX__DBNAME: aHlwZXJzd2l0Y2g=
  ROUTER__MASTER_DATABASE__HOST: aHlwZXJzLXYxLXBvc3RncmVzcWw=
  ROUTER__MASTER_DATABASE__DBNAME: aHlwZXJzd2l0Y2g=
  ROUTER__MASTER_DATABASE__PORT: NTQzMg==
  ROUTER__MASTER_DATABASE__USERNAME: aHlwZXJzd2l0Y2g=
  ROUTER__REPLICA_DATABASE__HOST: aHlwZXJzLXYxLXBvc3RncmVzcWw=
  ROUTER__REPLICA_DATABASE__DBNAME: aHlwZXJzd2l0Y2g=
  ROUTER__REPLICA_DATABASE__PORT: NTQzMg==
  ROUTER__REPLICA_DATABASE__USERNAME: aHlwZXJzd2l0Y2g=
  ROUTER__REDIS__HOST: aHlwZXJzLXYxLXJlZGlzLW1hc3Rlcg==
  ROUTER__REDIS__PORT: NjM3OQ==
  ROUTER__LOCKER__REDIS_TEMP_LOCKER_ENCRYPTION_KEY: ZHVtbXlfdmFs
  ROUTER__PAYMENT_METHOD_AUTH__PM_AUTH_KEY: ZHVtbXlfdmFs
---
# Source: hyperswitch-stack/charts/hyperswitch-app/templates/misc/secrets.yaml
apiVersion: v1
data:
  BACH__KEYS__TEMP_CARD_KEY: ""
  BACH_READ_USER_PWD: ""
  ROUTER__ANALYTICS__SQLX__USERNAME: aHlwZXJzd2l0Y2g=
  ROUTER__ANALYTICS__SQLX__HOST: aHlwZXJzLXYxLXBvc3RncmVzcWwtcmVhZA==
  ROUTER__ANALYTICS__SQLX__PORT: NTQzMg==
  ROUTER__ANALYTICS__SQLX__DBNAME: aHlwZXJzd2l0Y2g=
  ROUTER__ANALYTICS__CLICKHOUSE__USERNAME: ZGVmYXVsdA==
  ROUTER__ANALYTICS__CLICKHOUSE__DATABASE_NAME: ZGVmYXVsdA==
  ROUTER__ANALYTICS__CLICKHOUSE__HOST: aHR0cDovL2NsaWNraG91c2U6ODEyMw==
  ROUTER__EMAIL__AWS_REGION: dXMtZWFzdC0x
  ROUTER__EMAIL__SENDER_EMAIL: ZXhhbXBsZUBleGFtcGxlLmNvbQ==
  ROUTER__EMAIL__RECON_RECIPIENT_EMAIL: cmVjb25AZXhhbXBsZS5jb20=
  ROUTER__EMAIL__PROD_INTENT_RECIPIENT_EMAIL: YnVzaW5lc3NAZXhhbXBsZS5jb20=
  ROUTER__EMAIL__SMTP__HOST: bWFpbGhvZw==
  ROUTER__EMAIL__SMTP__PORT: MTAyNQ==
  ROUTER__EMAIL__SMTP__USERNAME: 
  ROUTER__EMAIL__SMTP__PASSWORD:   
  ROUTER__EMAIL__AWS_SES__EMAIL_ROLE_ARN: YXJuOmF3czppYW06OjEyMzQ1Njc4OTAxMjpyb2xlL1NlbmRFbWFpbFJvbGU=
  ROUTER__EMAIL__AWS_SES__STS_ROLE_SESSION_NAME: U2VuZEVtYWlsUm9sZQ==
  ROUTER__API_KEYS__KMS_ENCRYPTED_HASH_KEY: PG5pbD4=
  ROUTER__JWEKEY__TUNNEL_PRIVATE_KEY: ZHVtbXlfdmFs
  ROUTER__JWEKEY__VAULT_ENCRYPTION_KEY: LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFzZ3dFSmFHYlJBMUROTXp1YnE0TQo3ZCtpNlRTckZQaXFycW5Oa08wRGN0NThqR2JKMzZ4SU94ZnNmN3FhMDNrUCtpZEVabmgwdzlrV2NWbXg0YUwrCm5xZUR6UXRaOFJRZEJNZzJsSmw0c3JEanhkS1RBQmRlTXEzYzZXK3R5WEcxRS92ejJxaWswUk9wNjVKa3hsVFMKVDFlNHdXQzlJd3BtYU5BRnRqVzlvRmM0OEs2T3U3U1pPbC9oQW01UUpQVXhzWTFsRmJiVndRRDZwYlJSaExhcwp6ckdSRnFjelFWaHRDejZac0pXU3BTd2ZwWkFoTktsQkhhdGt1b2pZNHlMdy9RZXkzeGFDUjgzZm4yaENhb1hPCisrOWZmY2JQSXd4YjdYVGtiYzI1a0pUK2JPdU41dHRubUFQUkRWMWw1aFI0MzJmaVNxTklvMDE1Z1R5ODNOdjIKTHdJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg==
  ROUTER__JWEKEY__VAULT_PRIVATE_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBc1NuV2x0R2M2a2pjREFodFVvYWQweGxMSlpDd0xjNlA4MGo4azNkZ285Mm5xb2NVCktEN3RzWTYxZGdtM2dLRnI4c1pQTGJUYURWMVNKK2pBZVpOUDQ3NmFvbkpWUG90dFF2R2R1QjVEcURDTWNIRFEKa3JZa0J0T2IrL0lENXFPaThBVFZWTWZKQVNqVmJ3L0QwUi9BRXVpRzB2bWRkbCs4Njc2eFdJVDhUWlRtem93SQp2dlVJWUV1YVVTOERScG1UQVdQWFlkdjcyZkRadHV5aHBVMFlHQWRIR3lRckhYd0dkR2UzMU42NXZtcU15V29pCklYR011SktxUC9FWkVxbVZra2ZXWHVEaW9hNTdZclBVVTA3b0Q3S3NTMDBMNFFHQkIzTWVKeEVwUWpobU55YmoKUWVEZWpsNFlQajNkYm9GeWY2NDY4c2tLUzkxK3dWMEV4Z2h5VHdJREFRQUJBb0lCQUdHN0c4YTlRVnU0NzdLdgpuMmNzSGJwTE5MbzNWQWtnN3lZZE9FQTlWWkZ3QUVOQkd1eU1zbUVGd2JLbzc1TEUrYURHcHYwbXpEY2RLT29kCktyaW1mQ2E5aWQ1ZFJnc25yUkdGNmlTY2hXUXR5L3RuTUpnT1pGZGp1cVBFd1VRbE53aERFbEFmbWhIS3Jkc0QKamxrNXM2SjZwWTJTNTd0YVd3U05nSlc5WHRXSWlDdkkrVlh4U3FLN0tEakd3RGtvOEt2ODYvR2NrODdJQnhhNQo1T3FEbHZPc1BTcVRRcHFUM0JxRnU3UFNoL2RQR1o5MHUyWXl2c25zNEVuQnBWa3hteFBLRGRkdi9iMlBrd25DCi9nVm9jdG1yWitZUmtYTi8wN0wzNFRTSnpkV1ZaaXMwK3c3RHlkaEl6L24xdWVZSVg3RDFFZjd1SFdpNzA5QUoKSExuQnZEa0NnWUVBNU4zUkc2OTkzZWYvekg3SXIrazRpd2xVVGtYSThZQUVZMlZhdnBrMjFjRzYwa1R3emhVTgpLYmpzTEpSdVg1TjNzb1d4aGxyWFgrVjdpaFRTQ1hiTzBtRnBPUXdXNjZYQktaeVYzaTVObGxwUzMrbGRpeWZPCkZ4allnSlZac25YcEpYM2M0UjRId1o2cWphNG9LWmFic3F5cGc3QmFJZ0dKTUFya1pVSEpEWXNDZ1lFQXhpclEKa21ONk1VWk1hNTJnQlpMR25BaVhOVlpqMHlVbWFEVTVoTEpsTEh1MDBVdDgwaE9DOWQ0RWt2NlIwWS9hU0MzaAplVnpQa3JrRk9TeVN5dGlmeUdLMGNVKzNpZWxKbmNJR0pIcmFJWWtXZE0wYWV4MWpYME1zNzdoZk1sQ1ljYWdKCjV1d2l3RlNOTmJvT1dubTlQM00vMWVuSkFzdXcxTXpGRkJ0QkRzMENnWUVBNE4xTUloNkgxV3FudXIxcTR1T0wKaVpmdC9FVzJqQWxTeG5JRCtiYkIyTDNTbDl2aW1TaTMyU0YyOHNvWHM5SkpUZDdyc0cwNnBWN3N4WnQxVHBVcgoyaXFaWHRLUkJwRENPK2M4bktMejJtRCtnajlnaUdQZ3FuTGY3VjVRVmZaaHoxTmRuTldMbTJJUWdzbjFiZjhyCkZSOXVJaFE0U3FjbHFrMVpZRitGY2NjQ2dZQVllaXRmR1poN1E2S20zRVpxeWRGc2JvYzIyRi9tTWIySHU2TksKSjdybGZyWTc3K1lRRU1icFZhNGM5Z0xPN3NUWWk0cEJNbHlWVS9NNE43QStDL25ZaDVDZ09tZUNTbVdFYmZYUwpSYlp4MC93SkcxaDlBb2xHdUFaeDZjVWdjdUlSajk4QlBnT2czQkRCSlNVbXVjak5jSS9lL1V5TjR0a0p2KzFMCjZYM2t0UUtCZ1FETWEwNnBqQmdwUnE4QkpoY3hzMW1sdVBnSEdhZDFsQnpVNUljVlgxb1JGeXV4OFB0c2ZTb0EKa0lZckdja1N0anJ2Zk9EMlZuVElRV0F1dWpPVHR4alAweVIrY0hsbXdXWFpycmo1K3g4a05BT3FnTjdnVTFudApLWXBOVDIrU2M3d3h3QVdJdWNWU04zZVJOelJHVHlzeFVXWUtGVWxwR1JLUDZOd0pERXo5ZXc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  ROUTER__KMS__KEY_ID: a21zX2tleV9pZA==
  ROUTER__KMS__REGION: dXMtZWFzdC0x
  ROUTER__JWEKEY__RUST_LOCKER_ENCRYPTION_KEY: ZHVtbXlfdmFs
  ROUTER__SECRETS__ADMIN_API_KEY: dGVzdF9hZG1pbg==
  ROUTER__SECRETS__JWT_SECRET: dGVzdF9hZG1pbg==
  ROUTER__SECRETS__MASTER_ENC_KEY: NDcxZjIyNTE2NzI0MzQ3YmNjYTljMjBjNWZhODhkOTgyMWM0NjA0ZTYzYTZhY2VmZmQyNDYwNTgwOWM5MjM3Yw==
  ROUTER__CONNECTOR_ONBOARDING__PAYPAL__CLIENT_ID: ZHVtbXlfdmFs
  ROUTER__CONNECTOR_ONBOARDING__PAYPAL__CLIENT_SECRET: ZHVtbXlfdmFs
  ROUTER__CONNECTOR_ONBOARDING__PAYPAL__PARTNER_ID: ZHVtbXlfdmFs
  ROUTER__APPLEPAY_DECRYPT_KEYS__APPLE_PAY_MERCHANT_CERT: ZHVtbXlfdmFs
  ROUTER__APPLEPAY_DECRYPT_KEYS__APPLE_PAY_MERCHANT_CERT_KEY: ZHVtbXlfdmFs
  ROUTER__APPLEPAY_DECRYPT_KEYS__APPLE_PAY_PPC: ZHVtbXlfdmFs
  ROUTER__APPLEPAY_DECRYPT_KEYS__APPLE_PAY_PPC_KEY: ZHVtbXlfdmFs
  ROUTER__APPLEPAY_MERCHANT_CONFIGS__MERCHANT_CERT: ZHVtbXlfdmFs
  ROUTER__APPLEPAY_MERCHANT_CONFIGS__MERCHANT_CERT_KEY: ZHVtbXlfdmFs
  ROUTER__APPLEPAY_MERCHANT_CONFIGS__COMMON_MERCHANT_IDENTIFIER: ZHVtbXlfdmFs
  ROUTER__PAYMENT_METHOD_AUTH__PM_AUTH_KEY: ZHVtbXlfdmFs
  ROUTER__API_KEYS__HASH_KEY: MDEyMzQ1Njc4OWFiY2RlZjAxMjM0NTY3ODlhYmNkZWYwMTIzNDU2Nzg5YWJjZGVmMDEyMzQ1Njc4OWFiY2RlZg==
  ROUTER__FOREX_API__API_KEY: Zm9yZXhfYXBpX2tleQ==
  ROUTER__FOREX_API__FALLBACK_API_KEY: Zm9yZXhfZmFsbGJhY2tfYXBpX2tleQ==

kind: Secret
metadata:
  name: hyperswitch-secrets
  namespace: hyperswitch
type: Opaque
---
# Source: hyperswitch-stack/charts/hyperswitch-app/templates/producer/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: producer-secret-hypers-v1
data:
  ROUTER__FILE_UPLOAD_CONFIG__BUCKET_NAME: YnVja2V0
  ROUTER__FILE_UPLOAD_CONFIG__REGION: dXMtZWFzdC0x
  ROUTER__ANALYTICS__SQLX__USERNAME: aHlwZXJzd2l0Y2g=
  ROUTER__ANALYTICS__SQLX__HOST: aHlwZXJzLXYxLXBvc3RncmVzcWwtcmVhZA==
  ROUTER__ANALYTICS__SQLX__PORT: NTQzMg==
  ROUTER__ANALYTICS__SQLX__DBNAME: aHlwZXJzd2l0Y2g=
  ROUTER__MASTER_DATABASE__HOST: aHlwZXJzLXYxLXBvc3RncmVzcWw=
  ROUTER__MASTER_DATABASE__DBNAME: aHlwZXJzd2l0Y2g=
  ROUTER__MASTER_DATABASE__PORT: NTQzMg==
  ROUTER__MASTER_DATABASE__USERNAME: aHlwZXJzd2l0Y2g=
  ROUTER__REPLICA_DATABASE__HOST: aHlwZXJzLXYxLXBvc3RncmVzcWw=
  ROUTER__REPLICA_DATABASE__DBNAME: aHlwZXJzd2l0Y2g=
  ROUTER__REPLICA_DATABASE__PORT: NTQzMg==
  ROUTER__REPLICA_DATABASE__USERNAME: aHlwZXJzd2l0Y2g=
  ROUTER__REDIS__HOST: aHlwZXJzLXYxLXJlZGlzLW1hc3Rlcg==
  ROUTER__REDIS__PORT: NjM3OQ==
  ROUTER__SECRETS__MIGRATION_ENCRYPTION_TIMESTAMP: MTY4NTUxMDc1MQ==
  ROUTER__LOCKER__REDIS_TEMP_LOCKER_ENCRYPTION_KEY: ZHVtbXlfdmFs
---
# Source: hyperswitch-stack/charts/hyperswitch-app/templates/router/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: router-secret-hypers-v1
data:
  ROUTER__REDIS__HOST: aHlwZXJzLXYxLXJlZGlzLW1hc3Rlcg==
  ROUTER__REDIS__PORT: NjM3OQ==
  ROUTER__REPLICA_DATABASE__HOST: aHlwZXJzLXYxLXBvc3RncmVzcWw=
  ROUTER__ANALYTICS__SQLX__USERNAME: aHlwZXJzd2l0Y2g=
  ROUTER__ANALYTICS__SQLX__HOST: aHlwZXJzLXYxLXBvc3RncmVzcWwtcmVhZA==
  ROUTER__ANALYTICS__SQLX__PORT: NTQzMg==
  ROUTER__ANALYTICS__SQLX__DBNAME: aHlwZXJzd2l0Y2g=
  ROUTER__FILE_UPLOAD_CONFIG__BUCKET_NAME: YnVja2V0
  ROUTER__FILE_UPLOAD_CONFIG__REGION: dXMtZWFzdC0x
  ROUTER__MASTER_DATABASE__HOST: aHlwZXJzLXYxLXBvc3RncmVzcWw=
  ROUTER__MASTER_DATABASE__DBNAME: aHlwZXJzd2l0Y2g=
  ROUTER__MASTER_DATABASE__PORT: NTQzMg==
  ROUTER__MASTER_DATABASE__USERNAME: aHlwZXJzd2l0Y2g=
  ROUTER__REPLICA_DATABASE__DBNAME: aHlwZXJzd2l0Y2g=
  ROUTER__REPLICA_DATABASE__PORT: NTQzMg==
  ROUTER__REPLICA_DATABASE__USERNAME: aHlwZXJzd2l0Y2g=
  ROUTER__LOCKER__REDIS_TEMP_LOCKER_ENCRYPTION_KEY: ZHVtbXlfdmFs
  ROUTER__PAYMENT_METHOD_AUTH__PM_AUTH_KEY: ZHVtbXlfdmFs
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/clickhouse/charts/zookeeper/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hypers-v1-zookeeper-scripts
  namespace: hyperswitch
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/version: 3.9.3
    helm.sh/chart: zookeeper-13.6.0
    app.kubernetes.io/component: zookeeper
data:
  init-certs.sh: |-
    #!/bin/bash
  setup.sh: |-
    #!/bin/bash

    # Execute entrypoint as usual after obtaining ZOO_SERVER_ID
    # check ZOO_SERVER_ID in persistent volume via myid
    # if not present, set based on POD hostname
    if [[ -f "/bitnami/zookeeper/data/myid" ]]; then
        export ZOO_SERVER_ID="$(cat /bitnami/zookeeper/data/myid)"
    else
        HOSTNAME="$(hostname -s)"
        if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then
            ORD=${BASH_REMATCH[2]}
            export ZOO_SERVER_ID="$((ORD + 1 ))"
        else
            echo "Failed to get index from hostname $HOSTNAME"
            exit 1
        fi
    fi
    exec /entrypoint.sh /run.sh
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/clickhouse/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: clickhouse
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: clickhouse
    app.kubernetes.io/version: 24.10.2
    helm.sh/chart: clickhouse-6.3.3
    app.kubernetes.io/component: clickhouse
data:
  00_default_overrides.xml: |
    <clickhouse>
      <!-- Macros -->
      <macros>
        <shard from_env="CLICKHOUSE_SHARD_ID"></shard>
        <replica from_env="CLICKHOUSE_REPLICA_ID"></replica>
        <layer>clickhouse</layer>
      </macros>
      <!-- Log Level -->
      <logger>
        <level>error</level>
      </logger>
      <!-- Zookeeper configuration -->
      <zookeeper>
        
      </zookeeper>
    </clickhouse>
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/clickhouse/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: clickhouse-scripts
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: clickhouse
    app.kubernetes.io/version: 24.10.2
    helm.sh/chart: clickhouse-6.3.3
    app.kubernetes.io/component: clickhouse
data:
  setup.sh: |-
    #!/bin/bash

    # Execute entrypoint as usual after obtaining KEEPER_SERVER_ID
    # check KEEPER_SERVER_ID in persistent volume via myid
    # if not present, set based on POD hostname
    if [[ -f "/bitnami/clickhouse/keeper/data/myid" ]]; then
        export KEEPER_SERVER_ID="$(cat /bitnami/clickhouse/keeper/data/myid)"
    else
        HOSTNAME="$(hostname -s)"
        if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then
            export KEEPER_SERVER_ID=${BASH_REMATCH[2]}
        else
            echo "Failed to get index from hostname $HOST"
            exit 1
        fi
    fi
    exec /opt/bitnami/scripts/clickhouse/entrypoint.sh /opt/bitnami/scripts/clickhouse/run.sh -- --listen_host=0.0.0.0
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/hyperswitch-card-vault/templates/configmap.yaml
apiVersion: v1
data:
  development.toml: |
    [server]
    host = "0.0.0.0"
    port = 8080

    [secrets]
    tenant = "hyperswitch"
kind: ConfigMap
metadata:
  name: hyperswitch-vault-config-hypers-v1
  namespace: hyperswitch
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/kafka/templates/broker/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka0-broker-configuration
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.9.0
    helm.sh/chart: kafka-31.0.0
    app.kubernetes.io/component: broker
    app.kubernetes.io/part-of: kafka
data:
  server.properties: |-
    # Listeners configuration
    listeners=CLIENT://:9092,INTERNAL://:9094
    listener.security.protocol.map=CLIENT:PLAINTEXT,INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
    advertised.listeners=CLIENT://advertised-address-placeholder:9092,INTERNAL://advertised-address-placeholder:9094
    # KRaft node role
    process.roles=broker
    #node.id=
    controller.listener.names=CONTROLLER
    controller.quorum.voters=0@kafka0-controller-0.kafka0-controller-headless.hyperswitch.svc.cluster.local:9093
    # Kafka data logs directory
    log.dir=/bitnami/kafka/data
    # Kafka application logs directory
    logs.dir=/opt/bitnami/kafka/logs

    # Common Kafka Configuration
    
    # Interbroker configuration
    inter.broker.listener.name=INTERNAL

    # Custom Kafka Configuration
    offsets.topic.replication.factor=1
    transaction.state.log.replication.factor=1
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/kafka/templates/controller-eligible/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka0-controller-configuration
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.9.0
    helm.sh/chart: kafka-31.0.0
    app.kubernetes.io/component: controller-eligible
    app.kubernetes.io/part-of: kafka
data:
  server.properties: |-
    # Listeners configuration
    listeners=CLIENT://:9092,INTERNAL://:9094,CONTROLLER://:9093
    advertised.listeners=CLIENT://advertised-address-placeholder:9092,INTERNAL://advertised-address-placeholder:9094
    listener.security.protocol.map=CLIENT:PLAINTEXT,INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
    # KRaft process roles
    process.roles=controller,broker
    #node.id=
    controller.listener.names=CONTROLLER
    controller.quorum.voters=0@kafka0-controller-0.kafka0-controller-headless.hyperswitch.svc.cluster.local:9093
    # Kafka data logs directory
    log.dir=/bitnami/kafka/data
    # Kafka application logs directory
    logs.dir=/opt/bitnami/kafka/logs

    # Common Kafka Configuration
    
    # Interbroker configuration
    inter.broker.listener.name=INTERNAL

    # Custom Kafka Configuration
    offsets.topic.replication.factor=1
    transaction.state.log.replication.factor=1
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/kafka/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka0-scripts
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.9.0
    helm.sh/chart: kafka-31.0.0
data:
  kafka-init.sh: |-
    #!/bin/bash

    set -o errexit
    set -o nounset
    set -o pipefail

    error(){
      local message="${1:?missing message}"
      echo "ERROR: ${message}"
      exit 1
    }

    retry_while() {
        local -r cmd="${1:?cmd is missing}"
        local -r retries="${2:-12}"
        local -r sleep_time="${3:-5}"
        local return_value=1

        read -r -a command <<< "$cmd"
        for ((i = 1 ; i <= retries ; i+=1 )); do
            "${command[@]}" && return_value=0 && break
            sleep "$sleep_time"
        done
        return $return_value
    }

    replace_in_file() {
        local filename="${1:?filename is required}"
        local match_regex="${2:?match regex is required}"
        local substitute_regex="${3:?substitute regex is required}"
        local posix_regex=${4:-true}

        local result

        # We should avoid using 'sed in-place' substitutions
        # 1) They are not compatible with files mounted from ConfigMap(s)
        # 2) We found incompatibility issues with Debian10 and "in-place" substitutions
        local -r del=$'\001' # Use a non-printable character as a 'sed' delimiter to avoid issues
        if [[ $posix_regex = true ]]; then
            result="$(sed -E "s${del}${match_regex}${del}${substitute_regex}${del}g" "$filename")"
        else
            result="$(sed "s${del}${match_regex}${del}${substitute_regex}${del}g" "$filename")"
        fi
        echo "$result" > "$filename"
    }

    kafka_conf_set() {
        local file="${1:?missing file}"
        local key="${2:?missing key}"
        local value="${3:?missing value}"

        # Check if the value was set before
        if grep -q "^[#\\s]*$key\s*=.*" "$file"; then
            # Update the existing key
            replace_in_file "$file" "^[#\\s]*${key}\s*=.*" "${key}=${value}" false
        else
            # Add a new key
            printf '\n%s=%s' "$key" "$value" >>"$file"
        fi
    }

    replace_placeholder() {
      local placeholder="${1:?missing placeholder value}"
      local password="${2:?missing password value}"
      local -r del=$'\001' # Use a non-printable character as a 'sed' delimiter to avoid issues with delimiter symbols in sed string
      sed -i "s${del}$placeholder${del}$password${del}g" "$KAFKA_CONFIG_FILE"
    }

    append_file_to_kafka_conf() {
        local file="${1:?missing source file}"
        local conf="${2:?missing kafka conf file}"

        cat "$1" >> "$2"
    }

    configure_external_access() {
      # Configure external hostname
      if [[ -f "/shared/external-host.txt" ]]; then
        host=$(cat "/shared/external-host.txt")
      elif [[ -n "${EXTERNAL_ACCESS_HOST:-}" ]]; then
        host="$EXTERNAL_ACCESS_HOST"
      elif [[ -n "${EXTERNAL_ACCESS_HOSTS_LIST:-}" ]]; then
        read -r -a hosts <<<"$(tr ',' ' ' <<<"${EXTERNAL_ACCESS_HOSTS_LIST}")"
        host="${hosts[$POD_ID]}"
      elif [[ "$EXTERNAL_ACCESS_HOST_USE_PUBLIC_IP" =~ ^(yes|true)$ ]]; then
        host=$(curl -s https://ipinfo.io/ip)
      else
        error "External access hostname not provided"
      fi

      # Configure external port
      if [[ -f "/shared/external-port.txt" ]]; then
        port=$(cat "/shared/external-port.txt")
      elif [[ -n "${EXTERNAL_ACCESS_PORT:-}" ]]; then
        if [[ "${EXTERNAL_ACCESS_PORT_AUTOINCREMENT:-}" =~ ^(yes|true)$ ]]; then
          port="$((EXTERNAL_ACCESS_PORT + POD_ID))"
        else
          port="$EXTERNAL_ACCESS_PORT"
        fi
      elif [[ -n "${EXTERNAL_ACCESS_PORTS_LIST:-}" ]]; then
        read -r -a ports <<<"$(tr ',' ' ' <<<"${EXTERNAL_ACCESS_PORTS_LIST}")"
        port="${ports[$POD_ID]}"
      else
        error "External access port not provided"
      fi
      # Configure Kafka advertised listeners
      sed -i -E "s|^(advertised\.listeners=\S+)$|\1,EXTERNAL://${host}:${port}|" "$KAFKA_CONFIG_FILE"
    }

    export KAFKA_CONFIG_FILE=/config/server.properties
    cp /configmaps/server.properties $KAFKA_CONFIG_FILE

    # Get pod ID and role, last and second last fields in the pod name respectively
    POD_ID=$(echo "$MY_POD_NAME" | rev | cut -d'-' -f 1 | rev)
    POD_ROLE=$(echo "$MY_POD_NAME" | rev | cut -d'-' -f 2 | rev)

    # Configure node.id and/or broker.id
    if [[ -f "/bitnami/kafka/data/meta.properties" ]]; then
        if grep -q "broker.id" /bitnami/kafka/data/meta.properties; then
          ID="$(grep "broker.id" /bitnami/kafka/data/meta.properties | awk -F '=' '{print $2}')"
          kafka_conf_set "$KAFKA_CONFIG_FILE" "node.id" "$ID"
        else
          ID="$(grep "node.id" /bitnami/kafka/data/meta.properties | awk -F '=' '{print $2}')"
          kafka_conf_set "$KAFKA_CONFIG_FILE" "node.id" "$ID"
        fi
    else
        ID=$((POD_ID + KAFKA_MIN_ID))
        kafka_conf_set "$KAFKA_CONFIG_FILE" "node.id" "$ID"
    fi
    replace_placeholder "advertised-address-placeholder" "${MY_POD_NAME}.kafka0-${POD_ROLE}-headless.hyperswitch.svc.cluster.local"
    if [[ "${EXTERNAL_ACCESS_ENABLED:-false}" =~ ^(yes|true)$ ]]; then
      configure_external_access
    fi
    if [ -f /secret-config/server-secret.properties ]; then
      append_file_to_kafka_conf /secret-config/server-secret.properties $KAFKA_CONFIG_FILE
    fi
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/grafana/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hypers-v1-grafana
  namespace: hyperswitch
  labels:
    helm.sh/chart: grafana-6.43.5
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "10.0.1"
    app.kubernetes.io/managed-by: Helm
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true
    [grafana_net]
    url = https://grafana.net
    [log]
    mode = console
    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    [server]
    domain = ''
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/templates/datasources.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hypers-v1-loki-stack
  namespace: hyperswitch
  labels:
    app: loki-stack
    chart: loki-stack-2.10.2
    release: hypers-v1
    heritage: Helm
    grafana_datasource: "1"
data:
  loki-stack-datasource.yaml: |-
    apiVersion: 1
    datasources:
    - name: Loki
      type: loki
      access: proxy
      url: "http://loki:3100"
      version: 1
      isDefault: true
      jsonData:
        {}
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/templates/tests/loki-test-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hypers-v1-loki-stack-test
  labels:
    app: loki-stack
    chart: loki-stack-2.10.2
    release: hypers-v1
    heritage: Helm
data:
  test.sh: |
    #!/usr/bin/env bash

    LOKI_URI="http://${LOKI_SERVICE}:${LOKI_PORT}"

    function setup() {
      apk add -u curl jq
      until (curl -s ${LOKI_URI}/loki/api/v1/label/app/values | jq -e '.data[] | select(. == "loki")'); do
        sleep 1
      done
    }

    @test "Has labels" {
      curl -s ${LOKI_URI}/loki/api/v1/labels | \
      jq -e '.data[] | select(. == "app")'
    }

    @test "Query log entry" {
      curl -sG ${LOKI_URI}/api/prom/query?limit=10 --data-urlencode 'query={app="loki"}' | \
      jq -e '.streams[].entries | length >=1'
    }

    @test "Push log entry" {
      local timestamp=$(date +%s000000000)
      local data=$(jq -n --arg timestamp "${timestamp}" '{"streams": [{"stream": {"app": "loki-test"}, "values": [[$timestamp, "foobar"]]}]}')

      curl -s -X POST -H "Content-Type: application/json" ${LOKI_URI}/loki/api/v1/push --data-raw "${data}"

      curl -sG ${LOKI_URI}/loki/api/v1/query_range?limit=1 --data-urlencode 'query={app="loki-test"}' | \
      jq -e '.data.result[].values[][1] == "foobar"'
    }
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hypers-v1-redis-configuration
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.3
    helm.sh/chart: redis-18.6.1
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hypers-v1-redis-health
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.3
    helm.sh/chart: redis-18.6.1
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hypers-v1-redis-scripts
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.3
    helm.sh/chart: redis-18.6.1
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
  start-replica.sh: |
    #!/bin/bash

    get_port() {
        hostname="$1"
        type="$2"

        port_var=$(echo "${hostname^^}_SERVICE_PORT_$type" | sed "s/-/_/g")
        port=${!port_var}

        if [ -z "$port" ]; then
            case $type in
                "SENTINEL")
                    echo 26379
                    ;;
                "REDIS")
                    echo 6379
                    ;;
            esac
        else
            echo $port
        fi
    }

    get_full_hostname() {
        hostname="$1"
        full_hostname="${hostname}.${HEADLESS_SERVICE}"
        echo "${full_hostname}"
    }

    REDISPORT=$(get_port "$HOSTNAME" "REDIS")
    HEADLESS_SERVICE="hypers-v1-redis-headless.hyperswitch.svc.cluster.local"

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/replica.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi

    echo "" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-port $REDISPORT" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-ip $(get_full_hostname "$HOSTNAME")" >> /opt/bitnami/redis/etc/replica.conf
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--replicaof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/vector/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hypers-v1-vector
  labels:
    helm.sh/chart: vector-0.37.0
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/component: Aggregator
    app.kubernetes.io/version: "0.42.0-distroless-libc"
    app.kubernetes.io/managed-by: Helm
    
data:
  vector.yaml: |
    acknowledgements:
      enabled: true
    api:
      address: 0.0.0.0:8686
      enabled: true
    sinks:
      log_app_loki:
        encoding:
          codec: json
        endpoint: http://loki:3100
        inputs:
        - parsed_hs_server_logs
        labels:
          container: ''
          job: app_logs
          source: vector
          stream: ''
        type: loki
      log_events:
        encoding:
          codec: json
        endpoint: http://loki:3100
        inputs:
        - kafka_tx_events
        - sessionized_kafka_tx_events
        labels:
          job: kafka
          source: vector
          topic: ''
        type: loki
      metrics:
        inputs:
        - vector_metrics
        - node_metrics
        type: prometheus_exporter
      opensearch_events_1:
        api_version: v7
        auth:
          password: 0penS3arc#
          strategy: basic
          user: admin
        bulk:
          index: vector-
        encoding:
          except_fields:
          - message_key
          - offset
          - partition
          - topic
          - clickhouse_database
          - last_synced
          - sign_flag
        endpoints:
        - https://opensearch:9200
        id_key: message_key
        inputs:
        - plus_1_events
        tls:
          verify_certificate: false
          verify_hostname: false
        type: elasticsearch
      opensearch_events_2:
        api_version: v7
        auth:
          password: 0penS3arc#
          strategy: basic
          user: admin
        bulk:
          index: vector--%Y-%m-%d
        encoding:
          except_fields:
          - message_key
          - offset
          - partition
          - topic
          - clickhouse_database
          - last_synced
          - sign_flag
        endpoints:
        - https://opensearch:9200
        id_key: message_key
        inputs:
        - plus_1_events
        tls:
          verify_certificate: false
          verify_hostname: false
        type: elasticsearch
      opensearch_events_3:
        api_version: v7
        auth:
          password: 0penS3arc#
          strategy: basic
          user: admin
        bulk:
          index: ''
        encoding:
          except_fields:
          - message_key
          - offset
          - partition
          - topic
          - clickhouse_database
          - last_synced
          - sign_flag
        endpoints:
        - https://opensearch:9200
        id_key: message_key
        inputs:
        - plus_1_events
        tls:
          verify_certificate: false
          verify_hostname: false
        type: elasticsearch
      opensearch_logs:
        api_version: v7
        auth:
          password: 0penS3arc#
          strategy: basic
          user: admin
        bulk:
          index: logs--%Y-%m-%d
        endpoints:
        - https://opensearch:9200
        inputs:
        - parsed_hs_server_logs
        tls:
          verify_certificate: false
          verify_hostname: false
        type: elasticsearch
      sdk_sink:
        bootstrap_servers: kafka0:29092
        encoding:
          codec: json
          except_fields:
          - path
          - source_type
        inputs:
        - amend_sdk_logs
        key_field: .merchant_id
        topic: hyper-sdk-logs
        type: kafka
    sources:
      app_logs:
        include_labels:
        - logs=promtail
        type: docker_logs
      kafka_tx_events:
        bootstrap_servers: kafka0:29092
        decoding:
          codec: json
        group_id: sessionizer
        topics:
        - hyperswitch-payment-attempt-events
        - hyperswitch-payment-intent-events
        - hyperswitch-refund-events
        - hyperswitch-dispute-events
        type: kafka
      node_metrics:
        type: host_metrics
      sdk_source:
        address: 0.0.0.0:3103
        encoding: json
        type: http_server
      sessionized_kafka_tx_events:
        bootstrap_servers: kafka0:29092
        decoding:
          codec: json
        group_id: sessionizer
        topics:
        - ^sessionizer
        type: kafka
      vector_metrics:
        type: internal_metrics
    transforms:
      amend_sdk_logs:
        inputs:
        - sdk_transformed
        source: ".before_transform = now()\n\nmerchant_id = .merchant_id\n# row = get_enrichment_table_record!(\"sdk_map\",
          { \"publishable_key\" : merchant_id }, case_sensitive: true) \n# .merchant_id
          = row.merchant_id\n\n.after_transform = now()\n"
        type: remap
      events_create_ts:
        inputs:
        - kafka_tx_events
        source: |-
          .timestamp = from_unix_timestamp(.created_at, unit: "seconds") ?? now()
          ."@timestamp" = from_unix_timestamp(.created_at, unit: "seconds") ?? now()
        type: remap
      hs_server_logs:
        condition: .labels."com.docker.compose.service" == "hyperswitch-server"
        inputs:
        - app_logs
        type: filter
      parsed_hs_server_logs:
        inputs:
        - app_logs
        source: .message = parse_json!(.message)
        type: remap
      plus_1_events:
        condition: .sign_flag == 1
        inputs:
        - events_create_ts
        - sessionized_events_create_ts
        type: filter
      sdk_transformed:
        inputs:
        - sdk_source
        key_field: ''
        threshold: 1000
        type: throttle
        window_secs: 60
      sessionized_events_create_ts:
        inputs:
        - sessionized_kafka_tx_events
        source: |-
          .timestamp = from_unix_timestamp(.created_at, unit: "milliseconds") ?? now()
          ."@timestamp" = from_unix_timestamp(.created_at, unit: "milliseconds") ?? now()
        type: remap
---
# Source: hyperswitch-stack/charts/hyperswitch-app/templates/consumer/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: consumer-cm-hypers-v1
data: 
  consumer.toml: |
    # Scheduler settings provides a point to modify the behaviour of scheduler flow.
    # It defines the streams/queues name and configuration as well as event selection variables
    [scheduler]
    consumer_group = "scheduler_group"
    graceful_shutdown_interval = 60000 # Specifies how much time to wait while re-attempting shutdown for a service (in milliseconds)
    loop_interval = 30000              # Specifies how much time to wait before starting the defined behaviour of producer or consumer (in milliseconds)
    stream = "scheduler_stream"
    
    [scheduler.producer]
    batch_size = 50                   # Specifies the batch size the producer will push under a single entry in the redis queue
    lock_key = "producer_locking_key" # The following keys defines the producer lock that is created in redis with
    lock_ttl = 160                    # the ttl being the expiry (in seconds)
    lower_fetch_limit = 900           # Lower limit for fetching entries from redis queue (in seconds)
    upper_fetch_limit = 0             # Upper limit for fetching entries from the redis queue (in seconds)0
    
    # Scheduler server configuration
    [scheduler.server]
    port = 3000                       # Port on which the server will listen for incoming requests
    host = "127.0.0.1"                # Host IP address to bind the server to
    workers = 1                       # Number of actix workers to handle incoming requests concurrently
    
    [analytics]
    source = "clickhouse"
    
    [analytics.sqlx]
    pool_size = 5             # Number of connections to keep open
    connection_timeout = 10    # Timeout for database connection in seconds
    queue_strategy = "Fifo"   # Add the queue strategy used by the database bb8 client
    
    [paze_decrypt_keys]
    paze_private_key = "PAZE_PRIVATE_KEY"                       # Base 64 Encoded Private Key File cakey.pem generated for Paze -> Command to create private key: openssl req -newkey rsa:2048 -x509 -keyout cakey.pem -out cacert.pem -days 365
    paze_private_key_passphrase = "PAZE_PRIVATE_KEY_PASSPHRASE" # PEM Passphrase used for generating Private Key File cakey.pem
    
    [applepay_merchant_configs]
    applepay_endpoint = "https://apple-pay-gateway.apple.com/paymentservices/registerMerchant" # Apple pay gateway merchant endpoint
    
    [connector_onboarding.paypal]
    enabled = true # boolean
    
    [connector_request_reference_id_config]
    merchant_ids_send_payment_id_as_connector_request_id = ['merchant_id_1','merchant_id_2']
    
    [cors]
    max_age = 30                            # Maximum time (in seconds) for which this CORS request may be cached.
    allowed_methods = "GET,POST,PUT,DELETE" # List of methods that are allowed
    wildcard_origin = true                 # If true, allows any origin to make requests
    
    [email]
    active_email_client = "SES"
    
    [events]
    source = "kafka"
    
    [events.kafka]
    brokers = ['kafka0:29092']
    intent_analytics_topic = "hyperswitch-payment-intent-events"      # Kafka topic to be used for PaymentIntent events
    attempt_analytics_topic = "hyperswitch-payment-attempt-events"     # Kafka topic to be used for PaymentAttempt events
    refund_analytics_topic = "hyperswitch-refund-events"      # Kafka topic to be used for Refund events
    api_logs_topic = "hyperswitch-api-log-events"              # Kafka topic to be used for incoming api events
    connector_logs_topic = "hyperswitch-outgoing-connector-events"        # Kafka topic to be used for connector api events
    outgoing_webhook_logs_topic = "hyperswitch-outgoing-webhook-events" # Kafka topic to be used for outgoing webhook events
    dispute_analytics_topic = "hyperswitch-dispute-events"     # Kafka topic to be used for Dispute events
    audit_events_topic = "hyperswitch-audit-events"          # Kafka topic to be used for Payment Audit events
    payout_analytics_topic = "hyperswitch-payout-events"      # Kafka topic to be used for Payouts and PayoutAttempt events
    consolidated_events_topic = "hyperswitch-consolidated-events"      # Kafka topic to be used for Consolidated events
    authentication_analytics_topic = "hyperswitch-authentication-events" # Kafka topic to be used for Authentication events
    fraud_check_analytics_topic = "hyperswitch-fraud-check-events"    # Kafka topic to be used for Fraud Check events
    
    [forex_api]
    call_delay = 21601                # Api calls are made after every 6 hrs
    local_fetch_retry_count = 5       # Fetch from Local cache has retry count as 5
    local_fetch_retry_delay = 1010    # Retry delay for checking write condition
    api_timeout = 20001               # Api timeouts once it crosses 20000 ms
    redis_lock_timeout = 260001        # Redis remains write locked for 26000 ms once the acquire_redis_lock is called
    
    [locker]
    host = "http://hyperswitch-vault"
    host_rs = ""
    mock_locker = false
    locker_signing_key_id = "1"
    locker_enabled = true
    ttl_for_storage_in_secs = 2.20752e+08
    
    [log.console]
    enabled = true
    level = "DEBUG"
    log_format = "json"
    
    [log.file]
    enabled = false
    level = "DEBUG"
    log_format = "json"
    
    [log.telemetry]
    traces_enabled = false                                # boolean [true or false], whether traces are enabled
    metrics_enabled = false                               # boolean [true or false], whether metrics are enabled
    ignore_errors = false                                 # boolean [true or false], whether to ignore errors during traces or metrics pipeline setup
    sampling_rate = 0.1                                   # decimal rate between 0.0 - 1.0
    otel_exporter_otlp_endpoint = "http://localhost:4317" # endpoint to send metrics and traces to, can include port number
    otel_exporter_otlp_timeout = 5000                     # timeout (in milliseconds) for sending metrics and traces
    use_xray_generator = false                            # Set this to true for AWS X-ray compatible traces
    route_to_trace = ['*/confirm']
    bg_metrics_collection_interval_in_secs = 15           # Interval for collecting the metrics in background thread
    
    [lock_settings]
    delay_between_retries_in_milliseconds = 500 # Delay between retries in milliseconds
    redis_lock_expiry_seconds = 180             # Seconds before the redis lock expires
    
    [master_database]
    pool_size = "20"
    connection_timeout = 10   
    queue_strategy = "Fifo"
    
    [generic_link]
    [generic_link.payment_method_collect]
    sdk_url = "http://localhost:9090/web/0.103.1/v0/HyperLoader.js"
    expiry = 900
    
    [generic_link.payment_method_collect.ui_config]
    theme = "#4285F4"
    logo = "https://app.hyperswitch.io/HyperswitchFavicon.png"
    merchant_name = "HyperSwitch"
    
    [generic_link.payment_method_collect.enabled_payment_methods]
    card = "credit,debit"
    bank_transfer = "ach,bacs,sepa"
    wallet = "paypal,pix,venmo"
    
    [generic_link.payout_link]
    sdk_url = "http://localhost:9090/web/0.103.1/v0/HyperLoader.js"
    expiry = 900
    
    [generic_link.payout_link.ui_config]
    theme = "#4285F4"
    logo = "https://app.hyperswitch.io/HyperswitchFavicon.png"
    merchant_name = "HyperSwitch"
    
    [generic_link.payout_link.enabled_payment_methods]
    card = "credit,debit"
    
    [payment_link]
    sdk_url = "http://localhost:9090/web/0.103.1/v0/HyperLoader.js"
    
    [payment_method_auth]
    redis_expiry = 900          # Redis expiry time in milliseconds
    
    [redis]
    host = "127.0.0.1"
    port = 6379
    pool_size = 5 # Number of connections to keep open
    reconnect_max_attempts = 5 # Maximum number of reconnection attempts to make before failing. Set to 0 to retry forever.
    reconnect_delay = 5 # Delay between reconnection attempts, in milliseconds
    default_ttl = 300 # Default TTL for entries, in seconds
    default_hash_ttl = 900 # Default TTL for hashes entries, in seconds
    use_legacy_version = false # RESP protocol for fred crate (set this to true if using RESPv2 or redis version < 6)
    stream_read_count = 1 # Default number of entries to read from stream if not provided in stream read options
    auto_pipeline = true # Whether or not the client should automatically pipeline commands across tasks when possible.
    disable_auto_backpressure = false # Whether or not to disable the automatic backpressure features when pipelining is enabled.
    max_in_flight_commands = 5000 # The maximum number of in-flight commands (per connection) before backpressure will be applied.
    default_command_timeout = 30 # An optional timeout to apply to all commands. In seconds
    unresponsive_timeout = 10 # An optional timeout for Unresponsive commands in seconds. This should be less than default_command_timeout.
    max_feed_count = 200 # The maximum number of frames that will be fed to a socket before flushing.
    cluster_enabled = false # boolean
    cluster_urls = ['redis.cluster.uri-1:8080', 'redis.cluster.uri-2:4115'] # List of redis cluster urls
    
    [replica_database]
    pool_size = "20"
    connection_timeout = 10   # Timeout for database connection in seconds
    queue_strategy = "Fifo"   # Add the queue strategy used by the database bb8 client
    
    [opensearch]
    host = "https://localhost:9200"
    
    [opensearch.auth]
    auth = "basic"
    username = "admin"
    password = "admin"
    region = "eu-central-1"
    
    [opensearch.indexes]
    payment_attempts = "hyperswitch-payment-attempt-events"
    payment_intents = "hyperswitch-payment-intent-events"
    refunds = "hyperswitch-refund-events"
    disputes = "hyperswitch-dispute-events"
    sessionizer_payment_attempts = "sessionizer-payment-attempt-events"
    sessionizer_payment_intents = "sessionizer-payment-intent-events"
    sessionizer_refunds = "sessionizer-refund-events"
    sessionizer_disputes = "sessionizer-dispute-events"
    
    [report_download_config]
    dispute_function = "report_download_config_dispute_function" # Config to download dispute report
    payment_function = "report_download_config_payment_function" # Config to download payment report
    refund_function = "report_download_config_refund_function"   # Config to download refund report
    region = "report_download_config_region"    
    
    [server]
    port = 8080
    host = "0.0.0.0"
    request_body_limit = 32768 # Post request body is limited to 16k
    shutdown_timeout = 30
    workers = 8
    
    # Secrets manager client to be used
    [secrets_management]
      secrets_manager = "no_encryption"
      [secrets_management.hc_vault]
        token = "vault_token"
        url = "http://vault:8200"
    
    
    # Encryption manager client to be used
    [encryption_management]
      encryption_manager = "no_encryption"
    
    [multitenancy]
      enabled = false
      [multitenancy.global_tenant]
        clickhouse_database = "default"
        redis_key_prefix = ""
        schema = "public"
      [multitenancy.tenants]
        [multitenancy.tenants.public]
          base_url = "http://localhost:8080"
          clickhouse_database = "default"
          redis_key_prefix = ""
          schema = "public"
    
    [user]
      base_url = "http://localhost:9000"
      force_two_factor_auth = false
      password_validity_in_days = "90"
      totp_issuer_name = "Hyperswitch Sandbox"
      two_factor_auth_expiry_in_secs = "300"
    
    
    [cell_information]
    id = "12345" # Default CellID for Global Cell Information
    
    
    [grpc_client.dynamic_routing_client] # Dynamic Routing Client Configuration
    host = "localhost" # Client Host
    port = 7000        # Client Port
    service = "dynamo" # Service name
    
    # Bank redirect configs for allowed banks
    [bank_config]
    eps.adyen.banks = "bank_austria,bawag_psk_ag,dolomitenbank,easybank_ag,erste_bank_und_sparkassen,hypo_tirol_bank_ag,posojilnica_bank_e_gen,raiffeisen_bankengruppe_osterreich,schoellerbank_ag,sparda_bank_wien,volksbank_gruppe,volkskreditbank_ag"
    eps.stripe.banks = "arzte_und_apotheker_bank,austrian_anadi_bank_ag,bank_austria,bankhaus_carl_spangler,bankhaus_schelhammer_und_schattera_ag,bawag_psk_ag,bks_bank_ag,brull_kallmus_bank_ag,btv_vier_lander_bank,capital_bank_grawe_gruppe_ag,dolomitenbank,easybank_ag,erste_bank_und_sparkassen,hypo_alpeadriabank_international_ag,hypo_noe_lb_fur_niederosterreich_u_wien,hypo_oberosterreich_salzburg_steiermark,hypo_tirol_bank_ag,hypo_vorarlberg_bank_ag,hypo_bank_burgenland_aktiengesellschaft,marchfelder_bank,oberbank_ag,raiffeisen_bankengruppe_osterreich,schoellerbank_ag,sparda_bank_wien,volksbank_gruppe,volkskreditbank_ag,vr_bank_braunau"
    ideal.adyen.banks = "abn_amro,asn_bank,bunq,ing,knab,n26,nationale_nederlanden,rabobank,regiobank,revolut,sns_bank,triodos_bank,van_lanschot,yoursafe"
    ideal.stripe.banks = "abn_amro,asn_bank,bunq,handelsbanken,ing,knab,moneyou,rabobank,regiobank,revolut,sns_bank,triodos_bank,van_lanschot"
    ideal.multisafepay.banks = "abn_amro, asn_bank, bunq, handelsbanken, nationale_nederlanden, n26, ing, knab, rabobank, regiobank, revolut, sns_bank,triodos_bank, van_lanschot, yoursafe"
    online_banking_czech_republic.adyen.banks = "ceska_sporitelna,komercni_banka,platnosc_online_karta_platnicza"
    online_banking_fpx.adyen.banks = "affin_bank,agro_bank,alliance_bank,am_bank,bank_islam,bank_muamalat,bank_rakyat,bank_simpanan_nasional,cimb_bank,hong_leong_bank,hsbc_bank,kuwait_finance_house,maybank,ocbc_bank,public_bank,rhb_bank,standard_chartered_bank,uob_bank"
    online_banking_fpx.fiuu.banks = "affin_bank,agro_bank,alliance_bank,am_bank,bank_of_china,bank_islam,bank_muamalat,bank_rakyat,bank_simpanan_nasional,cimb_bank,hong_leong_bank,hsbc_bank,kuwait_finance_house,maybank,ocbc_bank,public_bank,rhb_bank,standard_chartered_bank,uob_bank"
    online_banking_poland.adyen.banks = "blik_psp,place_zipko,m_bank,pay_with_ing,santander_przelew24,bank_pekaosa,bank_millennium,pay_with_alior_bank,banki_spoldzielcze,pay_with_inteligo,bnp_paribas_poland,bank_nowy_sa,credit_agricole,pay_with_bos,pay_with_citi_handlowy,pay_with_plus_bank,toyota_bank,velo_bank,e_transfer_pocztowy24"
    online_banking_slovakia.adyen.banks = "e_platby_vub,postova_banka,sporo_pay,tatra_pay,viamo"
    online_banking_thailand.adyen.banks = "bangkok_bank,krungsri_bank,krung_thai_bank,the_siam_commercial_bank,kasikorn_bank"
    open_banking_uk.adyen.banks = "aib,bank_of_scotland,danske_bank,first_direct,first_trust,halifax,lloyds,monzo,nat_west,nationwide_bank,royal_bank_of_scotland,starling,tsb_bank,tesco_bank,ulster_bank,barclays,hsbc_bank,revolut,santander_przelew24,open_bank_success,open_bank_failure,open_bank_cancelled"
    przelewy24.stripe.banks = "alior_bank,bank_millennium,bank_nowy_bfg_sa,bank_pekao_sa,banki_spbdzielcze,blik,bnp_paribas,boz,citi,credit_agricole,e_transfer_pocztowy24,getin_bank,idea_bank,inteligo,mbank_mtransfer,nest_przelew,noble_pay,pbac_z_ipko,plus_bank,santander_przelew24,toyota_bank,volkswagen_bank"
    
    [connector_customer]
    connector_list = "stax,stripe,gocardless"
    payout_connector_list = "stripe,wise"
    
    # Connector configuration, provided attributes will be used to fulfill API requests.
    # Examples provided here are sandbox/test base urls, can be replaced by live or mock
    # base urls based on your need.
    # Note: These are not optional attributes. hyperswitch request can fail due to invalid/empty values.
    [connectors]
    aci.base_url = "https://eu-test.oppwa.com/"
    adyen.base_url = "https://checkout-test.adyen.com/"
    adyen.payout_base_url = "https://pal-test.adyen.com/"
    adyen.dispute_base_url = "https://ca-test.adyen.com/"
    adyenplatform.base_url = "https://balanceplatform-api-test.adyen.com/"
    airwallex.base_url = "https://api-demo.airwallex.com/"
    amazonpay.base_url = "https://pay-api.amazon.com/v2"
    applepay.base_url = "https://apple-pay-gateway.apple.com/"
    authorizedotnet.base_url = "https://apitest.authorize.net/xml/v1/request.api"
    bambora.base_url = "https://api.na.bambora.com"
    bamboraapac.base_url = "https://demo.ippayments.com.au/interface/api"
    bankofamerica.base_url = "https://apitest.merchant-services.bankofamerica.com/"
    billwerk.base_url = "https://api.reepay.com/"
    billwerk.secondary_base_url = "https://card.reepay.com/"
    bitpay.base_url = "https://test.bitpay.com"
    bluesnap.base_url = "https://sandbox.bluesnap.com/"
    bluesnap.secondary_base_url = "https://sandpay.bluesnap.com/"
    boku.base_url = "https://$-api4-stage.boku.com"
    braintree.base_url = "https://payments.sandbox.braintree-api.com/graphql"
    cashtocode.base_url = "https://cluster05.api-test.cashtocode.com"
    checkout.base_url = "https://api.sandbox.checkout.com/"
    coinbase.base_url = "https://api.commerce.coinbase.com"
    cryptopay.base_url = "https://business-sandbox.cryptopay.me"
    cybersource.base_url = "https://apitest.cybersource.com/"
    datatrans.base_url = "https://api.sandbox.datatrans.com/"
    deutschebank.base_url = "https://testmerch.directpos.de/rest-api"
    digitalvirgo.base_url = "https://dcb-integration-service-sandbox-external.staging.digitalvirgo.pl"
    dlocal.base_url = "https://sandbox.dlocal.com/"
    dummyconnector.base_url = "http://localhost:8080/dummy-connector"
    ebanx.base_url = "https://sandbox.ebanxpay.com/"
    elavon.base_url = "https://api.demo.convergepay.com"
    fiserv.base_url = "https://cert.api.fiservapps.com/"
    fiservemea.base_url = "https://prod.emea.api.fiservapps.com/sandbox"
    fiuu.base_url = "https://sandbox.merchant.razer.com/"
    fiuu.secondary_base_url="https://sandbox.merchant.razer.com/"
    fiuu.third_base_url="https://api.merchant.razer.com/"
    forte.base_url = "https://sandbox.forte.net/api/v3"
    globalpay.base_url = "https://apis.sandbox.globalpay.com/ucp/"
    globepay.base_url = "https://pay.globepay.co/"
    gocardless.base_url = "https://api-sandbox.gocardless.com"
    gpayments.base_url = "https://{{merchant_endpoint_prefix}}-test.api.as1.gpayments.net"
    helcim.base_url = "https://api.helcim.com/"
    iatapay.base_url = "https://sandbox.iata-pay.iata.org/api/v1"
    itaubank.base_url = "https://sandbox.devportal.itau.com.br/"
    jpmorgan.base_url = "https://api-mock.payments.jpmorgan.com/api/v2"
    klarna.base_url = "https://api{{klarna_region}}.playground.klarna.com/"
    mifinity.base_url = "https://demo.mifinity.com/"
    mollie.base_url = "https://api.mollie.com/v2/"
    mollie.secondary_base_url = "https://api.cc.mollie.com/v1/"
    multisafepay.base_url = "https://testapi.multisafepay.com/"
    nexinets.base_url = "https://apitest.payengine.de/v1"
    nexixpay.base_url = "https://xpaysandbox.nexigroup.com/api/phoenix-0.0/psp/api/v1"
    nmi.base_url = "https://secure.nmi.com/"
    nomupay.base_url = "https://payout-api.sandbox.nomupay.com"
    noon.base_url = "https://api-test.noonpayments.com/"
    noon.key_mode = "Test"
    novalnet.base_url = "https://payport.novalnet.de/v2"
    nuvei.base_url = "https://ppp-test.nuvei.com/"
    opayo.base_url = "https://pi-test.sagepay.com/"
    opennode.base_url = "https://dev-api.opennode.com"
    paybox.base_url = "https://preprod-ppps.paybox.com/PPPS.php"
    paybox.secondary_base_url="https://preprod-tpeweb.paybox.com/"
    payeezy.base_url = "https://api-cert.payeezy.com/"
    payme.base_url = "https://sandbox.payme.io/"
    payone.base_url = "https://payment.preprod.payone.com/"
    paypal.base_url = "https://api-m.sandbox.paypal.com/"
    payu.base_url = "https://secure.snd.payu.com/"
    placetopay.base_url = "https://test.placetopay.com/rest/gateway"
    plaid.base_url = "https://sandbox.plaid.com"
    powertranz.base_url = "https://staging.ptranz.com/api/"
    prophetpay.base_url = "https://ccm-thirdparty.cps.golf/"
    rapyd.base_url = "https://sandboxapi.rapyd.net"
    razorpay.base_url = "https://sandbox.juspay.in/"
    riskified.base_url = "https://sandbox.riskified.com/api"
    shift4.base_url = "https://api.shift4.com/"
    signifyd.base_url = "https://api.signifyd.com/"
    square.base_url = "https://connect.squareupsandbox.com/"
    square.secondary_base_url = "https://pci-connect.squareupsandbox.com/"
    stax.base_url = "https://apiprod.fattlabs.com/"
    stripe.base_url = "https://api.stripe.com/"
    stripe.base_url_file_upload = "https://files.stripe.com/"
    taxjar.base_url = "https://api.sandbox.taxjar.com/v2/"
    thunes.base_url = "https://api.limonetikqualif.com/"
    trustpay.base_url = "https://test-tpgw.trustpay.eu/"
    trustpay.base_url_bank_redirects = "https://aapi.trustpay.eu/"
    tsys.base_url = "https://stagegw.transnox.com/"
    volt.base_url = "https://api.sandbox.volt.io/"
    wellsfargo.base_url = "https://apitest.cybersource.com/"
    wellsfargopayout.base_url = "https://api-sandbox.wellsfargo.com/"
    wise.base_url = "https://api.sandbox.transferwise.tech/"
    worldline.base_url = "https://eu.sandbox.api-ingenico.com/"
    worldpay.base_url = "https://try.access.worldpay.com/"
    zen.base_url = "https://api.zen-test.com/"
    zen.secondary_base_url = "https://secure.zen-test.com/"
    zsl.base_url = "https://api.sitoffalb.net/"
    threedsecureio.base_url = "https://service.sandbox.3dsecure.io"
    netcetera.base_url = "https://{{merchant_endpoint_prefix}}.3ds-server.prev.netcetera-cloud-payment.ch"
    
    [delayed_session_response]
    connectors_with_delayed_session_response = "trustpay,payme" # List of connectors which have delayed session response
    
    [dummy_connector]
    enabled = true                                                          # Whether dummy connector is enabled or not
    assets_base_url = "https://app.hyperswitch.io/assets/TestProcessor/"    # Base url for dummy connector assets
    authorize_ttl = 36000                                                   # Time to live for dummy connector authorize request in redis
    default_return_url = "https://app.hyperswitch.io/"                      # Default return url when no return url is passed while payment
    discord_invite_url = "https://discord.gg/wJZ7DVW8mm"                    # Discord invite url for hyperswitch
    payment_complete_duration = 500                                         # Fake delay duration for dummy connector payment complete
    payment_complete_tolerance = 100                                        # Fake delay tolerance for dummy connector payment complete
    payment_duration = 1000                                                 # Fake delay duration for dummy connector payment
    payment_retrieve_duration = 500                                         # Fake delay duration for dummy connector payment sync
    payment_retrieve_tolerance = 100                                        # Fake delay tolerance for dummy connector payment sync
    payment_tolerance = 100                                                 # Fake delay tolerance for dummy connector payment
    payment_ttl = 172800                                                    # Time to live for dummy connector payment in redis
    refund_duration = 1000                                                  # Fake delay duration for dummy connector refund
    refund_retrieve_duration = 500                                          # Fake delay duration for dummy connector refund sync
    refund_retrieve_tolerance = 100                                         # Fake delay tolerance for dummy connector refund sync
    refund_tolerance = 100                                                  # Fake delay tolerance for dummy connector refund
    refund_ttl = 172800                                                     # Time to live for dummy connector refund in redis
    slack_invite_url = "https://join.slack.com/t/hyperswitch-io/shared_invite/zt-2awm23agh-p_G5xNpziv6yAiedTkkqLg"    # Slack invite url for hyperswitch
    
    
    
    [frm]
    enabled = true
    
    [mandates.supported_payment_methods]
    bank_debit.ach = { connector_list = "gocardless,adyen" }                 # Mandate supported payment method type and connector for bank_debit
    bank_debit.becs = { connector_list = "gocardless" }                      # Mandate supported payment method type and connector for bank_debit
    bank_debit.bacs = { connector_list = "adyen" }                           # Mandate supported payment method type and connector for bank_debit
    bank_debit.sepa = { connector_list = "gocardless,adyen" }                # Mandate supported payment method type and connector for bank_debit
    card.credit.connector_list = "stripe,adyen,authorizedotnet,cybersource,globalpay,worldpay,multisafepay,nmi,nexinets,noon,bankofamerica,braintree"     # Mandate supported payment method type and connector for card
    card.debit.connector_list = "stripe,adyen,authorizedotnet,cybersource,globalpay,worldpay,multisafepay,nmi,nexinets,noon,bankofamerica,braintree"      # Mandate supported payment method type and connector for card
    pay_later.klarna.connector_list = "adyen"                       # Mandate supported payment method type and connector for pay_later
    wallet.apple_pay.connector_list = "stripe,adyen,cybersource,noon,bankofamerica"         # Mandate supported payment method type and connector for wallets
    wallet.google_pay.connector_list = "stripe,adyen,cybersource,bankofamerica"             # Mandate supported payment method type and connector for wallets
    wallet.paypal.connector_list = "adyen"                          # Mandate supported payment method type and connector for wallets
    bank_redirect.ideal.connector_list = "stripe,adyen,globalpay,multisafepay"   # Mandate supported payment method type and connector for bank_redirect
    bank_redirect.sofort.connector_list = "stripe,adyen,globalpay"  # Mandate supported payment method type and connector for bank_redirect
    bank_redirect.giropay.connector_list = "adyen,globalpay,multisafepay"        # Mandate supported payment method type and connector for bank_redirect
    
    [mandates.update_mandate_supported]
    card.credit = { connector_list = "cybersource" }            # Update Mandate supported payment method type and connector for card 
    card.debit = { connector_list = "cybersource" }             # Update Mandate supported payment method type and connector for card 
    
    [network_transaction_id_supported_connectors]
    connector_list = "stripe,adyen,cybersource"
    
    
    [payouts]
    payout_eligibility = true               # Defaults the eligibility of a payout method to true in case connector does not provide checks for payout eligibility
    
    #Payment Method Filters Based on Country and Currency
    [pm_filters.default]
    ach = { country = "US", currency = "USD" }
    affirm = { country = "US", currency = "USD" }
    afterpay_clearpay = { country = "AU,NZ,ES,GB,FR,IT,CA,US", currency = "GBP" }
    ali_pay = { country = "AU,JP,HK,SG,MY,TH,ES,GB,SE,NO,AT,NL,DE,CY,CH,BE,FR,DK,FI,RO,MT,SI,GR,PT,IE,IT,CA,US", currency = "USD,EUR,GBP,JPY,AUD,SGD,CHF,SEK,NOK,NZD,THB,HKD,CAD" }
    apple_pay = { country = "AU,CN,HK,JP,MO,MY,NZ,SG,TW,AM,AT,AZ,BY,BE,BG,HR,CY,CZ,DK,EE,FO,FI,FR,GE,DE,GR,GL,GG,HU,IS,IE,IM,IT,KZ,JE,LV,LI,LT,LU,MT,MD,MC,ME,NL,NO,PL,PT,RO,SM,RS,SK,SI,ES,SE,CH,UA,GB,AR,CO,CR,BR,MX,PE,BH,IL,JO,KW,PS,QA,SA,AE,CA,UM,US,KR,VN,MA,ZA,VA,CL,SV,GT,HN,PA", currency = "AED,AUD,CHF,CAD,EUR,GBP,HKD,SGD,USD" }
    bacs = { country = "GB", currency = "GBP" }
    bancontact_card = { country = "BE", currency = "EUR" }
    blik = { country = "PL", currency = "PLN" }
    eps = { country = "AT", currency = "EUR" }
    giropay = { country = "DE", currency = "EUR" }
    google_pay = { country = "AU,NZ,JP,HK,SG,MY,TH,VN,BH,AE,KW,BR,ES,GB,SE,NO,SK,AT,NL,DE,HU,CY,LU,CH,BE,FR,DK,RO,HR,LI,MT,SI,GR,PT,IE,CZ,EE,LT,LV,IT,PL,TR,IS,CA,US", currency = "AED,ALL,AMD,ANG,AOA,ARS,AUD,AWG,AZN,BAM,BBD,BDT,BGN,BHD,BMD,BND,BOB,BRL,BSD,BWP,BYN,BZD,CAD,CHF,CLP,CNY,COP,CRC,CUP,CVE,CZK,DJF,DKK,DOP,DZD,EGP,ETB,EUR,FJD,FKP,GBP,GEL,GHS,GIP,GMD,GNF,GTQ,GYD,HKD,HNL,HTG,HUF,IDR,ILS,INR,IQD,JMD,JOD,JPY,KES,KGS,KHR,KMF,KRW,KWD,KYD,KZT,LAK,LBP,LKR,LYD,MAD,MDL,MKD,MMK,MNT,MOP,MRU,MUR,MVR,MWK,MXN,MYR,MZN,NAD,NGN,NIO,NOK,NPR,NZD,OMR,PAB,PEN,PGK,PHP,PKR,PLN,PYG,QAR,RON,RSD,RUB,RWF,SAR,SBD,SCR,SEK,SGD,SHP,SLE,SOS,SRD,STN,SVC,SZL,THB,TND,TOP,TRY,TTD,TWD,TZS,UAH,UGX,USD,UYU,UZS,VES,VND,VUV,WST,XAF,XCD,XOF,XPF,YER,ZAR,ZMW" }
    ideal = { country = "NL", currency = "EUR" }
    klarna = { country = "AT,ES,GB,SE,NO,AT,NL,DE,CH,BE,FR,DK,FI,PT,IE,IT,PL,CA,US", currency = "USD,GBP,EUR,CHF,DKK,SEK,NOK,AUD,PLN,CAD" }
    mb_way = { country = "PT", currency = "EUR" }
    mobile_pay = { country = "DK,FI", currency = "DKK,SEK,NOK,EUR" }
    online_banking_czech_republic = { country = "CZ", currency = "EUR,CZK" }
    online_banking_finland = { country = "FI", currency = "EUR" }
    online_banking_poland = { country = "PL", currency = "PLN" }
    online_banking_slovakia = { country = "SK", currency = "EUR,CZK" }
    pay_bright = { country = "CA", currency = "CAD" }
    paypal = { country = "AU,NZ,CN,JP,HK,MY,TH,KR,PH,ID,AE,KW,BR,ES,GB,SE,NO,SK,AT,NL,DE,HU,CY,LU,CH,BE,FR,DK,FI,RO,HR,UA,MT,SI,GI,PT,IE,CZ,EE,LT,LV,IT,PL,IS,CA,US", currency = "AUD,BRL,CAD,CZK,DKK,EUR,HKD,HUF,INR,JPY,MYR,MXN,NZD,NOK,PHP,PLN,RUB,GBP,SGD,SEK,CHF,THB,USD" }
    sepa = { country = "ES,SK,AT,NL,DE,BE,FR,FI,PT,IE,EE,LT,LV,IT", currency = "EUR" }
    sofort = { country = "ES,GB,SE,AT,NL,DE,CH,BE,FR,FI,IT,PL", currency = "EUR" }
    trustly = { country = "ES,GB,SE,NO,AT,NL,DE,DK,FI,EE,LT,LV", currency = "CZK,DKK,EUR,GBP,NOK,SEK" }
    walley = { country = "SE,NO,DK,FI", currency = "DKK,EUR,NOK,SEK" }
    we_chat_pay = { country = "AU,NZ,CN,JP,HK,SG,ES,GB,SE,NO,AT,NL,DE,CY,CH,BE,FR,DK,LI,MT,SI,GR,PT,IT,CA,US", currency = "AUD,CAD,CNY,EUR,GBP,HKD,JPY,NZD,SGD,USD" }
    
    [pm_filters.adyen]
    ach = { country = "US", currency = "USD" }
    affirm = { country = "US", currency = "USD" }
    afterpay_clearpay = { country = "US,CA,GB,AU,NZ", currency = "GBP,AUD,NZD,CAD,USD" }
    alfamart = { country = "ID", currency = "IDR" }
    ali_pay = { country = "AU,JP,HK,SG,MY,TH,ES,GB,SE,NO,AT,NL,DE,CY,CH,BE,FR,DK,FI,RO,MT,SI,GR,PT,IE,IT,CA,US", currency = "USD,EUR,GBP,JPY,AUD,SGD,CHF,SEK,NOK,NZD,THB,HKD,CAD" }
    ali_pay_hk = { country = "HK", currency = "HKD" }
    alma = { country = "FR", currency = "EUR" }
    apple_pay = { country = "AU,NZ,CN,JP,HK,SG,MY,BH,AE,KW,BR,ES,GB,SE,NO,AT,NL,DE,HU,CY,LU,CH,BE,FR,DK,FI,RO,HR,LI,UA,MT,SI,GR,PT,IE,CZ,EE,LT,LV,IT,PL,IS,CA,US", currency = "AUD,CHF,CAD,EUR,GBP,HKD,SGD,USD,MYR" }
    atome = { country = "MY,SG", currency = "MYR,SGD" }
    bacs = { country = "GB", currency = "GBP" }
    bancontact_card = { country = "BE", currency = "EUR" }
    bca_bank_transfer = { country = "ID", currency = "IDR" }
    bizum = { country = "ES", currency = "EUR" }
    blik = { country = "PL", currency = "PLN" }
    bni_va = { country = "ID", currency = "IDR" }
    boleto = { country = "BR", currency = "BRL" }
    bri_va = { country = "ID", currency = "IDR" }
    cimb_va = { country = "ID", currency = "IDR" }
    dana = { country = "ID", currency = "IDR" }
    danamon_va = { country = "ID", currency = "IDR" }
    eps = { country = "AT", currency = "EUR" }
    family_mart = { country = "JP", currency = "JPY" }
    gcash = { country = "PH", currency = "PHP" }
    giropay = { country = "DE", currency = "EUR" }
    go_pay = { country = "ID", currency = "IDR" }
    google_pay = { country = "AU,NZ,JP,HK,SG,MY,TH,VN,BH,AE,KW,BR,ES,GB,SE,NO,SK,AT,NL,DE,HU,CY,LU,CH,BE,FR,DK,RO,HR,LI,MT,SI,GR,PT,IE,CZ,EE,LT,LV,IT,PL,TR,IS,CA,US", currency = "AED,ALL,AMD,ANG,AOA,ARS,AUD,AWG,AZN,BAM,BBD,BDT,BGN,BHD,BMD,BND,BOB,BRL,BSD,BWP,BYN,BZD,CAD,CHF,CLP,CNY,COP,CRC,CUP,CVE,CZK,DJF,DKK,DOP,DZD,EGP,ETB,EUR,FJD,FKP,GBP,GEL,GHS,GIP,GMD,GNF,GTQ,GYD,HKD,HNL,HTG,HUF,IDR,ILS,INR,IQD,JMD,JOD,JPY,KES,KGS,KHR,KMF,KRW,KWD,KYD,KZT,LAK,LBP,LKR,LYD,MAD,MDL,MKD,MMK,MNT,MOP,MRU,MUR,MVR,MWK,MXN,MYR,MZN,NAD,NGN,NIO,NOK,NPR,NZD,OMR,PAB,PEN,PGK,PHP,PKR,PLN,PYG,QAR,RON,RSD,RUB,RWF,SAR,SBD,SCR,SEK,SGD,SHP,SLE,SOS,SRD,STN,SVC,SZL,THB,TND,TOP,TRY,TTD,TWD,TZS,UAH,UGX,USD,UYU,UZS,VES,VND,VUV,WST,XAF,XCD,XOF,XPF,YER,ZAR,ZMW" }
    ideal = { country = "NL", currency = "EUR" }
    indomaret = { country = "ID", currency = "IDR" }
    kakao_pay = { country = "KR", currency = "KRW" }
    klarna = { country = "AU,AT,BE,CA,CZ,DK,FI,FR,DE,GR,IE,IT,NO,PL,PT,RO,ES,SE,CH,NL,GB,US", currency = "AUD,EUR,CAD,CZK,DKK,NOK,PLN,RON,SEK,CHF,GBP,USD" }
    lawson = { country = "JP", currency = "JPY" }
    mandiri_va = { country = "ID", currency = "IDR" }
    mb_way = { country = "PT", currency = "EUR" }
    mini_stop = { country = "JP", currency = "JPY" }
    mobile_pay = { country = "DK,FI", currency = "DKK,SEK,NOK,EUR" }
    momo = { country = "VN", currency = "VND" }
    momo_atm = { country = "VN", currency = "VND" }
    online_banking_czech_republic = { country = "CZ", currency = "EUR,CZK" }
    online_banking_finland = { country = "FI", currency = "EUR" }
    online_banking_fpx = { country = "MY", currency = "MYR" }
    online_banking_poland = { country = "PL", currency = "PLN" }
    online_banking_slovakia = { country = "SK", currency = "EUR,CZK" }
    online_banking_thailand = { country = "TH", currency = "THB" }
    open_banking_uk = { country = "GB", currency = "GBP" }
    oxxo = { country = "MX", currency = "MXN" }
    pay_bright = { country = "CA", currency = "CAD" }
    pay_easy = { country = "JP", currency = "JPY" }
    pay_safe_card = { country = "AT,AU,BE,BR,BE,CA,HR,CY,CZ,DK,FI,FR,GE,DE,GI,HU,IS,IE,KW,LV,IE,LI,LT,LU,MT,MX,MD,ME,NL,NZ,NO,PY,PE,PL,PT,RO,SA,RS,SK,SI,ES,SE,CH,TR,AE,GB,US,UY", currency = "EUR,AUD,BRL,CAD,CZK,DKK,GEL,GIP,HUF,KWD,CHF,MXN,MDL,NZD,NOK,PYG,PEN,PLN,RON,SAR,RSD,SEK,TRY,AED,GBP,USD,UYU" }
    paypal = { country = "AU,NZ,CN,JP,HK,MY,TH,KR,PH,ID,AE,KW,BR,ES,GB,SE,NO,SK,AT,NL,DE,HU,CY,LU,CH,BE,FR,DK,FI,RO,HR,UA,MT,SI,GI,PT,IE,CZ,EE,LT,LV,IT,PL,IS,CA,US", currency = "AUD,BRL,CAD,CZK,DKK,EUR,HKD,HUF,INR,JPY,MYR,MXN,NZD,NOK,PHP,PLN,RUB,GBP,SGD,SEK,CHF,THB,USD" }
    permata_bank_transfer = { country = "ID", currency = "IDR" }
    seicomart = { country = "JP", currency = "JPY" }
    sepa = { country = "ES,SK,AT,NL,DE,BE,FR,FI,PT,IE,EE,LT,LV,IT", currency = "EUR" }
    seven_eleven = { country = "JP", currency = "JPY" }
    sofort = { country = "AT,BE,DE,ES,CH,NL", currency = "CHF,EUR" }
    swish = { country = "SE", currency = "SEK" }
    touch_n_go = { country = "MY", currency = "MYR" }
    trustly = { country = "ES,GB,SE,NO,AT,NL,DE,DK,FI,EE,LT,LV", currency = "CZK,DKK,EUR,GBP,NOK,SEK" }
    twint = { country = "CH", currency = "CHF" }
    vipps = { country = "NO", currency = "NOK" }
    walley = { country = "SE,NO,DK,FI", currency = "DKK,EUR,NOK,SEK" }
    we_chat_pay = { country = "AU,NZ,CN,JP,HK,SG,ES,GB,SE,NO,AT,NL,DE,CY,CH,BE,FR,DK,LI,MT,SI,GR,PT,IT,CA,US", currency = "AUD,CAD,CNY,EUR,GBP,HKD,JPY,NZD,SGD,USD" }
    pix = { country = "BR", currency = "BRL" }
    
    [pm_filters.authorizedotnet]
    google_pay.currency = "CHF,DKK,EUR,GBP,NOK,PLN,SEK,USD,AUD,NZD,CAD"
    paypal.currency = "CHF,DKK,EUR,GBP,NOK,PLN,SEK,USD,AUD,NZD,CAD"
    
    [pm_filters.bankofamerica]
    credit = { currency = "USD" }
    debit = { currency = "USD" }
    apple_pay = { currency = "USD" }
    google_pay = { currency = "USD" }
    
    [pm_filters.cybersource]
    credit = { currency = "USD,GBP,EUR" }
    debit = { currency = "USD,GBP,EUR" }
    apple_pay = { currency = "USD,GBP,EUR" }
    google_pay = { currency = "USD,GBP,EUR" }
    samsung_pay = { currency = "USD,GBP,EUR" }
    paze = { currency = "USD" }
    
    [pm_filters.nexixpay]
    credit = { country = "AT,BE,CY,EE,FI,FR,DE,GR,IE,IT,LV,LT,LU,MT,NL,PT,SK,SI,ES,BG,HR,DK,GB,NO,PL,CZ,RO,SE,CH,HU", currency = "ARS,AUD,BHD,CAD,CLP,CNY,COP,HRK,CZK,DKK,HKD,HUF,INR,JPY,KZT,JOD,KRW,KWD,MYR,MXN,NGN,NOK,PHP,QAR,RUB,SAR,SGD,VND,ZAR,SEK,CHF,THB,AED,EGP,GBP,USD,TWD,BYN,RSD,AZN,RON,TRY,AOA,BGN,EUR,UAH,PLN,BRL" }
    debit = { country = "AT,BE,CY,EE,FI,FR,DE,GR,IE,IT,LV,LT,LU,MT,NL,PT,SK,SI,ES,BG,HR,DK,GB,NO,PL,CZ,RO,SE,CH,HU", currency = "ARS,AUD,BHD,CAD,CLP,CNY,COP,HRK,CZK,DKK,HKD,HUF,INR,JPY,KZT,JOD,KRW,KWD,MYR,MXN,NGN,NOK,PHP,QAR,RUB,SAR,SGD,VND,ZAR,SEK,CHF,THB,AED,EGP,GBP,USD,TWD,BYN,RSD,AZN,RON,TRY,AOA,BGN,EUR,UAH,PLN,BRL" }
    
    [pm_filters.novalnet]
    credit = { country = "AD,AE,AL,AM,AR,AT,AU,AZ,BA,BB,BD,BE,BG,BH,BI,BM,BN,BO,BR,BS,BW,BY,BZ,CA,CD,CH,CL,CN,CO,CR,CU,CY,CZ,DE,DJ,DK,DO,DZ,EE,EG,ET,ES,FI,FJ,FR,GB,GE,GH,GI,GM,GR,GT,GY,HK,HN,HR,HU,ID,IE,IL,IN,IS,IT,JM,JO,JP,KE,KH,KR,KW,KY,KZ,LB,LK,LT,LV,LY,MA,MC,MD,ME,MG,MK,MN,MO,MT,MV,MW,MX,MY,NG,NI,NO,NP,NL,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SB,SC,SE,SG,SH,SI,SK,SL,SO,SM,SR,ST,SV,SY,TH,TJ,TN,TO,TR,TW,TZ,UA,UG,US,UY,UZ,VE,VA,VN,VU,WS,CF,AG,DM,GD,KN,LC,VC,YE,ZA,ZM", currency = "AED,ALL,AMD,ARS,AUD,AZN,BAM,BBD,BDT,BGN,BHD,BIF,BMD,BND,BOB,BRL,BSD,BWP,BYN,BZD,CAD,CDF,CHF,CLP,CNY,COP,CRC,CUP,CZK,DJF,DKK,DOP,DZD,EGP,ETB,EUR,FJD,GBP,GEL,GHS,GIP,GMD,GTQ,GYD,HKD,HNL,HRK,HUF,IDR,ILS,INR,ISK,JMD,JOD,JPY,KES,KHR,KRW,KWD,KYD,KZT,LBP,LKR,LYD,MAD,MDL,MGA,MKD,MNT,MOP,MVR,MWK,MXN,MYR,NGN,NIO,NOK,NPR,NZD,OMR,PAB,PEN,PGK,PHP,PKR,PLN,PYG,QAR,RON,RSD,RUB,RWF,SAR,SBD,SCR,SEK,SGD,SHP,SLL,SOS,SRD,STN,SVC,SYP,THB,TJS,TND,TOP,TRY,TWD,TZS,UAH,UGX,USD,UYU,UZS,VES,VND,VUV,WST,XAF,XCD,YER,ZAR,ZMW"}
    debit = { country = "AD,AE,AL,AM,AR,AT,AU,AZ,BA,BB,BD,BE,BG,BH,BI,BM,BN,BO,BR,BS,BW,BY,BZ,CA,CD,CH,CL,CN,CO,CR,CU,CY,CZ,DE,DJ,DK,DO,DZ,EE,EG,ET,ES,FI,FJ,FR,GB,GE,GH,GI,GM,GR,GT,GY,HK,HN,HR,HU,ID,IE,IL,IN,IS,IT,JM,JO,JP,KE,KH,KR,KW,KY,KZ,LB,LK,LT,LV,LY,MA,MC,MD,ME,MG,MK,MN,MO,MT,MV,MW,MX,MY,NG,NI,NO,NP,NL,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SB,SC,SE,SG,SH,SI,SK,SL,SO,SM,SR,ST,SV,SY,TH,TJ,TN,TO,TR,TW,TZ,UA,UG,US,UY,UZ,VE,VA,VN,VU,WS,CF,AG,DM,GD,KN,LC,VC,YE,ZA,ZM", currency = "AED,ALL,AMD,ARS,AUD,AZN,BAM,BBD,BDT,BGN,BHD,BIF,BMD,BND,BOB,BRL,BSD,BWP,BYN,BZD,CAD,CDF,CHF,CLP,CNY,COP,CRC,CUP,CZK,DJF,DKK,DOP,DZD,EGP,ETB,EUR,FJD,GBP,GEL,GHS,GIP,GMD,GTQ,GYD,HKD,HNL,HRK,HUF,IDR,ILS,INR,ISK,JMD,JOD,JPY,KES,KHR,KRW,KWD,KYD,KZT,LBP,LKR,LYD,MAD,MDL,MGA,MKD,MNT,MOP,MVR,MWK,MXN,MYR,NGN,NIO,NOK,NPR,NZD,OMR,PAB,PEN,PGK,PHP,PKR,PLN,PYG,QAR,RON,RSD,RUB,RWF,SAR,SBD,SCR,SEK,SGD,SHP,SLL,SOS,SRD,STN,SVC,SYP,THB,TJS,TND,TOP,TRY,TWD,TZS,UAH,UGX,USD,UYU,UZS,VES,VND,VUV,WST,XAF,XCD,YER,ZAR,ZMW"}
    apple_pay = { country = "AD,AE,AL,AM,AR,AT,AU,AZ,BA,BB,BD,BE,BG,BH,BI,BM,BN,BO,BR,BS,BW,BY,BZ,CA,CD,CH,CL,CN,CO,CR,CU,CY,CZ,DE,DJ,DK,DO,DZ,EE,EG,ET,ES,FI,FJ,FR,GB,GE,GH,GI,GM,GR,GT,GY,HK,HN,HR,HU,ID,IE,IL,IN,IS,IT,JM,JO,JP,KE,KH,KR,KW,KY,KZ,LB,LK,LT,LV,LY,MA,MC,MD,ME,MG,MK,MN,MO,MT,MV,MW,MX,MY,NG,NI,NO,NP,NL,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SB,SC,SE,SG,SH,SI,SK,SL,SO,SM,SR,ST,SV,SY,TH,TJ,TN,TO,TR,TW,TZ,UA,UG,US,UY,UZ,VE,VA,VN,VU,WS,CF,AG,DM,GD,KN,LC,VC,YE,ZA,ZM", currency = "AED,ALL,AMD,ARS,AUD,AZN,BAM,BBD,BDT,BGN,BHD,BIF,BMD,BND,BOB,BRL,BSD,BWP,BYN,BZD,CAD,CDF,CHF,CLP,CNY,COP,CRC,CUP,CZK,DJF,DKK,DOP,DZD,EGP,ETB,EUR,FJD,GBP,GEL,GHS,GIP,GMD,GTQ,GYD,HKD,HNL,HRK,HUF,IDR,ILS,INR,ISK,JMD,JOD,JPY,KES,KHR,KRW,KWD,KYD,KZT,LBP,LKR,LYD,MAD,MDL,MGA,MKD,MNT,MOP,MVR,MWK,MXN,MYR,NGN,NIO,NOK,NPR,NZD,OMR,PAB,PEN,PGK,PHP,PKR,PLN,PYG,QAR,RON,RSD,RUB,RWF,SAR,SBD,SCR,SEK,SGD,SHP,SLL,SOS,SRD,STN,SVC,SYP,THB,TJS,TND,TOP,TRY,TWD,TZS,UAH,UGX,USD,UYU,UZS,VES,VND,VUV,WST,XAF,XCD,YER,ZAR,ZMW"}
    google_pay = { country = "AD,AE,AL,AM,AR,AT,AU,AZ,BA,BB,BD,BE,BG,BH,BI,BM,BN,BO,BR,BS,BW,BY,BZ,CA,CD,CH,CL,CN,CO,CR,CU,CY,CZ,DE,DJ,DK,DO,DZ,EE,EG,ET,ES,FI,FJ,FR,GB,GE,GH,GI,GM,GR,GT,GY,HK,HN,HR,HU,ID,IE,IL,IN,IS,IT,JM,JO,JP,KE,KH,KR,KW,KY,KZ,LB,LK,LT,LV,LY,MA,MC,MD,ME,MG,MK,MN,MO,MT,MV,MW,MX,MY,NG,NI,NO,NP,NL,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SB,SC,SE,SG,SH,SI,SK,SL,SO,SM,SR,ST,SV,SY,TH,TJ,TN,TO,TR,TW,TZ,UA,UG,US,UY,UZ,VE,VA,VN,VU,WS,CF,AG,DM,GD,KN,LC,VC,YE,ZA,ZM", currency = "AED,ALL,AMD,ARS,AUD,AZN,BAM,BBD,BDT,BGN,BHD,BIF,BMD,BND,BOB,BRL,BSD,BWP,BYN,BZD,CAD,CDF,CHF,CLP,CNY,COP,CRC,CUP,CZK,DJF,DKK,DOP,DZD,EGP,ETB,EUR,FJD,GBP,GEL,GHS,GIP,GMD,GTQ,GYD,HKD,HNL,HRK,HUF,IDR,ILS,INR,ISK,JMD,JOD,JPY,KES,KHR,KRW,KWD,KYD,KZT,LBP,LKR,LYD,MAD,MDL,MGA,MKD,MNT,MOP,MVR,MWK,MXN,MYR,NGN,NIO,NOK,NPR,NZD,OMR,PAB,PEN,PGK,PHP,PKR,PLN,PYG,QAR,RON,RSD,RUB,RWF,SAR,SBD,SCR,SEK,SGD,SHP,SLL,SOS,SRD,STN,SVC,SYP,THB,TJS,TND,TOP,TRY,TWD,TZS,UAH,UGX,USD,UYU,UZS,VES,VND,VUV,WST,XAF,XCD,YER,ZAR,ZMW"}
    paypal = { country = "AD,AE,AL,AM,AR,AT,AU,AZ,BA,BB,BD,BE,BG,BH,BI,BM,BN,BO,BR,BS,BW,BY,BZ,CA,CD,CH,CL,CN,CO,CR,CU,CY,CZ,DE,DJ,DK,DO,DZ,EE,EG,ET,ES,FI,FJ,FR,GB,GE,GH,GI,GM,GR,GT,GY,HK,HN,HR,HU,ID,IE,IL,IN,IS,IT,JM,JO,JP,KE,KH,KR,KW,KY,KZ,LB,LK,LT,LV,LY,MA,MC,MD,ME,MG,MK,MN,MO,MT,MV,MW,MX,MY,NG,NI,NO,NP,NL,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SB,SC,SE,SG,SH,SI,SK,SL,SO,SM,SR,ST,SV,SY,TH,TJ,TN,TO,TR,TW,TZ,UA,UG,US,UY,UZ,VE,VA,VN,VU,WS,CF,AG,DM,GD,KN,LC,VC,YE,ZA,ZM", currency = "AED,ALL,AMD,ARS,AUD,AZN,BAM,BBD,BDT,BGN,BHD,BIF,BMD,BND,BOB,BRL,BSD,BWP,BYN,BZD,CAD,CDF,CHF,CLP,CNY,COP,CRC,CUP,CZK,DJF,DKK,DOP,DZD,EGP,ETB,EUR,FJD,GBP,GEL,GHS,GIP,GMD,GTQ,GYD,HKD,HNL,HRK,HUF,IDR,ILS,INR,ISK,JMD,JOD,JPY,KES,KHR,KRW,KWD,KYD,KZT,LBP,LKR,LYD,MAD,MDL,MGA,MKD,MNT,MOP,MVR,MWK,MXN,MYR,NGN,NIO,NOK,NPR,NZD,OMR,PAB,PEN,PGK,PHP,PKR,PLN,PYG,QAR,RON,RSD,RUB,RWF,SAR,SBD,SCR,SEK,SGD,SHP,SLL,SOS,SRD,STN,SVC,SYP,THB,TJS,TND,TOP,TRY,TWD,TZS,UAH,UGX,USD,UYU,UZS,VES,VND,VUV,WST,XAF,XCD,YER,ZAR,ZMW"}
    
    [pm_filters.braintree]
    paypal.currency = "AUD,BRL,CAD,CNY,CZK,DKK,EUR,HKD,HUF,ILS,JPY,MYR,MXN,TWD,NZD,NOK,PHP,PLN,GBP,RUB,SGD,SEK,CHF,THB,USD"
    
    [pm_filters.forte]
    credit.currency = "USD"
    debit.currency = "USD"
    
    [pm_filters.helcim]
    credit.currency = "USD"
    debit.currency = "USD"
    
    [pm_filters.globepay]
    ali_pay.currency = "GBP,CNY"
    we_chat_pay.currency = "GBP,CNY"
    
    [pm_filters.klarna]
    klarna = { country = "AU,AT,BE,CA,CZ,DK,FI,FR,DE,GR,IE,IT,NL,NZ,NO,PL,PT,ES,SE,CH,GB,US", currency = "CHF,DKK,EUR,GBP,NOK,PLN,SEK,USD,AUD,NZD,CAD" }
    
    [pm_filters.mifinity]
    mifinity = { country = "BR,CN,SG,MY,DE,CH,DK,GB,ES,AD,GI,FI,FR,GR,HR,IT,JP,MX,AR,CO,CL,PE,VE,UY,PY,BO,EC,GT,HN,SV,NI,CR,PA,DO,CU,PR,NL,NO,PL,PT,SE,RU,TR,TW,HK,MO,AX,AL,DZ,AS,AO,AI,AG,AM,AW,AU,AT,AZ,BS,BH,BD,BB,BE,BZ,BJ,BM,BT,BQ,BA,BW,IO,BN,BG,BF,BI,KH,CM,CA,CV,KY,CF,TD,CX,CC,KM,CG,CK,CI,CW,CY,CZ,DJ,DM,EG,GQ,ER,EE,ET,FK,FO,FJ,GF,PF,TF,GA,GM,GE,GH,GL,GD,GP,GU,GG,GN,GW,GY,HT,HM,VA,IS,IN,ID,IE,IM,IL,JE,JO,KZ,KE,KI,KW,KG,LA,LV,LB,LS,LI,LT,LU,MK,MG,MW,MV,ML,MT,MH,MQ,MR,MU,YT,FM,MD,MC,MN,ME,MS,MA,MZ,NA,NR,NP,NC,NZ,NE,NG,NU,NF,MP,OM,PK,PW,PS,PG,PH,PN,QA,RE,RO,RW,BL,SH,KN,LC,MF,PM,VC,WS,SM,ST,SA,SN,RS,SC,SL,SX,SK,SI,SB,SO,ZA,GS,KR,LK,SR,SJ,SZ,TH,TL,TG,TK,TO,TT,TN,TM,TC,TV,UG,UA,AE,UZ,VU,VN,VG,VI,WF,EH,ZM", currency = "AUD,CAD,CHF,CNY,CZK,DKK,EUR,GBP,INR,JPY,NOK,NZD,PLN,RUB,SEK,ZAR,USD,EGP,UYU,UZS" }
    
    [pm_filters.prophetpay]
    card_redirect.currency = "USD"
    
    
    [pm_filters.stax]
    ach = { country = "US", currency = "USD" }
    
    [pm_filters.stripe]
    affirm = { country = "US", currency = "USD" }
    afterpay_clearpay = { country = "US,CA,GB,AU,NZ,FR,ES", currency = "USD,CAD,GBP,AUD,NZD" }
    apple_pay.country = "AU,CN,HK,JP,MO,MY,NZ,SG,TW,AM,AT,AZ,BY,BE,BG,HR,CY,CZ,DK,EE,FO,FI,FR,GE,DE,GR,GL,GG,HU,IS,IE,IM,IT,KZ,JE,LV,LI,LT,LU,MT,MD,MC,ME,NL,NO,PL,PT,RO,SM,RS,SK,SI,ES,SE,CH,UA,GB,AR,CO,CR,BR,MX,PE,BH,IL,JO,KW,PS,QA,SA,AE,CA,UM,US,KR,VN,MA,ZA,VA,CL,SV,GT,HN,PA"
    cashapp = { country = "US", currency = "USD" }
    eps = { country = "AT", currency = "EUR" }
    giropay = { country = "DE", currency = "EUR" }
    google_pay.country = "AL,DZ,AS,AO,AG,AR,AU,AT,AZ,BH,BY,BE,BR,BG,CA,CL,CO,HR,CZ,DK,DO,EG,EE,FI,FR,DE,GR,HK,HU,IN,ID,IE,IL,IT,JP,JO,KZ,KE,KW,LV,LB,LT,LU,MY,MX,NL,NZ,NO,OM,PK,PA,PE,PH,PL,PT,QA,RO,RU,SA,SG,SK,ZA,ES,LK,SE,CH,TW,TH,TR,UA,AE,GB,US,UY,VN"
    ideal = { country = "NL", currency = "EUR" }
    klarna = { country = "AU,AT,BE,CA,CZ,DK,FI,FR,DE,GR,IE,IT,NL,NZ,NO,PL,PT,ES,SE,CH,GB,US", currency = "AUD,CAD,CHF,CZK,DKK,EUR,GBP,NOK,NZD,PLN,SEK,USD" }
    sofort = { country = "AT,BE,DE,IT,NL,ES", currency = "EUR" }
    
    [pm_filters.volt]
    open_banking_uk = { country = "DE,GB,AT,BE,CY,EE,ES,FI,FR,GR,HR,IE,IT,LT,LU,LV,MT,NL,PT,SI,SK,BG,CZ,DK,HU,NO,PL,RO,SE,AU,BR", currency = "EUR,GBP,DKK,NOK,PLN,SEK,AUD,BRL" }
    
    [pm_filters.razorpay]
    upi_collect = {country = "IN", currency = "INR"}
    
    [pm_filters.plaid]
    open_banking_pis = {currency = "EUR,GBP"}
    
    [pm_filters.worldpay]
    debit = { country = "AF,DZ,AW,AU,AZ,BS,BH,BD,BB,BZ,BM,BT,BO,BA,BW,BR,BN,BG,BI,KH,CA,CV,KY,CL,CO,KM,CD,CR,CZ,DK,DJ,ST,DO,EC,EG,SV,ER,ET,FK,FJ,GM,GE,GH,GI,GT,GN,GY,HT,HN,HK,HU,IS,IN,ID,IR,IQ,IE,IL,IT,JM,JP,JO,KZ,KE,KW,LA,LB,LS,LR,LY,LT,MO,MK,MG,MW,MY,MV,MR,MU,MX,MD,MN,MA,MZ,MM,NA,NZ,NI,NG,KP,NO,AR,PK,PG,PY,PE,UY,PH,PL,GB,QA,OM,RO,RU,RW,WS,SG,ST,ZA,KR,LK,SH,SD,SR,SZ,SE,CH,SY,TW,TJ,TZ,TH,TT,TN,TR,UG,UA,US,UZ,VU,VE,VN,ZM,ZW", currency = "AFN,DZD,ANG,AWG,AUD,AZN,BSD,BHD,BDT,BBD,BZD,BMD,BTN,BOB,BAM,BWP,BRL,BND,BGN,BIF,KHR,CAD,CVE,KYD,XOF,XAF,XPF,CLP,COP,KMF,CDF,CRC,EUR,CZK,DKK,DJF,DOP,XCD,EGP,SVC,ERN,ETB,EUR,FKP,FJD,GMD,GEL,GHS,GIP,GTQ,GNF,GYD,HTG,HNL,HKD,HUF,ISK,INR,IDR,IRR,IQD,ILS,JMD,JPY,JOD,KZT,KES,KWD,LAK,LBP,LSL,LRD,LYD,MOP,MKD,MGA,MWK,MYR,MVR,MRU,MUR,MXN,MDL,MNT,MAD,MZN,MMK,NAD,NPR,NZD,NIO,NGN,KPW,NOK,ARS,PKR,PAB,PGK,PYG,PEN,UYU,PHP,PLN,GBP,QAR,OMR,RON,RUB,RWF,WST,SAR,RSD,SCR,SLL,SGD,STN,SBD,SOS,ZAR,KRW,LKR,SHP,SDG,SRD,SZL,SEK,CHF,SYP,TWD,TJS,TZS,THB,TOP,TTD,TND,TRY,TMT,AED,UGX,UAH,USD,UZS,VUV,VND,YER,CNY,ZMW,ZWL" }
    credit = { country = "AF,DZ,AW,AU,AZ,BS,BH,BD,BB,BZ,BM,BT,BO,BA,BW,BR,BN,BG,BI,KH,CA,CV,KY,CL,CO,KM,CD,CR,CZ,DK,DJ,ST,DO,EC,EG,SV,ER,ET,FK,FJ,GM,GE,GH,GI,GT,GN,GY,HT,HN,HK,HU,IS,IN,ID,IR,IQ,IE,IL,IT,JM,JP,JO,KZ,KE,KW,LA,LB,LS,LR,LY,LT,MO,MK,MG,MW,MY,MV,MR,MU,MX,MD,MN,MA,MZ,MM,NA,NZ,NI,NG,KP,NO,AR,PK,PG,PY,PE,UY,PH,PL,GB,QA,OM,RO,RU,RW,WS,SG,ST,ZA,KR,LK,SH,SD,SR,SZ,SE,CH,SY,TW,TJ,TZ,TH,TT,TN,TR,UG,UA,US,UZ,VU,VE,VN,ZM,ZW", currency = "AFN,DZD,ANG,AWG,AUD,AZN,BSD,BHD,BDT,BBD,BZD,BMD,BTN,BOB,BAM,BWP,BRL,BND,BGN,BIF,KHR,CAD,CVE,KYD,XOF,XAF,XPF,CLP,COP,KMF,CDF,CRC,EUR,CZK,DKK,DJF,DOP,XCD,EGP,SVC,ERN,ETB,EUR,FKP,FJD,GMD,GEL,GHS,GIP,GTQ,GNF,GYD,HTG,HNL,HKD,HUF,ISK,INR,IDR,IRR,IQD,ILS,JMD,JPY,JOD,KZT,KES,KWD,LAK,LBP,LSL,LRD,LYD,MOP,MKD,MGA,MWK,MYR,MVR,MRU,MUR,MXN,MDL,MNT,MAD,MZN,MMK,NAD,NPR,NZD,NIO,NGN,KPW,NOK,ARS,PKR,PAB,PGK,PYG,PEN,UYU,PHP,PLN,GBP,QAR,OMR,RON,RUB,RWF,WST,SAR,RSD,SCR,SLL,SGD,STN,SBD,SOS,ZAR,KRW,LKR,SHP,SDG,SRD,SZL,SEK,CHF,SYP,TWD,TJS,TZS,THB,TOP,TTD,TND,TRY,TMT,AED,UGX,UAH,USD,UZS,VUV,VND,YER,CNY,ZMW,ZWL" }
    google_pay = { country = "AL,DZ,AS,AO,AG,AR,AU,AT,AZ,BH,BY,BE,BR,BG,CA,CL,CO,HR,CZ,DK,DO,EG,EE,FI,FR,DE,GR,HK,HU,IN,ID,IE,IL,IT,JP,JO,KZ,KE,KW,LV,LB,LT,LU,MY,MX,NL,NZ,NO,OM,PK,PA,PE,PH,PL,PT,QA,RO,RU,SA,SG,SK,ZA,ES,LK,SE,CH,TW,TH,TR,UA,AE,GB,US,UY,VN" }
    apple_pay = { country = "AU,CN,HK,JP,MO,MY,NZ,SG,TW,AM,AT,AZ,BY,BE,BG,HR,CY,CZ,DK,EE,FO,FI,FR,GE,DE,GR,GL,GG,HU,IS,IE,IM,IT,KZ,JE,LV,LI,LT,LU,MT,MD,MC,ME,NL,NO,PL,PT,RO,SM,RS,SK,SI,ES,SE,CH,UA,GB,AR,CO,CR,BR,MX,PE,BH,IL,JO,KW,PS,QA,SA,AE,CA,UM,US" }
    
    [pm_filters.zen]
    boleto = { country = "BR", currency = "BRL" }
    efecty = { country = "CO", currency = "COP" }
    multibanco = { country = "PT", currency = "EUR" }
    pago_efectivo = { country = "PE", currency = "PEN" }
    pix = { country = "BR", currency = "BRL" }
    pse = { country = "CO", currency = "COP" }
    red_compra = { country = "CL", currency = "CLP" }
    red_pagos = { country = "UY", currency = "UYU" }
    
    [pm_filters.zsl]
    local_bank_transfer = { country = "CN", currency = "CNY" }
    
    
    [pm_filters.fiuu]
    duit_now = { country ="MY", currency = "MYR" }
    
    [payout_method_filters.adyenplatform]
    sepa = { country = "ES,SK,AT,NL,DE,BE,FR,FI,PT,IE,EE,LT,LV,IT,CZ,DE,HU,NO,PL,SE,GB,CH" , currency = "EUR,CZK,DKK,HUF,NOK,PLN,SEK,GBP,CHF" }
    
    [payout_method_filters.stripe]
    ach = { country = "US", currency = "USD" }
    
    [temp_locker_enable_config]
    bluesnap.payment_method = "card"
    nuvei.payment_method = "card"
    shift4.payment_method = "card"
    stripe.payment_method = "bank_transfer"
    bankofamerica = { payment_method = "card" }
    cybersource = { payment_method = "card" }
    nmi.payment_method = "card"
    payme.payment_method = "card"
    deutschebank = { payment_method = "bank_debit" }
    paybox = { payment_method = "card" }
    nexixpay = { payment_method = "card" }
    
    #tokenization configuration which describe token lifetime and payment method for specific connector
    [tokenization]
    braintree = { long_lived_token = false, payment_method = "card" }
    checkout = { long_lived_token = false, payment_method = "wallet", apple_pay_pre_decrypt_flow = "network_tokenization" }
    gocardless = { long_lived_token = true, payment_method = "bank_debit" }
    mollie = { long_lived_token = false, payment_method = "card" }
    payme = { long_lived_token = false, payment_method = "card" }
    square = { long_lived_token = false, payment_method = "card" }
    stax = { long_lived_token = true, payment_method = "card,bank_debit" }
    stripe = { long_lived_token = false, payment_method = "wallet", payment_method_type = { list = "google_pay", type = "disable_only" } }
    billwerk = {long_lived_token = false, payment_method = "card"}
    
    [webhooks]
    outgoing_enabled = true
    
    [webhook_source_verification_call]
    connectors_with_webhook_source_verification_call = "paypal"        # List of connectors which has additional source verification api-call
    
    [unmasked_headers]
    keys = "accept-language,user-agent"
    
    [saved_payment_methods]
    sdk_eligible_payment_methods = "card"
    
    [locker_based_open_banking_connectors]
    connector_list = ""
    
    [network_tokenization_supported_card_networks]
    card_networks = "Visa, AmericanExpress, Mastercard"
    
    [network_tokenization_supported_connectors]
    connector_list = "cybersource"
---
# Source: hyperswitch-stack/charts/hyperswitch-app/templates/producer/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: producer-cm-hypers-v1
data:
  producer.toml: |
    # Scheduler settings provides a point to modify the behaviour of scheduler flow.
    # It defines the streams/queues name and configuration as well as event selection variables
    [scheduler]
    consumer_group = "scheduler_group"
    graceful_shutdown_interval = 60000 # Specifies how much time to wait while re-attempting shutdown for a service (in milliseconds)
    loop_interval = 30000              # Specifies how much time to wait before starting the defined behaviour of producer or consumer (in milliseconds)
    stream = "scheduler_stream"
    
    [scheduler.producer]
    batch_size = 50                   # Specifies the batch size the producer will push under a single entry in the redis queue
    lock_key = "producer_locking_key" # The following keys defines the producer lock that is created in redis with
    lock_ttl = 160                    # the ttl being the expiry (in seconds)
    lower_fetch_limit = 900           # Lower limit for fetching entries from redis queue (in seconds)
    upper_fetch_limit = 0             # Upper limit for fetching entries from the redis queue (in seconds)0
    
    # Scheduler server configuration
    [scheduler.server]
    port = 3000                       # Port on which the server will listen for incoming requests
    host = "127.0.0.1"                # Host IP address to bind the server to
    workers = 1                       # Number of actix workers to handle incoming requests concurrently
    
    [analytics]
    source = "clickhouse"
    
    [analytics.sqlx]
    pool_size = 5             # Number of connections to keep open
    connection_timeout = 10    # Timeout for database connection in seconds
    queue_strategy = "Fifo"   # Add the queue strategy used by the database bb8 client
    
    [paze_decrypt_keys]
    paze_private_key = "PAZE_PRIVATE_KEY"                       # Base 64 Encoded Private Key File cakey.pem generated for Paze -> Command to create private key: openssl req -newkey rsa:2048 -x509 -keyout cakey.pem -out cacert.pem -days 365
    paze_private_key_passphrase = "PAZE_PRIVATE_KEY_PASSPHRASE" # PEM Passphrase used for generating Private Key File cakey.pem
    
    [applepay_merchant_configs]
    applepay_endpoint = "https://apple-pay-gateway.apple.com/paymentservices/registerMerchant" # Apple pay gateway merchant endpoint
    
    [connector_onboarding.paypal]
    enabled = true # boolean
    
    [connector_request_reference_id_config]
    merchant_ids_send_payment_id_as_connector_request_id = ['merchant_id_1','merchant_id_2']
    
    [cors]
    max_age = 30                            # Maximum time (in seconds) for which this CORS request may be cached.
    allowed_methods = "GET,POST,PUT,DELETE" # List of methods that are allowed
    wildcard_origin = true                 # If true, allows any origin to make requests
    
    [email]
    active_email_client = "SES"
    
    [events]
    source = "kafka"
    
    [events.kafka]
    brokers = ['kafka0:29092']
    intent_analytics_topic = "hyperswitch-payment-intent-events"      # Kafka topic to be used for PaymentIntent events
    attempt_analytics_topic = "hyperswitch-payment-attempt-events"     # Kafka topic to be used for PaymentAttempt events
    refund_analytics_topic = "hyperswitch-refund-events"      # Kafka topic to be used for Refund events
    api_logs_topic = "hyperswitch-api-log-events"              # Kafka topic to be used for incoming api events
    connector_logs_topic = "hyperswitch-outgoing-connector-events"        # Kafka topic to be used for connector api events
    outgoing_webhook_logs_topic = "hyperswitch-outgoing-webhook-events" # Kafka topic to be used for outgoing webhook events
    dispute_analytics_topic = "hyperswitch-dispute-events"     # Kafka topic to be used for Dispute events
    audit_events_topic = "hyperswitch-audit-events"          # Kafka topic to be used for Payment Audit events
    payout_analytics_topic = "hyperswitch-payout-events"      # Kafka topic to be used for Payouts and PayoutAttempt events
    consolidated_events_topic = "hyperswitch-consolidated-events"      # Kafka topic to be used for Consolidated events
    authentication_analytics_topic = "hyperswitch-authentication-events" # Kafka topic to be used for Authentication events
    fraud_check_analytics_topic = "hyperswitch-fraud-check-events"    # Kafka topic to be used for Fraud Check events
    
    [forex_api]
    call_delay = 21601                # Api calls are made after every 6 hrs
    local_fetch_retry_count = 5       # Fetch from Local cache has retry count as 5
    local_fetch_retry_delay = 1010    # Retry delay for checking write condition
    api_timeout = 20001               # Api timeouts once it crosses 20000 ms
    redis_lock_timeout = 260001        # Redis remains write locked for 26000 ms once the acquire_redis_lock is called
    
    [locker]
    host = "http://hyperswitch-vault"
    host_rs = ""
    mock_locker = false
    locker_signing_key_id = "1"
    locker_enabled = true
    ttl_for_storage_in_secs = 2.20752e+08
    
    [log.console]
    enabled = true
    level = "DEBUG"
    log_format = "json"
    
    [log.file]
    enabled = false
    level = "DEBUG"
    log_format = "json"
    
    [log.telemetry]
    traces_enabled = false                                # boolean [true or false], whether traces are enabled
    metrics_enabled = false                               # boolean [true or false], whether metrics are enabled
    ignore_errors = false                                 # boolean [true or false], whether to ignore errors during traces or metrics pipeline setup
    sampling_rate = 0.1                                   # decimal rate between 0.0 - 1.0
    otel_exporter_otlp_endpoint = "http://localhost:4317" # endpoint to send metrics and traces to, can include port number
    otel_exporter_otlp_timeout = 5000                     # timeout (in milliseconds) for sending metrics and traces
    use_xray_generator = false                            # Set this to true for AWS X-ray compatible traces
    route_to_trace = ['*/confirm']
    bg_metrics_collection_interval_in_secs = 15           # Interval for collecting the metrics in background thread
    
    [lock_settings]
    delay_between_retries_in_milliseconds = 500 # Delay between retries in milliseconds
    redis_lock_expiry_seconds = 180             # Seconds before the redis lock expires
    
    [master_database]
    pool_size = "20"
    connection_timeout = 10   
    queue_strategy = "Fifo"
    
    [generic_link]
    [generic_link.payment_method_collect]
    sdk_url = "http://localhost:9090/web/0.103.1/v0/HyperLoader.js"
    expiry = 900
    
    [generic_link.payment_method_collect.ui_config]
    theme = "#4285F4"
    logo = "https://app.hyperswitch.io/HyperswitchFavicon.png"
    merchant_name = "HyperSwitch"
    
    [generic_link.payment_method_collect.enabled_payment_methods]
    card = "credit,debit"
    bank_transfer = "ach,bacs,sepa"
    wallet = "paypal,pix,venmo"
    
    [generic_link.payout_link]
    sdk_url = "http://localhost:9090/web/0.103.1/v0/HyperLoader.js"
    expiry = 900
    
    [generic_link.payout_link.ui_config]
    theme = "#4285F4"
    logo = "https://app.hyperswitch.io/HyperswitchFavicon.png"
    merchant_name = "HyperSwitch"
    
    [generic_link.payout_link.enabled_payment_methods]
    card = "credit,debit"
    
    [payment_link]
    sdk_url = "http://localhost:9090/web/0.103.1/v0/HyperLoader.js"
    
    [payment_method_auth]
    redis_expiry = 900          # Redis expiry time in milliseconds
    
    [redis]
    host = "127.0.0.1"
    port = 6379
    pool_size = 5 # Number of connections to keep open
    reconnect_max_attempts = 5 # Maximum number of reconnection attempts to make before failing. Set to 0 to retry forever.
    reconnect_delay = 5 # Delay between reconnection attempts, in milliseconds
    default_ttl = 300 # Default TTL for entries, in seconds
    default_hash_ttl = 900 # Default TTL for hashes entries, in seconds
    use_legacy_version = false # RESP protocol for fred crate (set this to true if using RESPv2 or redis version < 6)
    stream_read_count = 1 # Default number of entries to read from stream if not provided in stream read options
    auto_pipeline = true # Whether or not the client should automatically pipeline commands across tasks when possible.
    disable_auto_backpressure = false # Whether or not to disable the automatic backpressure features when pipelining is enabled.
    max_in_flight_commands = 5000 # The maximum number of in-flight commands (per connection) before backpressure will be applied.
    default_command_timeout = 30 # An optional timeout to apply to all commands. In seconds
    unresponsive_timeout = 10 # An optional timeout for Unresponsive commands in seconds. This should be less than default_command_timeout.
    max_feed_count = 200 # The maximum number of frames that will be fed to a socket before flushing.
    cluster_enabled = false # boolean
    cluster_urls = ['redis.cluster.uri-1:8080', 'redis.cluster.uri-2:4115'] # List of redis cluster urls
    
    [replica_database]
    pool_size = "20"
    connection_timeout = 10   # Timeout for database connection in seconds
    queue_strategy = "Fifo"   # Add the queue strategy used by the database bb8 client
    
    [opensearch]
    host = "https://localhost:9200"
    
    [opensearch.auth]
    auth = "basic"
    username = "admin"
    password = "admin"
    region = "eu-central-1"
    
    [opensearch.indexes]
    payment_attempts = "hyperswitch-payment-attempt-events"
    payment_intents = "hyperswitch-payment-intent-events"
    refunds = "hyperswitch-refund-events"
    disputes = "hyperswitch-dispute-events"
    sessionizer_payment_attempts = "sessionizer-payment-attempt-events"
    sessionizer_payment_intents = "sessionizer-payment-intent-events"
    sessionizer_refunds = "sessionizer-refund-events"
    sessionizer_disputes = "sessionizer-dispute-events"
    
    [report_download_config]
    dispute_function = "report_download_config_dispute_function" # Config to download dispute report
    payment_function = "report_download_config_payment_function" # Config to download payment report
    refund_function = "report_download_config_refund_function"   # Config to download refund report
    region = "report_download_config_region"    
    
    [server]
    port = 8080
    host = "0.0.0.0"
    request_body_limit = 32768 # Post request body is limited to 16k
    shutdown_timeout = 30
    workers = 8
    
    # Secrets manager client to be used
    [secrets_management]
      secrets_manager = "no_encryption"
      [secrets_management.hc_vault]
        token = "vault_token"
        url = "http://vault:8200"
    
    
    # Encryption manager client to be used
    [encryption_management]
      encryption_manager = "no_encryption"
    
    [multitenancy]
      enabled = false
      [multitenancy.global_tenant]
        clickhouse_database = "default"
        redis_key_prefix = ""
        schema = "public"
      [multitenancy.tenants]
        [multitenancy.tenants.public]
          base_url = "http://localhost:8080"
          clickhouse_database = "default"
          redis_key_prefix = ""
          schema = "public"
    
    [user]
      base_url = "http://localhost:9000"
      force_two_factor_auth = false
      password_validity_in_days = "90"
      totp_issuer_name = "Hyperswitch Sandbox"
      two_factor_auth_expiry_in_secs = "300"
    
    
    [cell_information]
    id = "12345" # Default CellID for Global Cell Information
    
    
    [grpc_client.dynamic_routing_client] # Dynamic Routing Client Configuration
    host = "localhost" # Client Host
    port = 7000        # Client Port
    service = "dynamo" # Service name
    
    # Bank redirect configs for allowed banks
    [bank_config]
    eps.adyen.banks = "bank_austria,bawag_psk_ag,dolomitenbank,easybank_ag,erste_bank_und_sparkassen,hypo_tirol_bank_ag,posojilnica_bank_e_gen,raiffeisen_bankengruppe_osterreich,schoellerbank_ag,sparda_bank_wien,volksbank_gruppe,volkskreditbank_ag"
    eps.stripe.banks = "arzte_und_apotheker_bank,austrian_anadi_bank_ag,bank_austria,bankhaus_carl_spangler,bankhaus_schelhammer_und_schattera_ag,bawag_psk_ag,bks_bank_ag,brull_kallmus_bank_ag,btv_vier_lander_bank,capital_bank_grawe_gruppe_ag,dolomitenbank,easybank_ag,erste_bank_und_sparkassen,hypo_alpeadriabank_international_ag,hypo_noe_lb_fur_niederosterreich_u_wien,hypo_oberosterreich_salzburg_steiermark,hypo_tirol_bank_ag,hypo_vorarlberg_bank_ag,hypo_bank_burgenland_aktiengesellschaft,marchfelder_bank,oberbank_ag,raiffeisen_bankengruppe_osterreich,schoellerbank_ag,sparda_bank_wien,volksbank_gruppe,volkskreditbank_ag,vr_bank_braunau"
    ideal.adyen.banks = "abn_amro,asn_bank,bunq,ing,knab,n26,nationale_nederlanden,rabobank,regiobank,revolut,sns_bank,triodos_bank,van_lanschot,yoursafe"
    ideal.stripe.banks = "abn_amro,asn_bank,bunq,handelsbanken,ing,knab,moneyou,rabobank,regiobank,revolut,sns_bank,triodos_bank,van_lanschot"
    ideal.multisafepay.banks = "abn_amro, asn_bank, bunq, handelsbanken, nationale_nederlanden, n26, ing, knab, rabobank, regiobank, revolut, sns_bank,triodos_bank, van_lanschot, yoursafe"
    online_banking_czech_republic.adyen.banks = "ceska_sporitelna,komercni_banka,platnosc_online_karta_platnicza"
    online_banking_fpx.adyen.banks = "affin_bank,agro_bank,alliance_bank,am_bank,bank_islam,bank_muamalat,bank_rakyat,bank_simpanan_nasional,cimb_bank,hong_leong_bank,hsbc_bank,kuwait_finance_house,maybank,ocbc_bank,public_bank,rhb_bank,standard_chartered_bank,uob_bank"
    online_banking_fpx.fiuu.banks = "affin_bank,agro_bank,alliance_bank,am_bank,bank_of_china,bank_islam,bank_muamalat,bank_rakyat,bank_simpanan_nasional,cimb_bank,hong_leong_bank,hsbc_bank,kuwait_finance_house,maybank,ocbc_bank,public_bank,rhb_bank,standard_chartered_bank,uob_bank"
    online_banking_poland.adyen.banks = "blik_psp,place_zipko,m_bank,pay_with_ing,santander_przelew24,bank_pekaosa,bank_millennium,pay_with_alior_bank,banki_spoldzielcze,pay_with_inteligo,bnp_paribas_poland,bank_nowy_sa,credit_agricole,pay_with_bos,pay_with_citi_handlowy,pay_with_plus_bank,toyota_bank,velo_bank,e_transfer_pocztowy24"
    online_banking_slovakia.adyen.banks = "e_platby_vub,postova_banka,sporo_pay,tatra_pay,viamo"
    online_banking_thailand.adyen.banks = "bangkok_bank,krungsri_bank,krung_thai_bank,the_siam_commercial_bank,kasikorn_bank"
    open_banking_uk.adyen.banks = "aib,bank_of_scotland,danske_bank,first_direct,first_trust,halifax,lloyds,monzo,nat_west,nationwide_bank,royal_bank_of_scotland,starling,tsb_bank,tesco_bank,ulster_bank,barclays,hsbc_bank,revolut,santander_przelew24,open_bank_success,open_bank_failure,open_bank_cancelled"
    przelewy24.stripe.banks = "alior_bank,bank_millennium,bank_nowy_bfg_sa,bank_pekao_sa,banki_spbdzielcze,blik,bnp_paribas,boz,citi,credit_agricole,e_transfer_pocztowy24,getin_bank,idea_bank,inteligo,mbank_mtransfer,nest_przelew,noble_pay,pbac_z_ipko,plus_bank,santander_przelew24,toyota_bank,volkswagen_bank"
    
    [connector_customer]
    connector_list = "stax,stripe,gocardless"
    payout_connector_list = "stripe,wise"
    
    # Connector configuration, provided attributes will be used to fulfill API requests.
    # Examples provided here are sandbox/test base urls, can be replaced by live or mock
    # base urls based on your need.
    # Note: These are not optional attributes. hyperswitch request can fail due to invalid/empty values.
    [connectors]
    aci.base_url = "https://eu-test.oppwa.com/"
    adyen.base_url = "https://checkout-test.adyen.com/"
    adyen.payout_base_url = "https://pal-test.adyen.com/"
    adyen.dispute_base_url = "https://ca-test.adyen.com/"
    adyenplatform.base_url = "https://balanceplatform-api-test.adyen.com/"
    airwallex.base_url = "https://api-demo.airwallex.com/"
    amazonpay.base_url = "https://pay-api.amazon.com/v2"
    applepay.base_url = "https://apple-pay-gateway.apple.com/"
    authorizedotnet.base_url = "https://apitest.authorize.net/xml/v1/request.api"
    bambora.base_url = "https://api.na.bambora.com"
    bamboraapac.base_url = "https://demo.ippayments.com.au/interface/api"
    bankofamerica.base_url = "https://apitest.merchant-services.bankofamerica.com/"
    billwerk.base_url = "https://api.reepay.com/"
    billwerk.secondary_base_url = "https://card.reepay.com/"
    bitpay.base_url = "https://test.bitpay.com"
    bluesnap.base_url = "https://sandbox.bluesnap.com/"
    bluesnap.secondary_base_url = "https://sandpay.bluesnap.com/"
    boku.base_url = "https://$-api4-stage.boku.com"
    braintree.base_url = "https://payments.sandbox.braintree-api.com/graphql"
    cashtocode.base_url = "https://cluster05.api-test.cashtocode.com"
    checkout.base_url = "https://api.sandbox.checkout.com/"
    coinbase.base_url = "https://api.commerce.coinbase.com"
    cryptopay.base_url = "https://business-sandbox.cryptopay.me"
    cybersource.base_url = "https://apitest.cybersource.com/"
    datatrans.base_url = "https://api.sandbox.datatrans.com/"
    deutschebank.base_url = "https://testmerch.directpos.de/rest-api"
    digitalvirgo.base_url = "https://dcb-integration-service-sandbox-external.staging.digitalvirgo.pl"
    dlocal.base_url = "https://sandbox.dlocal.com/"
    dummyconnector.base_url = "http://localhost:8080/dummy-connector"
    ebanx.base_url = "https://sandbox.ebanxpay.com/"
    elavon.base_url = "https://api.demo.convergepay.com"
    fiserv.base_url = "https://cert.api.fiservapps.com/"
    fiservemea.base_url = "https://prod.emea.api.fiservapps.com/sandbox"
    fiuu.base_url = "https://sandbox.merchant.razer.com/"
    fiuu.secondary_base_url="https://sandbox.merchant.razer.com/"
    fiuu.third_base_url="https://api.merchant.razer.com/"
    forte.base_url = "https://sandbox.forte.net/api/v3"
    globalpay.base_url = "https://apis.sandbox.globalpay.com/ucp/"
    globepay.base_url = "https://pay.globepay.co/"
    gocardless.base_url = "https://api-sandbox.gocardless.com"
    gpayments.base_url = "https://{{merchant_endpoint_prefix}}-test.api.as1.gpayments.net"
    helcim.base_url = "https://api.helcim.com/"
    iatapay.base_url = "https://sandbox.iata-pay.iata.org/api/v1"
    itaubank.base_url = "https://sandbox.devportal.itau.com.br/"
    jpmorgan.base_url = "https://api-mock.payments.jpmorgan.com/api/v2"
    klarna.base_url = "https://api{{klarna_region}}.playground.klarna.com/"
    mifinity.base_url = "https://demo.mifinity.com/"
    mollie.base_url = "https://api.mollie.com/v2/"
    mollie.secondary_base_url = "https://api.cc.mollie.com/v1/"
    multisafepay.base_url = "https://testapi.multisafepay.com/"
    nexinets.base_url = "https://apitest.payengine.de/v1"
    nexixpay.base_url = "https://xpaysandbox.nexigroup.com/api/phoenix-0.0/psp/api/v1"
    nmi.base_url = "https://secure.nmi.com/"
    nomupay.base_url = "https://payout-api.sandbox.nomupay.com"
    noon.base_url = "https://api-test.noonpayments.com/"
    noon.key_mode = "Test"
    novalnet.base_url = "https://payport.novalnet.de/v2"
    nuvei.base_url = "https://ppp-test.nuvei.com/"
    opayo.base_url = "https://pi-test.sagepay.com/"
    opennode.base_url = "https://dev-api.opennode.com"
    paybox.base_url = "https://preprod-ppps.paybox.com/PPPS.php"
    paybox.secondary_base_url="https://preprod-tpeweb.paybox.com/"
    payeezy.base_url = "https://api-cert.payeezy.com/"
    payme.base_url = "https://sandbox.payme.io/"
    payone.base_url = "https://payment.preprod.payone.com/"
    paypal.base_url = "https://api-m.sandbox.paypal.com/"
    payu.base_url = "https://secure.snd.payu.com/"
    placetopay.base_url = "https://test.placetopay.com/rest/gateway"
    plaid.base_url = "https://sandbox.plaid.com"
    powertranz.base_url = "https://staging.ptranz.com/api/"
    prophetpay.base_url = "https://ccm-thirdparty.cps.golf/"
    rapyd.base_url = "https://sandboxapi.rapyd.net"
    razorpay.base_url = "https://sandbox.juspay.in/"
    riskified.base_url = "https://sandbox.riskified.com/api"
    shift4.base_url = "https://api.shift4.com/"
    signifyd.base_url = "https://api.signifyd.com/"
    square.base_url = "https://connect.squareupsandbox.com/"
    square.secondary_base_url = "https://pci-connect.squareupsandbox.com/"
    stax.base_url = "https://apiprod.fattlabs.com/"
    stripe.base_url = "https://api.stripe.com/"
    stripe.base_url_file_upload = "https://files.stripe.com/"
    taxjar.base_url = "https://api.sandbox.taxjar.com/v2/"
    thunes.base_url = "https://api.limonetikqualif.com/"
    trustpay.base_url = "https://test-tpgw.trustpay.eu/"
    trustpay.base_url_bank_redirects = "https://aapi.trustpay.eu/"
    tsys.base_url = "https://stagegw.transnox.com/"
    volt.base_url = "https://api.sandbox.volt.io/"
    wellsfargo.base_url = "https://apitest.cybersource.com/"
    wellsfargopayout.base_url = "https://api-sandbox.wellsfargo.com/"
    wise.base_url = "https://api.sandbox.transferwise.tech/"
    worldline.base_url = "https://eu.sandbox.api-ingenico.com/"
    worldpay.base_url = "https://try.access.worldpay.com/"
    zen.base_url = "https://api.zen-test.com/"
    zen.secondary_base_url = "https://secure.zen-test.com/"
    zsl.base_url = "https://api.sitoffalb.net/"
    threedsecureio.base_url = "https://service.sandbox.3dsecure.io"
    netcetera.base_url = "https://{{merchant_endpoint_prefix}}.3ds-server.prev.netcetera-cloud-payment.ch"
    
    [delayed_session_response]
    connectors_with_delayed_session_response = "trustpay,payme" # List of connectors which have delayed session response
    
    [dummy_connector]
    enabled = true                                                          # Whether dummy connector is enabled or not
    assets_base_url = "https://app.hyperswitch.io/assets/TestProcessor/"    # Base url for dummy connector assets
    authorize_ttl = 36000                                                   # Time to live for dummy connector authorize request in redis
    default_return_url = "https://app.hyperswitch.io/"                      # Default return url when no return url is passed while payment
    discord_invite_url = "https://discord.gg/wJZ7DVW8mm"                    # Discord invite url for hyperswitch
    payment_complete_duration = 500                                         # Fake delay duration for dummy connector payment complete
    payment_complete_tolerance = 100                                        # Fake delay tolerance for dummy connector payment complete
    payment_duration = 1000                                                 # Fake delay duration for dummy connector payment
    payment_retrieve_duration = 500                                         # Fake delay duration for dummy connector payment sync
    payment_retrieve_tolerance = 100                                        # Fake delay tolerance for dummy connector payment sync
    payment_tolerance = 100                                                 # Fake delay tolerance for dummy connector payment
    payment_ttl = 172800                                                    # Time to live for dummy connector payment in redis
    refund_duration = 1000                                                  # Fake delay duration for dummy connector refund
    refund_retrieve_duration = 500                                          # Fake delay duration for dummy connector refund sync
    refund_retrieve_tolerance = 100                                         # Fake delay tolerance for dummy connector refund sync
    refund_tolerance = 100                                                  # Fake delay tolerance for dummy connector refund
    refund_ttl = 172800                                                     # Time to live for dummy connector refund in redis
    slack_invite_url = "https://join.slack.com/t/hyperswitch-io/shared_invite/zt-2awm23agh-p_G5xNpziv6yAiedTkkqLg"    # Slack invite url for hyperswitch
    
    
    
    [frm]
    enabled = true
    
    [mandates.supported_payment_methods]
    bank_debit.ach = { connector_list = "gocardless,adyen" }                 # Mandate supported payment method type and connector for bank_debit
    bank_debit.becs = { connector_list = "gocardless" }                      # Mandate supported payment method type and connector for bank_debit
    bank_debit.bacs = { connector_list = "adyen" }                           # Mandate supported payment method type and connector for bank_debit
    bank_debit.sepa = { connector_list = "gocardless,adyen" }                # Mandate supported payment method type and connector for bank_debit
    card.credit.connector_list = "stripe,adyen,authorizedotnet,cybersource,globalpay,worldpay,multisafepay,nmi,nexinets,noon,bankofamerica,braintree"     # Mandate supported payment method type and connector for card
    card.debit.connector_list = "stripe,adyen,authorizedotnet,cybersource,globalpay,worldpay,multisafepay,nmi,nexinets,noon,bankofamerica,braintree"      # Mandate supported payment method type and connector for card
    pay_later.klarna.connector_list = "adyen"                       # Mandate supported payment method type and connector for pay_later
    wallet.apple_pay.connector_list = "stripe,adyen,cybersource,noon,bankofamerica"         # Mandate supported payment method type and connector for wallets
    wallet.google_pay.connector_list = "stripe,adyen,cybersource,bankofamerica"             # Mandate supported payment method type and connector for wallets
    wallet.paypal.connector_list = "adyen"                          # Mandate supported payment method type and connector for wallets
    bank_redirect.ideal.connector_list = "stripe,adyen,globalpay,multisafepay"   # Mandate supported payment method type and connector for bank_redirect
    bank_redirect.sofort.connector_list = "stripe,adyen,globalpay"  # Mandate supported payment method type and connector for bank_redirect
    bank_redirect.giropay.connector_list = "adyen,globalpay,multisafepay"        # Mandate supported payment method type and connector for bank_redirect
    
    [mandates.update_mandate_supported]
    card.credit = { connector_list = "cybersource" }            # Update Mandate supported payment method type and connector for card 
    card.debit = { connector_list = "cybersource" }             # Update Mandate supported payment method type and connector for card 
    
    [network_transaction_id_supported_connectors]
    connector_list = "stripe,adyen,cybersource"
    
    
    [payouts]
    payout_eligibility = true               # Defaults the eligibility of a payout method to true in case connector does not provide checks for payout eligibility
    
    #Payment Method Filters Based on Country and Currency
    [pm_filters.default]
    ach = { country = "US", currency = "USD" }
    affirm = { country = "US", currency = "USD" }
    afterpay_clearpay = { country = "AU,NZ,ES,GB,FR,IT,CA,US", currency = "GBP" }
    ali_pay = { country = "AU,JP,HK,SG,MY,TH,ES,GB,SE,NO,AT,NL,DE,CY,CH,BE,FR,DK,FI,RO,MT,SI,GR,PT,IE,IT,CA,US", currency = "USD,EUR,GBP,JPY,AUD,SGD,CHF,SEK,NOK,NZD,THB,HKD,CAD" }
    apple_pay = { country = "AU,CN,HK,JP,MO,MY,NZ,SG,TW,AM,AT,AZ,BY,BE,BG,HR,CY,CZ,DK,EE,FO,FI,FR,GE,DE,GR,GL,GG,HU,IS,IE,IM,IT,KZ,JE,LV,LI,LT,LU,MT,MD,MC,ME,NL,NO,PL,PT,RO,SM,RS,SK,SI,ES,SE,CH,UA,GB,AR,CO,CR,BR,MX,PE,BH,IL,JO,KW,PS,QA,SA,AE,CA,UM,US,KR,VN,MA,ZA,VA,CL,SV,GT,HN,PA", currency = "AED,AUD,CHF,CAD,EUR,GBP,HKD,SGD,USD" }
    bacs = { country = "GB", currency = "GBP" }
    bancontact_card = { country = "BE", currency = "EUR" }
    blik = { country = "PL", currency = "PLN" }
    eps = { country = "AT", currency = "EUR" }
    giropay = { country = "DE", currency = "EUR" }
    google_pay = { country = "AU,NZ,JP,HK,SG,MY,TH,VN,BH,AE,KW,BR,ES,GB,SE,NO,SK,AT,NL,DE,HU,CY,LU,CH,BE,FR,DK,RO,HR,LI,MT,SI,GR,PT,IE,CZ,EE,LT,LV,IT,PL,TR,IS,CA,US", currency = "AED,ALL,AMD,ANG,AOA,ARS,AUD,AWG,AZN,BAM,BBD,BDT,BGN,BHD,BMD,BND,BOB,BRL,BSD,BWP,BYN,BZD,CAD,CHF,CLP,CNY,COP,CRC,CUP,CVE,CZK,DJF,DKK,DOP,DZD,EGP,ETB,EUR,FJD,FKP,GBP,GEL,GHS,GIP,GMD,GNF,GTQ,GYD,HKD,HNL,HTG,HUF,IDR,ILS,INR,IQD,JMD,JOD,JPY,KES,KGS,KHR,KMF,KRW,KWD,KYD,KZT,LAK,LBP,LKR,LYD,MAD,MDL,MKD,MMK,MNT,MOP,MRU,MUR,MVR,MWK,MXN,MYR,MZN,NAD,NGN,NIO,NOK,NPR,NZD,OMR,PAB,PEN,PGK,PHP,PKR,PLN,PYG,QAR,RON,RSD,RUB,RWF,SAR,SBD,SCR,SEK,SGD,SHP,SLE,SOS,SRD,STN,SVC,SZL,THB,TND,TOP,TRY,TTD,TWD,TZS,UAH,UGX,USD,UYU,UZS,VES,VND,VUV,WST,XAF,XCD,XOF,XPF,YER,ZAR,ZMW" }
    ideal = { country = "NL", currency = "EUR" }
    klarna = { country = "AT,ES,GB,SE,NO,AT,NL,DE,CH,BE,FR,DK,FI,PT,IE,IT,PL,CA,US", currency = "USD,GBP,EUR,CHF,DKK,SEK,NOK,AUD,PLN,CAD" }
    mb_way = { country = "PT", currency = "EUR" }
    mobile_pay = { country = "DK,FI", currency = "DKK,SEK,NOK,EUR" }
    online_banking_czech_republic = { country = "CZ", currency = "EUR,CZK" }
    online_banking_finland = { country = "FI", currency = "EUR" }
    online_banking_poland = { country = "PL", currency = "PLN" }
    online_banking_slovakia = { country = "SK", currency = "EUR,CZK" }
    pay_bright = { country = "CA", currency = "CAD" }
    paypal = { country = "AU,NZ,CN,JP,HK,MY,TH,KR,PH,ID,AE,KW,BR,ES,GB,SE,NO,SK,AT,NL,DE,HU,CY,LU,CH,BE,FR,DK,FI,RO,HR,UA,MT,SI,GI,PT,IE,CZ,EE,LT,LV,IT,PL,IS,CA,US", currency = "AUD,BRL,CAD,CZK,DKK,EUR,HKD,HUF,INR,JPY,MYR,MXN,NZD,NOK,PHP,PLN,RUB,GBP,SGD,SEK,CHF,THB,USD" }
    sepa = { country = "ES,SK,AT,NL,DE,BE,FR,FI,PT,IE,EE,LT,LV,IT", currency = "EUR" }
    sofort = { country = "ES,GB,SE,AT,NL,DE,CH,BE,FR,FI,IT,PL", currency = "EUR" }
    trustly = { country = "ES,GB,SE,NO,AT,NL,DE,DK,FI,EE,LT,LV", currency = "CZK,DKK,EUR,GBP,NOK,SEK" }
    walley = { country = "SE,NO,DK,FI", currency = "DKK,EUR,NOK,SEK" }
    we_chat_pay = { country = "AU,NZ,CN,JP,HK,SG,ES,GB,SE,NO,AT,NL,DE,CY,CH,BE,FR,DK,LI,MT,SI,GR,PT,IT,CA,US", currency = "AUD,CAD,CNY,EUR,GBP,HKD,JPY,NZD,SGD,USD" }
    
    [pm_filters.adyen]
    ach = { country = "US", currency = "USD" }
    affirm = { country = "US", currency = "USD" }
    afterpay_clearpay = { country = "US,CA,GB,AU,NZ", currency = "GBP,AUD,NZD,CAD,USD" }
    alfamart = { country = "ID", currency = "IDR" }
    ali_pay = { country = "AU,JP,HK,SG,MY,TH,ES,GB,SE,NO,AT,NL,DE,CY,CH,BE,FR,DK,FI,RO,MT,SI,GR,PT,IE,IT,CA,US", currency = "USD,EUR,GBP,JPY,AUD,SGD,CHF,SEK,NOK,NZD,THB,HKD,CAD" }
    ali_pay_hk = { country = "HK", currency = "HKD" }
    alma = { country = "FR", currency = "EUR" }
    apple_pay = { country = "AU,NZ,CN,JP,HK,SG,MY,BH,AE,KW,BR,ES,GB,SE,NO,AT,NL,DE,HU,CY,LU,CH,BE,FR,DK,FI,RO,HR,LI,UA,MT,SI,GR,PT,IE,CZ,EE,LT,LV,IT,PL,IS,CA,US", currency = "AUD,CHF,CAD,EUR,GBP,HKD,SGD,USD,MYR" }
    atome = { country = "MY,SG", currency = "MYR,SGD" }
    bacs = { country = "GB", currency = "GBP" }
    bancontact_card = { country = "BE", currency = "EUR" }
    bca_bank_transfer = { country = "ID", currency = "IDR" }
    bizum = { country = "ES", currency = "EUR" }
    blik = { country = "PL", currency = "PLN" }
    bni_va = { country = "ID", currency = "IDR" }
    boleto = { country = "BR", currency = "BRL" }
    bri_va = { country = "ID", currency = "IDR" }
    cimb_va = { country = "ID", currency = "IDR" }
    dana = { country = "ID", currency = "IDR" }
    danamon_va = { country = "ID", currency = "IDR" }
    eps = { country = "AT", currency = "EUR" }
    family_mart = { country = "JP", currency = "JPY" }
    gcash = { country = "PH", currency = "PHP" }
    giropay = { country = "DE", currency = "EUR" }
    go_pay = { country = "ID", currency = "IDR" }
    google_pay = { country = "AU,NZ,JP,HK,SG,MY,TH,VN,BH,AE,KW,BR,ES,GB,SE,NO,SK,AT,NL,DE,HU,CY,LU,CH,BE,FR,DK,RO,HR,LI,MT,SI,GR,PT,IE,CZ,EE,LT,LV,IT,PL,TR,IS,CA,US", currency = "AED,ALL,AMD,ANG,AOA,ARS,AUD,AWG,AZN,BAM,BBD,BDT,BGN,BHD,BMD,BND,BOB,BRL,BSD,BWP,BYN,BZD,CAD,CHF,CLP,CNY,COP,CRC,CUP,CVE,CZK,DJF,DKK,DOP,DZD,EGP,ETB,EUR,FJD,FKP,GBP,GEL,GHS,GIP,GMD,GNF,GTQ,GYD,HKD,HNL,HTG,HUF,IDR,ILS,INR,IQD,JMD,JOD,JPY,KES,KGS,KHR,KMF,KRW,KWD,KYD,KZT,LAK,LBP,LKR,LYD,MAD,MDL,MKD,MMK,MNT,MOP,MRU,MUR,MVR,MWK,MXN,MYR,MZN,NAD,NGN,NIO,NOK,NPR,NZD,OMR,PAB,PEN,PGK,PHP,PKR,PLN,PYG,QAR,RON,RSD,RUB,RWF,SAR,SBD,SCR,SEK,SGD,SHP,SLE,SOS,SRD,STN,SVC,SZL,THB,TND,TOP,TRY,TTD,TWD,TZS,UAH,UGX,USD,UYU,UZS,VES,VND,VUV,WST,XAF,XCD,XOF,XPF,YER,ZAR,ZMW" }
    ideal = { country = "NL", currency = "EUR" }
    indomaret = { country = "ID", currency = "IDR" }
    kakao_pay = { country = "KR", currency = "KRW" }
    klarna = { country = "AU,AT,BE,CA,CZ,DK,FI,FR,DE,GR,IE,IT,NO,PL,PT,RO,ES,SE,CH,NL,GB,US", currency = "AUD,EUR,CAD,CZK,DKK,NOK,PLN,RON,SEK,CHF,GBP,USD" }
    lawson = { country = "JP", currency = "JPY" }
    mandiri_va = { country = "ID", currency = "IDR" }
    mb_way = { country = "PT", currency = "EUR" }
    mini_stop = { country = "JP", currency = "JPY" }
    mobile_pay = { country = "DK,FI", currency = "DKK,SEK,NOK,EUR" }
    momo = { country = "VN", currency = "VND" }
    momo_atm = { country = "VN", currency = "VND" }
    online_banking_czech_republic = { country = "CZ", currency = "EUR,CZK" }
    online_banking_finland = { country = "FI", currency = "EUR" }
    online_banking_fpx = { country = "MY", currency = "MYR" }
    online_banking_poland = { country = "PL", currency = "PLN" }
    online_banking_slovakia = { country = "SK", currency = "EUR,CZK" }
    online_banking_thailand = { country = "TH", currency = "THB" }
    open_banking_uk = { country = "GB", currency = "GBP" }
    oxxo = { country = "MX", currency = "MXN" }
    pay_bright = { country = "CA", currency = "CAD" }
    pay_easy = { country = "JP", currency = "JPY" }
    pay_safe_card = { country = "AT,AU,BE,BR,BE,CA,HR,CY,CZ,DK,FI,FR,GE,DE,GI,HU,IS,IE,KW,LV,IE,LI,LT,LU,MT,MX,MD,ME,NL,NZ,NO,PY,PE,PL,PT,RO,SA,RS,SK,SI,ES,SE,CH,TR,AE,GB,US,UY", currency = "EUR,AUD,BRL,CAD,CZK,DKK,GEL,GIP,HUF,KWD,CHF,MXN,MDL,NZD,NOK,PYG,PEN,PLN,RON,SAR,RSD,SEK,TRY,AED,GBP,USD,UYU" }
    paypal = { country = "AU,NZ,CN,JP,HK,MY,TH,KR,PH,ID,AE,KW,BR,ES,GB,SE,NO,SK,AT,NL,DE,HU,CY,LU,CH,BE,FR,DK,FI,RO,HR,UA,MT,SI,GI,PT,IE,CZ,EE,LT,LV,IT,PL,IS,CA,US", currency = "AUD,BRL,CAD,CZK,DKK,EUR,HKD,HUF,INR,JPY,MYR,MXN,NZD,NOK,PHP,PLN,RUB,GBP,SGD,SEK,CHF,THB,USD" }
    permata_bank_transfer = { country = "ID", currency = "IDR" }
    seicomart = { country = "JP", currency = "JPY" }
    sepa = { country = "ES,SK,AT,NL,DE,BE,FR,FI,PT,IE,EE,LT,LV,IT", currency = "EUR" }
    seven_eleven = { country = "JP", currency = "JPY" }
    sofort = { country = "AT,BE,DE,ES,CH,NL", currency = "CHF,EUR" }
    swish = { country = "SE", currency = "SEK" }
    touch_n_go = { country = "MY", currency = "MYR" }
    trustly = { country = "ES,GB,SE,NO,AT,NL,DE,DK,FI,EE,LT,LV", currency = "CZK,DKK,EUR,GBP,NOK,SEK" }
    twint = { country = "CH", currency = "CHF" }
    vipps = { country = "NO", currency = "NOK" }
    walley = { country = "SE,NO,DK,FI", currency = "DKK,EUR,NOK,SEK" }
    we_chat_pay = { country = "AU,NZ,CN,JP,HK,SG,ES,GB,SE,NO,AT,NL,DE,CY,CH,BE,FR,DK,LI,MT,SI,GR,PT,IT,CA,US", currency = "AUD,CAD,CNY,EUR,GBP,HKD,JPY,NZD,SGD,USD" }
    pix = { country = "BR", currency = "BRL" }
    
    [pm_filters.authorizedotnet]
    google_pay.currency = "CHF,DKK,EUR,GBP,NOK,PLN,SEK,USD,AUD,NZD,CAD"
    paypal.currency = "CHF,DKK,EUR,GBP,NOK,PLN,SEK,USD,AUD,NZD,CAD"
    
    [pm_filters.bankofamerica]
    credit = { currency = "USD" }
    debit = { currency = "USD" }
    apple_pay = { currency = "USD" }
    google_pay = { currency = "USD" }
    
    [pm_filters.cybersource]
    credit = { currency = "USD,GBP,EUR" }
    debit = { currency = "USD,GBP,EUR" }
    apple_pay = { currency = "USD,GBP,EUR" }
    google_pay = { currency = "USD,GBP,EUR" }
    samsung_pay = { currency = "USD,GBP,EUR" }
    paze = { currency = "USD" }
    
    [pm_filters.nexixpay]
    credit = { country = "AT,BE,CY,EE,FI,FR,DE,GR,IE,IT,LV,LT,LU,MT,NL,PT,SK,SI,ES,BG,HR,DK,GB,NO,PL,CZ,RO,SE,CH,HU", currency = "ARS,AUD,BHD,CAD,CLP,CNY,COP,HRK,CZK,DKK,HKD,HUF,INR,JPY,KZT,JOD,KRW,KWD,MYR,MXN,NGN,NOK,PHP,QAR,RUB,SAR,SGD,VND,ZAR,SEK,CHF,THB,AED,EGP,GBP,USD,TWD,BYN,RSD,AZN,RON,TRY,AOA,BGN,EUR,UAH,PLN,BRL" }
    debit = { country = "AT,BE,CY,EE,FI,FR,DE,GR,IE,IT,LV,LT,LU,MT,NL,PT,SK,SI,ES,BG,HR,DK,GB,NO,PL,CZ,RO,SE,CH,HU", currency = "ARS,AUD,BHD,CAD,CLP,CNY,COP,HRK,CZK,DKK,HKD,HUF,INR,JPY,KZT,JOD,KRW,KWD,MYR,MXN,NGN,NOK,PHP,QAR,RUB,SAR,SGD,VND,ZAR,SEK,CHF,THB,AED,EGP,GBP,USD,TWD,BYN,RSD,AZN,RON,TRY,AOA,BGN,EUR,UAH,PLN,BRL" }
    
    [pm_filters.novalnet]
    credit = { country = "AD,AE,AL,AM,AR,AT,AU,AZ,BA,BB,BD,BE,BG,BH,BI,BM,BN,BO,BR,BS,BW,BY,BZ,CA,CD,CH,CL,CN,CO,CR,CU,CY,CZ,DE,DJ,DK,DO,DZ,EE,EG,ET,ES,FI,FJ,FR,GB,GE,GH,GI,GM,GR,GT,GY,HK,HN,HR,HU,ID,IE,IL,IN,IS,IT,JM,JO,JP,KE,KH,KR,KW,KY,KZ,LB,LK,LT,LV,LY,MA,MC,MD,ME,MG,MK,MN,MO,MT,MV,MW,MX,MY,NG,NI,NO,NP,NL,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SB,SC,SE,SG,SH,SI,SK,SL,SO,SM,SR,ST,SV,SY,TH,TJ,TN,TO,TR,TW,TZ,UA,UG,US,UY,UZ,VE,VA,VN,VU,WS,CF,AG,DM,GD,KN,LC,VC,YE,ZA,ZM", currency = "AED,ALL,AMD,ARS,AUD,AZN,BAM,BBD,BDT,BGN,BHD,BIF,BMD,BND,BOB,BRL,BSD,BWP,BYN,BZD,CAD,CDF,CHF,CLP,CNY,COP,CRC,CUP,CZK,DJF,DKK,DOP,DZD,EGP,ETB,EUR,FJD,GBP,GEL,GHS,GIP,GMD,GTQ,GYD,HKD,HNL,HRK,HUF,IDR,ILS,INR,ISK,JMD,JOD,JPY,KES,KHR,KRW,KWD,KYD,KZT,LBP,LKR,LYD,MAD,MDL,MGA,MKD,MNT,MOP,MVR,MWK,MXN,MYR,NGN,NIO,NOK,NPR,NZD,OMR,PAB,PEN,PGK,PHP,PKR,PLN,PYG,QAR,RON,RSD,RUB,RWF,SAR,SBD,SCR,SEK,SGD,SHP,SLL,SOS,SRD,STN,SVC,SYP,THB,TJS,TND,TOP,TRY,TWD,TZS,UAH,UGX,USD,UYU,UZS,VES,VND,VUV,WST,XAF,XCD,YER,ZAR,ZMW"}
    debit = { country = "AD,AE,AL,AM,AR,AT,AU,AZ,BA,BB,BD,BE,BG,BH,BI,BM,BN,BO,BR,BS,BW,BY,BZ,CA,CD,CH,CL,CN,CO,CR,CU,CY,CZ,DE,DJ,DK,DO,DZ,EE,EG,ET,ES,FI,FJ,FR,GB,GE,GH,GI,GM,GR,GT,GY,HK,HN,HR,HU,ID,IE,IL,IN,IS,IT,JM,JO,JP,KE,KH,KR,KW,KY,KZ,LB,LK,LT,LV,LY,MA,MC,MD,ME,MG,MK,MN,MO,MT,MV,MW,MX,MY,NG,NI,NO,NP,NL,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SB,SC,SE,SG,SH,SI,SK,SL,SO,SM,SR,ST,SV,SY,TH,TJ,TN,TO,TR,TW,TZ,UA,UG,US,UY,UZ,VE,VA,VN,VU,WS,CF,AG,DM,GD,KN,LC,VC,YE,ZA,ZM", currency = "AED,ALL,AMD,ARS,AUD,AZN,BAM,BBD,BDT,BGN,BHD,BIF,BMD,BND,BOB,BRL,BSD,BWP,BYN,BZD,CAD,CDF,CHF,CLP,CNY,COP,CRC,CUP,CZK,DJF,DKK,DOP,DZD,EGP,ETB,EUR,FJD,GBP,GEL,GHS,GIP,GMD,GTQ,GYD,HKD,HNL,HRK,HUF,IDR,ILS,INR,ISK,JMD,JOD,JPY,KES,KHR,KRW,KWD,KYD,KZT,LBP,LKR,LYD,MAD,MDL,MGA,MKD,MNT,MOP,MVR,MWK,MXN,MYR,NGN,NIO,NOK,NPR,NZD,OMR,PAB,PEN,PGK,PHP,PKR,PLN,PYG,QAR,RON,RSD,RUB,RWF,SAR,SBD,SCR,SEK,SGD,SHP,SLL,SOS,SRD,STN,SVC,SYP,THB,TJS,TND,TOP,TRY,TWD,TZS,UAH,UGX,USD,UYU,UZS,VES,VND,VUV,WST,XAF,XCD,YER,ZAR,ZMW"}
    apple_pay = { country = "AD,AE,AL,AM,AR,AT,AU,AZ,BA,BB,BD,BE,BG,BH,BI,BM,BN,BO,BR,BS,BW,BY,BZ,CA,CD,CH,CL,CN,CO,CR,CU,CY,CZ,DE,DJ,DK,DO,DZ,EE,EG,ET,ES,FI,FJ,FR,GB,GE,GH,GI,GM,GR,GT,GY,HK,HN,HR,HU,ID,IE,IL,IN,IS,IT,JM,JO,JP,KE,KH,KR,KW,KY,KZ,LB,LK,LT,LV,LY,MA,MC,MD,ME,MG,MK,MN,MO,MT,MV,MW,MX,MY,NG,NI,NO,NP,NL,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SB,SC,SE,SG,SH,SI,SK,SL,SO,SM,SR,ST,SV,SY,TH,TJ,TN,TO,TR,TW,TZ,UA,UG,US,UY,UZ,VE,VA,VN,VU,WS,CF,AG,DM,GD,KN,LC,VC,YE,ZA,ZM", currency = "AED,ALL,AMD,ARS,AUD,AZN,BAM,BBD,BDT,BGN,BHD,BIF,BMD,BND,BOB,BRL,BSD,BWP,BYN,BZD,CAD,CDF,CHF,CLP,CNY,COP,CRC,CUP,CZK,DJF,DKK,DOP,DZD,EGP,ETB,EUR,FJD,GBP,GEL,GHS,GIP,GMD,GTQ,GYD,HKD,HNL,HRK,HUF,IDR,ILS,INR,ISK,JMD,JOD,JPY,KES,KHR,KRW,KWD,KYD,KZT,LBP,LKR,LYD,MAD,MDL,MGA,MKD,MNT,MOP,MVR,MWK,MXN,MYR,NGN,NIO,NOK,NPR,NZD,OMR,PAB,PEN,PGK,PHP,PKR,PLN,PYG,QAR,RON,RSD,RUB,RWF,SAR,SBD,SCR,SEK,SGD,SHP,SLL,SOS,SRD,STN,SVC,SYP,THB,TJS,TND,TOP,TRY,TWD,TZS,UAH,UGX,USD,UYU,UZS,VES,VND,VUV,WST,XAF,XCD,YER,ZAR,ZMW"}
    google_pay = { country = "AD,AE,AL,AM,AR,AT,AU,AZ,BA,BB,BD,BE,BG,BH,BI,BM,BN,BO,BR,BS,BW,BY,BZ,CA,CD,CH,CL,CN,CO,CR,CU,CY,CZ,DE,DJ,DK,DO,DZ,EE,EG,ET,ES,FI,FJ,FR,GB,GE,GH,GI,GM,GR,GT,GY,HK,HN,HR,HU,ID,IE,IL,IN,IS,IT,JM,JO,JP,KE,KH,KR,KW,KY,KZ,LB,LK,LT,LV,LY,MA,MC,MD,ME,MG,MK,MN,MO,MT,MV,MW,MX,MY,NG,NI,NO,NP,NL,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SB,SC,SE,SG,SH,SI,SK,SL,SO,SM,SR,ST,SV,SY,TH,TJ,TN,TO,TR,TW,TZ,UA,UG,US,UY,UZ,VE,VA,VN,VU,WS,CF,AG,DM,GD,KN,LC,VC,YE,ZA,ZM", currency = "AED,ALL,AMD,ARS,AUD,AZN,BAM,BBD,BDT,BGN,BHD,BIF,BMD,BND,BOB,BRL,BSD,BWP,BYN,BZD,CAD,CDF,CHF,CLP,CNY,COP,CRC,CUP,CZK,DJF,DKK,DOP,DZD,EGP,ETB,EUR,FJD,GBP,GEL,GHS,GIP,GMD,GTQ,GYD,HKD,HNL,HRK,HUF,IDR,ILS,INR,ISK,JMD,JOD,JPY,KES,KHR,KRW,KWD,KYD,KZT,LBP,LKR,LYD,MAD,MDL,MGA,MKD,MNT,MOP,MVR,MWK,MXN,MYR,NGN,NIO,NOK,NPR,NZD,OMR,PAB,PEN,PGK,PHP,PKR,PLN,PYG,QAR,RON,RSD,RUB,RWF,SAR,SBD,SCR,SEK,SGD,SHP,SLL,SOS,SRD,STN,SVC,SYP,THB,TJS,TND,TOP,TRY,TWD,TZS,UAH,UGX,USD,UYU,UZS,VES,VND,VUV,WST,XAF,XCD,YER,ZAR,ZMW"}
    paypal = { country = "AD,AE,AL,AM,AR,AT,AU,AZ,BA,BB,BD,BE,BG,BH,BI,BM,BN,BO,BR,BS,BW,BY,BZ,CA,CD,CH,CL,CN,CO,CR,CU,CY,CZ,DE,DJ,DK,DO,DZ,EE,EG,ET,ES,FI,FJ,FR,GB,GE,GH,GI,GM,GR,GT,GY,HK,HN,HR,HU,ID,IE,IL,IN,IS,IT,JM,JO,JP,KE,KH,KR,KW,KY,KZ,LB,LK,LT,LV,LY,MA,MC,MD,ME,MG,MK,MN,MO,MT,MV,MW,MX,MY,NG,NI,NO,NP,NL,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SB,SC,SE,SG,SH,SI,SK,SL,SO,SM,SR,ST,SV,SY,TH,TJ,TN,TO,TR,TW,TZ,UA,UG,US,UY,UZ,VE,VA,VN,VU,WS,CF,AG,DM,GD,KN,LC,VC,YE,ZA,ZM", currency = "AED,ALL,AMD,ARS,AUD,AZN,BAM,BBD,BDT,BGN,BHD,BIF,BMD,BND,BOB,BRL,BSD,BWP,BYN,BZD,CAD,CDF,CHF,CLP,CNY,COP,CRC,CUP,CZK,DJF,DKK,DOP,DZD,EGP,ETB,EUR,FJD,GBP,GEL,GHS,GIP,GMD,GTQ,GYD,HKD,HNL,HRK,HUF,IDR,ILS,INR,ISK,JMD,JOD,JPY,KES,KHR,KRW,KWD,KYD,KZT,LBP,LKR,LYD,MAD,MDL,MGA,MKD,MNT,MOP,MVR,MWK,MXN,MYR,NGN,NIO,NOK,NPR,NZD,OMR,PAB,PEN,PGK,PHP,PKR,PLN,PYG,QAR,RON,RSD,RUB,RWF,SAR,SBD,SCR,SEK,SGD,SHP,SLL,SOS,SRD,STN,SVC,SYP,THB,TJS,TND,TOP,TRY,TWD,TZS,UAH,UGX,USD,UYU,UZS,VES,VND,VUV,WST,XAF,XCD,YER,ZAR,ZMW"}
    
    [pm_filters.braintree]
    paypal.currency = "AUD,BRL,CAD,CNY,CZK,DKK,EUR,HKD,HUF,ILS,JPY,MYR,MXN,TWD,NZD,NOK,PHP,PLN,GBP,RUB,SGD,SEK,CHF,THB,USD"
    
    [pm_filters.forte]
    credit.currency = "USD"
    debit.currency = "USD"
    
    [pm_filters.helcim]
    credit.currency = "USD"
    debit.currency = "USD"
    
    [pm_filters.globepay]
    ali_pay.currency = "GBP,CNY"
    we_chat_pay.currency = "GBP,CNY"
    
    [pm_filters.klarna]
    klarna = { country = "AU,AT,BE,CA,CZ,DK,FI,FR,DE,GR,IE,IT,NL,NZ,NO,PL,PT,ES,SE,CH,GB,US", currency = "CHF,DKK,EUR,GBP,NOK,PLN,SEK,USD,AUD,NZD,CAD" }
    
    [pm_filters.mifinity]
    mifinity = { country = "BR,CN,SG,MY,DE,CH,DK,GB,ES,AD,GI,FI,FR,GR,HR,IT,JP,MX,AR,CO,CL,PE,VE,UY,PY,BO,EC,GT,HN,SV,NI,CR,PA,DO,CU,PR,NL,NO,PL,PT,SE,RU,TR,TW,HK,MO,AX,AL,DZ,AS,AO,AI,AG,AM,AW,AU,AT,AZ,BS,BH,BD,BB,BE,BZ,BJ,BM,BT,BQ,BA,BW,IO,BN,BG,BF,BI,KH,CM,CA,CV,KY,CF,TD,CX,CC,KM,CG,CK,CI,CW,CY,CZ,DJ,DM,EG,GQ,ER,EE,ET,FK,FO,FJ,GF,PF,TF,GA,GM,GE,GH,GL,GD,GP,GU,GG,GN,GW,GY,HT,HM,VA,IS,IN,ID,IE,IM,IL,JE,JO,KZ,KE,KI,KW,KG,LA,LV,LB,LS,LI,LT,LU,MK,MG,MW,MV,ML,MT,MH,MQ,MR,MU,YT,FM,MD,MC,MN,ME,MS,MA,MZ,NA,NR,NP,NC,NZ,NE,NG,NU,NF,MP,OM,PK,PW,PS,PG,PH,PN,QA,RE,RO,RW,BL,SH,KN,LC,MF,PM,VC,WS,SM,ST,SA,SN,RS,SC,SL,SX,SK,SI,SB,SO,ZA,GS,KR,LK,SR,SJ,SZ,TH,TL,TG,TK,TO,TT,TN,TM,TC,TV,UG,UA,AE,UZ,VU,VN,VG,VI,WF,EH,ZM", currency = "AUD,CAD,CHF,CNY,CZK,DKK,EUR,GBP,INR,JPY,NOK,NZD,PLN,RUB,SEK,ZAR,USD,EGP,UYU,UZS" }
    
    [pm_filters.prophetpay]
    card_redirect.currency = "USD"
    
    
    [pm_filters.stax]
    ach = { country = "US", currency = "USD" }
    
    [pm_filters.stripe]
    affirm = { country = "US", currency = "USD" }
    afterpay_clearpay = { country = "US,CA,GB,AU,NZ,FR,ES", currency = "USD,CAD,GBP,AUD,NZD" }
    apple_pay.country = "AU,CN,HK,JP,MO,MY,NZ,SG,TW,AM,AT,AZ,BY,BE,BG,HR,CY,CZ,DK,EE,FO,FI,FR,GE,DE,GR,GL,GG,HU,IS,IE,IM,IT,KZ,JE,LV,LI,LT,LU,MT,MD,MC,ME,NL,NO,PL,PT,RO,SM,RS,SK,SI,ES,SE,CH,UA,GB,AR,CO,CR,BR,MX,PE,BH,IL,JO,KW,PS,QA,SA,AE,CA,UM,US,KR,VN,MA,ZA,VA,CL,SV,GT,HN,PA"
    cashapp = { country = "US", currency = "USD" }
    eps = { country = "AT", currency = "EUR" }
    giropay = { country = "DE", currency = "EUR" }
    google_pay.country = "AL,DZ,AS,AO,AG,AR,AU,AT,AZ,BH,BY,BE,BR,BG,CA,CL,CO,HR,CZ,DK,DO,EG,EE,FI,FR,DE,GR,HK,HU,IN,ID,IE,IL,IT,JP,JO,KZ,KE,KW,LV,LB,LT,LU,MY,MX,NL,NZ,NO,OM,PK,PA,PE,PH,PL,PT,QA,RO,RU,SA,SG,SK,ZA,ES,LK,SE,CH,TW,TH,TR,UA,AE,GB,US,UY,VN"
    ideal = { country = "NL", currency = "EUR" }
    klarna = { country = "AU,AT,BE,CA,CZ,DK,FI,FR,DE,GR,IE,IT,NL,NZ,NO,PL,PT,ES,SE,CH,GB,US", currency = "AUD,CAD,CHF,CZK,DKK,EUR,GBP,NOK,NZD,PLN,SEK,USD" }
    sofort = { country = "AT,BE,DE,IT,NL,ES", currency = "EUR" }
    
    [pm_filters.volt]
    open_banking_uk = { country = "DE,GB,AT,BE,CY,EE,ES,FI,FR,GR,HR,IE,IT,LT,LU,LV,MT,NL,PT,SI,SK,BG,CZ,DK,HU,NO,PL,RO,SE,AU,BR", currency = "EUR,GBP,DKK,NOK,PLN,SEK,AUD,BRL" }
    
    [pm_filters.razorpay]
    upi_collect = {country = "IN", currency = "INR"}
    
    [pm_filters.plaid]
    open_banking_pis = {currency = "EUR,GBP"}
    
    [pm_filters.worldpay]
    debit = { country = "AF,DZ,AW,AU,AZ,BS,BH,BD,BB,BZ,BM,BT,BO,BA,BW,BR,BN,BG,BI,KH,CA,CV,KY,CL,CO,KM,CD,CR,CZ,DK,DJ,ST,DO,EC,EG,SV,ER,ET,FK,FJ,GM,GE,GH,GI,GT,GN,GY,HT,HN,HK,HU,IS,IN,ID,IR,IQ,IE,IL,IT,JM,JP,JO,KZ,KE,KW,LA,LB,LS,LR,LY,LT,MO,MK,MG,MW,MY,MV,MR,MU,MX,MD,MN,MA,MZ,MM,NA,NZ,NI,NG,KP,NO,AR,PK,PG,PY,PE,UY,PH,PL,GB,QA,OM,RO,RU,RW,WS,SG,ST,ZA,KR,LK,SH,SD,SR,SZ,SE,CH,SY,TW,TJ,TZ,TH,TT,TN,TR,UG,UA,US,UZ,VU,VE,VN,ZM,ZW", currency = "AFN,DZD,ANG,AWG,AUD,AZN,BSD,BHD,BDT,BBD,BZD,BMD,BTN,BOB,BAM,BWP,BRL,BND,BGN,BIF,KHR,CAD,CVE,KYD,XOF,XAF,XPF,CLP,COP,KMF,CDF,CRC,EUR,CZK,DKK,DJF,DOP,XCD,EGP,SVC,ERN,ETB,EUR,FKP,FJD,GMD,GEL,GHS,GIP,GTQ,GNF,GYD,HTG,HNL,HKD,HUF,ISK,INR,IDR,IRR,IQD,ILS,JMD,JPY,JOD,KZT,KES,KWD,LAK,LBP,LSL,LRD,LYD,MOP,MKD,MGA,MWK,MYR,MVR,MRU,MUR,MXN,MDL,MNT,MAD,MZN,MMK,NAD,NPR,NZD,NIO,NGN,KPW,NOK,ARS,PKR,PAB,PGK,PYG,PEN,UYU,PHP,PLN,GBP,QAR,OMR,RON,RUB,RWF,WST,SAR,RSD,SCR,SLL,SGD,STN,SBD,SOS,ZAR,KRW,LKR,SHP,SDG,SRD,SZL,SEK,CHF,SYP,TWD,TJS,TZS,THB,TOP,TTD,TND,TRY,TMT,AED,UGX,UAH,USD,UZS,VUV,VND,YER,CNY,ZMW,ZWL" }
    credit = { country = "AF,DZ,AW,AU,AZ,BS,BH,BD,BB,BZ,BM,BT,BO,BA,BW,BR,BN,BG,BI,KH,CA,CV,KY,CL,CO,KM,CD,CR,CZ,DK,DJ,ST,DO,EC,EG,SV,ER,ET,FK,FJ,GM,GE,GH,GI,GT,GN,GY,HT,HN,HK,HU,IS,IN,ID,IR,IQ,IE,IL,IT,JM,JP,JO,KZ,KE,KW,LA,LB,LS,LR,LY,LT,MO,MK,MG,MW,MY,MV,MR,MU,MX,MD,MN,MA,MZ,MM,NA,NZ,NI,NG,KP,NO,AR,PK,PG,PY,PE,UY,PH,PL,GB,QA,OM,RO,RU,RW,WS,SG,ST,ZA,KR,LK,SH,SD,SR,SZ,SE,CH,SY,TW,TJ,TZ,TH,TT,TN,TR,UG,UA,US,UZ,VU,VE,VN,ZM,ZW", currency = "AFN,DZD,ANG,AWG,AUD,AZN,BSD,BHD,BDT,BBD,BZD,BMD,BTN,BOB,BAM,BWP,BRL,BND,BGN,BIF,KHR,CAD,CVE,KYD,XOF,XAF,XPF,CLP,COP,KMF,CDF,CRC,EUR,CZK,DKK,DJF,DOP,XCD,EGP,SVC,ERN,ETB,EUR,FKP,FJD,GMD,GEL,GHS,GIP,GTQ,GNF,GYD,HTG,HNL,HKD,HUF,ISK,INR,IDR,IRR,IQD,ILS,JMD,JPY,JOD,KZT,KES,KWD,LAK,LBP,LSL,LRD,LYD,MOP,MKD,MGA,MWK,MYR,MVR,MRU,MUR,MXN,MDL,MNT,MAD,MZN,MMK,NAD,NPR,NZD,NIO,NGN,KPW,NOK,ARS,PKR,PAB,PGK,PYG,PEN,UYU,PHP,PLN,GBP,QAR,OMR,RON,RUB,RWF,WST,SAR,RSD,SCR,SLL,SGD,STN,SBD,SOS,ZAR,KRW,LKR,SHP,SDG,SRD,SZL,SEK,CHF,SYP,TWD,TJS,TZS,THB,TOP,TTD,TND,TRY,TMT,AED,UGX,UAH,USD,UZS,VUV,VND,YER,CNY,ZMW,ZWL" }
    google_pay = { country = "AL,DZ,AS,AO,AG,AR,AU,AT,AZ,BH,BY,BE,BR,BG,CA,CL,CO,HR,CZ,DK,DO,EG,EE,FI,FR,DE,GR,HK,HU,IN,ID,IE,IL,IT,JP,JO,KZ,KE,KW,LV,LB,LT,LU,MY,MX,NL,NZ,NO,OM,PK,PA,PE,PH,PL,PT,QA,RO,RU,SA,SG,SK,ZA,ES,LK,SE,CH,TW,TH,TR,UA,AE,GB,US,UY,VN" }
    apple_pay = { country = "AU,CN,HK,JP,MO,MY,NZ,SG,TW,AM,AT,AZ,BY,BE,BG,HR,CY,CZ,DK,EE,FO,FI,FR,GE,DE,GR,GL,GG,HU,IS,IE,IM,IT,KZ,JE,LV,LI,LT,LU,MT,MD,MC,ME,NL,NO,PL,PT,RO,SM,RS,SK,SI,ES,SE,CH,UA,GB,AR,CO,CR,BR,MX,PE,BH,IL,JO,KW,PS,QA,SA,AE,CA,UM,US" }
    
    [pm_filters.zen]
    boleto = { country = "BR", currency = "BRL" }
    efecty = { country = "CO", currency = "COP" }
    multibanco = { country = "PT", currency = "EUR" }
    pago_efectivo = { country = "PE", currency = "PEN" }
    pix = { country = "BR", currency = "BRL" }
    pse = { country = "CO", currency = "COP" }
    red_compra = { country = "CL", currency = "CLP" }
    red_pagos = { country = "UY", currency = "UYU" }
    
    [pm_filters.zsl]
    local_bank_transfer = { country = "CN", currency = "CNY" }
    
    
    [pm_filters.fiuu]
    duit_now = { country ="MY", currency = "MYR" }
    
    [payout_method_filters.adyenplatform]
    sepa = { country = "ES,SK,AT,NL,DE,BE,FR,FI,PT,IE,EE,LT,LV,IT,CZ,DE,HU,NO,PL,SE,GB,CH" , currency = "EUR,CZK,DKK,HUF,NOK,PLN,SEK,GBP,CHF" }
    
    [payout_method_filters.stripe]
    ach = { country = "US", currency = "USD" }
    
    [temp_locker_enable_config]
    bluesnap.payment_method = "card"
    nuvei.payment_method = "card"
    shift4.payment_method = "card"
    stripe.payment_method = "bank_transfer"
    bankofamerica = { payment_method = "card" }
    cybersource = { payment_method = "card" }
    nmi.payment_method = "card"
    payme.payment_method = "card"
    deutschebank = { payment_method = "bank_debit" }
    paybox = { payment_method = "card" }
    nexixpay = { payment_method = "card" }
    
    #tokenization configuration which describe token lifetime and payment method for specific connector
    [tokenization]
    braintree = { long_lived_token = false, payment_method = "card" }
    checkout = { long_lived_token = false, payment_method = "wallet", apple_pay_pre_decrypt_flow = "network_tokenization" }
    gocardless = { long_lived_token = true, payment_method = "bank_debit" }
    mollie = { long_lived_token = false, payment_method = "card" }
    payme = { long_lived_token = false, payment_method = "card" }
    square = { long_lived_token = false, payment_method = "card" }
    stax = { long_lived_token = true, payment_method = "card,bank_debit" }
    stripe = { long_lived_token = false, payment_method = "wallet", payment_method_type = { list = "google_pay", type = "disable_only" } }
    billwerk = {long_lived_token = false, payment_method = "card"}
    
    [webhooks]
    outgoing_enabled = true
    
    [webhook_source_verification_call]
    connectors_with_webhook_source_verification_call = "paypal"        # List of connectors which has additional source verification api-call
    
    [unmasked_headers]
    keys = "accept-language,user-agent"
    
    [saved_payment_methods]
    sdk_eligible_payment_methods = "card"
    
    [locker_based_open_banking_connectors]
    connector_list = ""
    
    [network_tokenization_supported_card_networks]
    card_networks = "Visa, AmericanExpress, Mastercard"
    
    [network_tokenization_supported_connectors]
    connector_list = "cybersource"
---
# Source: hyperswitch-stack/charts/hyperswitch-app/templates/router/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: router-cm-hypers-v1
data:
  router.toml: |
    [analytics]
    source = "clickhouse"
    
    [analytics.sqlx]
    pool_size = 5             # Number of connections to keep open
    connection_timeout = 10    # Timeout for database connection in seconds
    queue_strategy = "Fifo"   # Add the queue strategy used by the database bb8 client
    
    [paze_decrypt_keys]
    paze_private_key = "PAZE_PRIVATE_KEY"                       # Base 64 Encoded Private Key File cakey.pem generated for Paze -> Command to create private key: openssl req -newkey rsa:2048 -x509 -keyout cakey.pem -out cacert.pem -days 365
    paze_private_key_passphrase = "PAZE_PRIVATE_KEY_PASSPHRASE" # PEM Passphrase used for generating Private Key File cakey.pem
    
    [applepay_merchant_configs]
    applepay_endpoint = "https://apple-pay-gateway.apple.com/paymentservices/registerMerchant" # Apple pay gateway merchant endpoint
    
    [connector_onboarding.paypal]
    enabled = true # boolean
    
    [connector_request_reference_id_config]
    merchant_ids_send_payment_id_as_connector_request_id = ['merchant_id_1','merchant_id_2']
    
    [cors]
    max_age = 30                            # Maximum time (in seconds) for which this CORS request may be cached.
    allowed_methods = "GET,POST,PUT,DELETE" # List of methods that are allowed
    wildcard_origin = true                 # If true, allows any origin to make requests
    
    [email]
    active_email_client = "SES"
    
    [events]
    source = "kafka"
    
    [events.kafka]
    brokers = ['kafka0:29092']
    intent_analytics_topic = "hyperswitch-payment-intent-events"      # Kafka topic to be used for PaymentIntent events
    attempt_analytics_topic = "hyperswitch-payment-attempt-events"     # Kafka topic to be used for PaymentAttempt events
    refund_analytics_topic = "hyperswitch-refund-events"      # Kafka topic to be used for Refund events
    api_logs_topic = "hyperswitch-api-log-events"              # Kafka topic to be used for incoming api events
    connector_logs_topic = "hyperswitch-outgoing-connector-events"        # Kafka topic to be used for connector api events
    outgoing_webhook_logs_topic = "hyperswitch-outgoing-webhook-events" # Kafka topic to be used for outgoing webhook events
    dispute_analytics_topic = "hyperswitch-dispute-events"     # Kafka topic to be used for Dispute events
    audit_events_topic = "hyperswitch-audit-events"          # Kafka topic to be used for Payment Audit events
    payout_analytics_topic = "hyperswitch-payout-events"      # Kafka topic to be used for Payouts and PayoutAttempt events
    consolidated_events_topic = "hyperswitch-consolidated-events"      # Kafka topic to be used for Consolidated events
    authentication_analytics_topic = "hyperswitch-authentication-events" # Kafka topic to be used for Authentication events
    fraud_check_analytics_topic = "hyperswitch-fraud-check-events"    # Kafka topic to be used for Fraud Check events
    
    [forex_api]
    call_delay = 21601                # Api calls are made after every 6 hrs
    local_fetch_retry_count = 5       # Fetch from Local cache has retry count as 5
    local_fetch_retry_delay = 1010    # Retry delay for checking write condition
    api_timeout = 20001               # Api timeouts once it crosses 20000 ms
    redis_lock_timeout = 260001        # Redis remains write locked for 26000 ms once the acquire_redis_lock is called
    
    [locker]
    host = "http://hyperswitch-vault"
    host_rs = ""
    mock_locker = false
    locker_signing_key_id = "1"
    locker_enabled = true
    ttl_for_storage_in_secs = 2.20752e+08
    
    [log.console]
    enabled = true
    level = "DEBUG"
    log_format = "json"
    
    [log.file]
    enabled = false
    level = "DEBUG"
    log_format = "json"
    
    [log.telemetry]
    traces_enabled = false                                # boolean [true or false], whether traces are enabled
    metrics_enabled = false                               # boolean [true or false], whether metrics are enabled
    ignore_errors = false                                 # boolean [true or false], whether to ignore errors during traces or metrics pipeline setup
    sampling_rate = 0.1                                   # decimal rate between 0.0 - 1.0
    otel_exporter_otlp_endpoint = "http://localhost:4317" # endpoint to send metrics and traces to, can include port number
    otel_exporter_otlp_timeout = 5000                     # timeout (in milliseconds) for sending metrics and traces
    use_xray_generator = false                            # Set this to true for AWS X-ray compatible traces
    route_to_trace = ['*/confirm']
    bg_metrics_collection_interval_in_secs = 15           # Interval for collecting the metrics in background thread
    
    [lock_settings]
    delay_between_retries_in_milliseconds = 500 # Delay between retries in milliseconds
    redis_lock_expiry_seconds = 180             # Seconds before the redis lock expires
    
    [master_database]
    pool_size = "20"
    connection_timeout = 10   
    queue_strategy = "Fifo"
    
    [generic_link]
    [generic_link.payment_method_collect]
    sdk_url = "http://localhost:9090/web/0.103.1/v0/HyperLoader.js"
    expiry = 900
    
    [generic_link.payment_method_collect.ui_config]
    theme = "#4285F4"
    logo = "https://app.hyperswitch.io/HyperswitchFavicon.png"
    merchant_name = "HyperSwitch"
    
    [generic_link.payment_method_collect.enabled_payment_methods]
    card = "credit,debit"
    bank_transfer = "ach,bacs,sepa"
    wallet = "paypal,pix,venmo"
    
    [generic_link.payout_link]
    sdk_url = "http://localhost:9090/web/0.103.1/v0/HyperLoader.js"
    expiry = 900
    
    [generic_link.payout_link.ui_config]
    theme = "#4285F4"
    logo = "https://app.hyperswitch.io/HyperswitchFavicon.png"
    merchant_name = "HyperSwitch"
    
    [generic_link.payout_link.enabled_payment_methods]
    card = "credit,debit"
    
    [payment_link]
    sdk_url = "http://localhost:9090/web/0.103.1/v0/HyperLoader.js"
    
    [payment_method_auth]
    redis_expiry = 900          # Redis expiry time in milliseconds
    
    [redis]
    host = "127.0.0.1"
    port = 6379
    pool_size = 5 # Number of connections to keep open
    reconnect_max_attempts = 5 # Maximum number of reconnection attempts to make before failing. Set to 0 to retry forever.
    reconnect_delay = 5 # Delay between reconnection attempts, in milliseconds
    default_ttl = 300 # Default TTL for entries, in seconds
    default_hash_ttl = 900 # Default TTL for hashes entries, in seconds
    use_legacy_version = false # RESP protocol for fred crate (set this to true if using RESPv2 or redis version < 6)
    stream_read_count = 1 # Default number of entries to read from stream if not provided in stream read options
    auto_pipeline = true # Whether or not the client should automatically pipeline commands across tasks when possible.
    disable_auto_backpressure = false # Whether or not to disable the automatic backpressure features when pipelining is enabled.
    max_in_flight_commands = 5000 # The maximum number of in-flight commands (per connection) before backpressure will be applied.
    default_command_timeout = 30 # An optional timeout to apply to all commands. In seconds
    unresponsive_timeout = 10 # An optional timeout for Unresponsive commands in seconds. This should be less than default_command_timeout.
    max_feed_count = 200 # The maximum number of frames that will be fed to a socket before flushing.
    cluster_enabled = false # boolean
    cluster_urls = ['redis.cluster.uri-1:8080', 'redis.cluster.uri-2:4115'] # List of redis cluster urls
    
    [replica_database]
    pool_size = "20"
    connection_timeout = 10   # Timeout for database connection in seconds
    queue_strategy = "Fifo"   # Add the queue strategy used by the database bb8 client
    
    [opensearch]
    host = "https://localhost:9200"
    
    [opensearch.auth]
    auth = "basic"
    username = "admin"
    password = "admin"
    region = "eu-central-1"
    
    [opensearch.indexes]
    payment_attempts = "hyperswitch-payment-attempt-events"
    payment_intents = "hyperswitch-payment-intent-events"
    refunds = "hyperswitch-refund-events"
    disputes = "hyperswitch-dispute-events"
    sessionizer_payment_attempts = "sessionizer-payment-attempt-events"
    sessionizer_payment_intents = "sessionizer-payment-intent-events"
    sessionizer_refunds = "sessionizer-refund-events"
    sessionizer_disputes = "sessionizer-dispute-events"
    
    [report_download_config]
    dispute_function = "report_download_config_dispute_function" # Config to download dispute report
    payment_function = "report_download_config_payment_function" # Config to download payment report
    refund_function = "report_download_config_refund_function"   # Config to download refund report
    region = "report_download_config_region"    
    
    [server]
    port = 8080
    host = "0.0.0.0"
    request_body_limit = 32768 # Post request body is limited to 16k
    shutdown_timeout = 30
    workers = 8
    
    # Secrets manager client to be used
    [secrets_management]
      secrets_manager = "no_encryption"
      [secrets_management.hc_vault]
        token = "vault_token"
        url = "http://vault:8200"
    
    
    # Encryption manager client to be used
    [encryption_management]
      encryption_manager = "no_encryption"
    
    [multitenancy]
      enabled = false
      [multitenancy.global_tenant]
        clickhouse_database = "default"
        redis_key_prefix = ""
        schema = "public"
      [multitenancy.tenants]
        [multitenancy.tenants.public]
          base_url = "http://localhost:8080"
          clickhouse_database = "default"
          redis_key_prefix = ""
          schema = "public"
    
    [user]
      base_url = "http://localhost:9000"
      force_two_factor_auth = false
      password_validity_in_days = "90"
      totp_issuer_name = "Hyperswitch Sandbox"
      two_factor_auth_expiry_in_secs = "300"
    
    
    [cell_information]
    id = "12345" # Default CellID for Global Cell Information
    
    
    [grpc_client.dynamic_routing_client] # Dynamic Routing Client Configuration
    host = "localhost" # Client Host
    port = 7000        # Client Port
    service = "dynamo" # Service name
    
    # Bank redirect configs for allowed banks
    [bank_config]
    eps.adyen.banks = "bank_austria,bawag_psk_ag,dolomitenbank,easybank_ag,erste_bank_und_sparkassen,hypo_tirol_bank_ag,posojilnica_bank_e_gen,raiffeisen_bankengruppe_osterreich,schoellerbank_ag,sparda_bank_wien,volksbank_gruppe,volkskreditbank_ag"
    eps.stripe.banks = "arzte_und_apotheker_bank,austrian_anadi_bank_ag,bank_austria,bankhaus_carl_spangler,bankhaus_schelhammer_und_schattera_ag,bawag_psk_ag,bks_bank_ag,brull_kallmus_bank_ag,btv_vier_lander_bank,capital_bank_grawe_gruppe_ag,dolomitenbank,easybank_ag,erste_bank_und_sparkassen,hypo_alpeadriabank_international_ag,hypo_noe_lb_fur_niederosterreich_u_wien,hypo_oberosterreich_salzburg_steiermark,hypo_tirol_bank_ag,hypo_vorarlberg_bank_ag,hypo_bank_burgenland_aktiengesellschaft,marchfelder_bank,oberbank_ag,raiffeisen_bankengruppe_osterreich,schoellerbank_ag,sparda_bank_wien,volksbank_gruppe,volkskreditbank_ag,vr_bank_braunau"
    ideal.adyen.banks = "abn_amro,asn_bank,bunq,ing,knab,n26,nationale_nederlanden,rabobank,regiobank,revolut,sns_bank,triodos_bank,van_lanschot,yoursafe"
    ideal.stripe.banks = "abn_amro,asn_bank,bunq,handelsbanken,ing,knab,moneyou,rabobank,regiobank,revolut,sns_bank,triodos_bank,van_lanschot"
    ideal.multisafepay.banks = "abn_amro, asn_bank, bunq, handelsbanken, nationale_nederlanden, n26, ing, knab, rabobank, regiobank, revolut, sns_bank,triodos_bank, van_lanschot, yoursafe"
    online_banking_czech_republic.adyen.banks = "ceska_sporitelna,komercni_banka,platnosc_online_karta_platnicza"
    online_banking_fpx.adyen.banks = "affin_bank,agro_bank,alliance_bank,am_bank,bank_islam,bank_muamalat,bank_rakyat,bank_simpanan_nasional,cimb_bank,hong_leong_bank,hsbc_bank,kuwait_finance_house,maybank,ocbc_bank,public_bank,rhb_bank,standard_chartered_bank,uob_bank"
    online_banking_fpx.fiuu.banks = "affin_bank,agro_bank,alliance_bank,am_bank,bank_of_china,bank_islam,bank_muamalat,bank_rakyat,bank_simpanan_nasional,cimb_bank,hong_leong_bank,hsbc_bank,kuwait_finance_house,maybank,ocbc_bank,public_bank,rhb_bank,standard_chartered_bank,uob_bank"
    online_banking_poland.adyen.banks = "blik_psp,place_zipko,m_bank,pay_with_ing,santander_przelew24,bank_pekaosa,bank_millennium,pay_with_alior_bank,banki_spoldzielcze,pay_with_inteligo,bnp_paribas_poland,bank_nowy_sa,credit_agricole,pay_with_bos,pay_with_citi_handlowy,pay_with_plus_bank,toyota_bank,velo_bank,e_transfer_pocztowy24"
    online_banking_slovakia.adyen.banks = "e_platby_vub,postova_banka,sporo_pay,tatra_pay,viamo"
    online_banking_thailand.adyen.banks = "bangkok_bank,krungsri_bank,krung_thai_bank,the_siam_commercial_bank,kasikorn_bank"
    open_banking_uk.adyen.banks = "aib,bank_of_scotland,danske_bank,first_direct,first_trust,halifax,lloyds,monzo,nat_west,nationwide_bank,royal_bank_of_scotland,starling,tsb_bank,tesco_bank,ulster_bank,barclays,hsbc_bank,revolut,santander_przelew24,open_bank_success,open_bank_failure,open_bank_cancelled"
    przelewy24.stripe.banks = "alior_bank,bank_millennium,bank_nowy_bfg_sa,bank_pekao_sa,banki_spbdzielcze,blik,bnp_paribas,boz,citi,credit_agricole,e_transfer_pocztowy24,getin_bank,idea_bank,inteligo,mbank_mtransfer,nest_przelew,noble_pay,pbac_z_ipko,plus_bank,santander_przelew24,toyota_bank,volkswagen_bank"
    
    [connector_customer]
    connector_list = "stax,stripe,gocardless"
    payout_connector_list = "stripe,wise"
    
    # Connector configuration, provided attributes will be used to fulfill API requests.
    # Examples provided here are sandbox/test base urls, can be replaced by live or mock
    # base urls based on your need.
    # Note: These are not optional attributes. hyperswitch request can fail due to invalid/empty values.
    [connectors]
    aci.base_url = "https://eu-test.oppwa.com/"
    adyen.base_url = "https://checkout-test.adyen.com/"
    adyen.payout_base_url = "https://pal-test.adyen.com/"
    adyen.dispute_base_url = "https://ca-test.adyen.com/"
    adyenplatform.base_url = "https://balanceplatform-api-test.adyen.com/"
    airwallex.base_url = "https://api-demo.airwallex.com/"
    amazonpay.base_url = "https://pay-api.amazon.com/v2"
    applepay.base_url = "https://apple-pay-gateway.apple.com/"
    authorizedotnet.base_url = "https://apitest.authorize.net/xml/v1/request.api"
    bambora.base_url = "https://api.na.bambora.com"
    bamboraapac.base_url = "https://demo.ippayments.com.au/interface/api"
    bankofamerica.base_url = "https://apitest.merchant-services.bankofamerica.com/"
    billwerk.base_url = "https://api.reepay.com/"
    billwerk.secondary_base_url = "https://card.reepay.com/"
    bitpay.base_url = "https://test.bitpay.com"
    bluesnap.base_url = "https://sandbox.bluesnap.com/"
    bluesnap.secondary_base_url = "https://sandpay.bluesnap.com/"
    boku.base_url = "https://$-api4-stage.boku.com"
    braintree.base_url = "https://payments.sandbox.braintree-api.com/graphql"
    cashtocode.base_url = "https://cluster05.api-test.cashtocode.com"
    checkout.base_url = "https://api.sandbox.checkout.com/"
    coinbase.base_url = "https://api.commerce.coinbase.com"
    cryptopay.base_url = "https://business-sandbox.cryptopay.me"
    cybersource.base_url = "https://apitest.cybersource.com/"
    datatrans.base_url = "https://api.sandbox.datatrans.com/"
    deutschebank.base_url = "https://testmerch.directpos.de/rest-api"
    digitalvirgo.base_url = "https://dcb-integration-service-sandbox-external.staging.digitalvirgo.pl"
    dlocal.base_url = "https://sandbox.dlocal.com/"
    dummyconnector.base_url = "http://localhost:8080/dummy-connector"
    ebanx.base_url = "https://sandbox.ebanxpay.com/"
    elavon.base_url = "https://api.demo.convergepay.com"
    fiserv.base_url = "https://cert.api.fiservapps.com/"
    fiservemea.base_url = "https://prod.emea.api.fiservapps.com/sandbox"
    fiuu.base_url = "https://sandbox.merchant.razer.com/"
    fiuu.secondary_base_url="https://sandbox.merchant.razer.com/"
    fiuu.third_base_url="https://api.merchant.razer.com/"
    forte.base_url = "https://sandbox.forte.net/api/v3"
    globalpay.base_url = "https://apis.sandbox.globalpay.com/ucp/"
    globepay.base_url = "https://pay.globepay.co/"
    gocardless.base_url = "https://api-sandbox.gocardless.com"
    gpayments.base_url = "https://{{merchant_endpoint_prefix}}-test.api.as1.gpayments.net"
    helcim.base_url = "https://api.helcim.com/"
    iatapay.base_url = "https://sandbox.iata-pay.iata.org/api/v1"
    itaubank.base_url = "https://sandbox.devportal.itau.com.br/"
    jpmorgan.base_url = "https://api-mock.payments.jpmorgan.com/api/v2"
    klarna.base_url = "https://api{{klarna_region}}.playground.klarna.com/"
    mifinity.base_url = "https://demo.mifinity.com/"
    mollie.base_url = "https://api.mollie.com/v2/"
    mollie.secondary_base_url = "https://api.cc.mollie.com/v1/"
    multisafepay.base_url = "https://testapi.multisafepay.com/"
    nexinets.base_url = "https://apitest.payengine.de/v1"
    nexixpay.base_url = "https://xpaysandbox.nexigroup.com/api/phoenix-0.0/psp/api/v1"
    nmi.base_url = "https://secure.nmi.com/"
    nomupay.base_url = "https://payout-api.sandbox.nomupay.com"
    noon.base_url = "https://api-test.noonpayments.com/"
    noon.key_mode = "Test"
    novalnet.base_url = "https://payport.novalnet.de/v2"
    nuvei.base_url = "https://ppp-test.nuvei.com/"
    opayo.base_url = "https://pi-test.sagepay.com/"
    opennode.base_url = "https://dev-api.opennode.com"
    paybox.base_url = "https://preprod-ppps.paybox.com/PPPS.php"
    paybox.secondary_base_url="https://preprod-tpeweb.paybox.com/"
    payeezy.base_url = "https://api-cert.payeezy.com/"
    payme.base_url = "https://sandbox.payme.io/"
    payone.base_url = "https://payment.preprod.payone.com/"
    paypal.base_url = "https://api-m.sandbox.paypal.com/"
    payu.base_url = "https://secure.snd.payu.com/"
    placetopay.base_url = "https://test.placetopay.com/rest/gateway"
    plaid.base_url = "https://sandbox.plaid.com"
    powertranz.base_url = "https://staging.ptranz.com/api/"
    prophetpay.base_url = "https://ccm-thirdparty.cps.golf/"
    rapyd.base_url = "https://sandboxapi.rapyd.net"
    razorpay.base_url = "https://sandbox.juspay.in/"
    riskified.base_url = "https://sandbox.riskified.com/api"
    shift4.base_url = "https://api.shift4.com/"
    signifyd.base_url = "https://api.signifyd.com/"
    square.base_url = "https://connect.squareupsandbox.com/"
    square.secondary_base_url = "https://pci-connect.squareupsandbox.com/"
    stax.base_url = "https://apiprod.fattlabs.com/"
    stripe.base_url = "https://api.stripe.com/"
    stripe.base_url_file_upload = "https://files.stripe.com/"
    taxjar.base_url = "https://api.sandbox.taxjar.com/v2/"
    thunes.base_url = "https://api.limonetikqualif.com/"
    trustpay.base_url = "https://test-tpgw.trustpay.eu/"
    trustpay.base_url_bank_redirects = "https://aapi.trustpay.eu/"
    tsys.base_url = "https://stagegw.transnox.com/"
    volt.base_url = "https://api.sandbox.volt.io/"
    wellsfargo.base_url = "https://apitest.cybersource.com/"
    wellsfargopayout.base_url = "https://api-sandbox.wellsfargo.com/"
    wise.base_url = "https://api.sandbox.transferwise.tech/"
    worldline.base_url = "https://eu.sandbox.api-ingenico.com/"
    worldpay.base_url = "https://try.access.worldpay.com/"
    zen.base_url = "https://api.zen-test.com/"
    zen.secondary_base_url = "https://secure.zen-test.com/"
    zsl.base_url = "https://api.sitoffalb.net/"
    threedsecureio.base_url = "https://service.sandbox.3dsecure.io"
    netcetera.base_url = "https://{{merchant_endpoint_prefix}}.3ds-server.prev.netcetera-cloud-payment.ch"
    
    [delayed_session_response]
    connectors_with_delayed_session_response = "trustpay,payme" # List of connectors which have delayed session response
    
    [dummy_connector]
    enabled = true                                                          # Whether dummy connector is enabled or not
    assets_base_url = "https://app.hyperswitch.io/assets/TestProcessor/"    # Base url for dummy connector assets
    authorize_ttl = 36000                                                   # Time to live for dummy connector authorize request in redis
    default_return_url = "https://app.hyperswitch.io/"                      # Default return url when no return url is passed while payment
    discord_invite_url = "https://discord.gg/wJZ7DVW8mm"                    # Discord invite url for hyperswitch
    payment_complete_duration = 500                                         # Fake delay duration for dummy connector payment complete
    payment_complete_tolerance = 100                                        # Fake delay tolerance for dummy connector payment complete
    payment_duration = 1000                                                 # Fake delay duration for dummy connector payment
    payment_retrieve_duration = 500                                         # Fake delay duration for dummy connector payment sync
    payment_retrieve_tolerance = 100                                        # Fake delay tolerance for dummy connector payment sync
    payment_tolerance = 100                                                 # Fake delay tolerance for dummy connector payment
    payment_ttl = 172800                                                    # Time to live for dummy connector payment in redis
    refund_duration = 1000                                                  # Fake delay duration for dummy connector refund
    refund_retrieve_duration = 500                                          # Fake delay duration for dummy connector refund sync
    refund_retrieve_tolerance = 100                                         # Fake delay tolerance for dummy connector refund sync
    refund_tolerance = 100                                                  # Fake delay tolerance for dummy connector refund
    refund_ttl = 172800                                                     # Time to live for dummy connector refund in redis
    slack_invite_url = "https://join.slack.com/t/hyperswitch-io/shared_invite/zt-2awm23agh-p_G5xNpziv6yAiedTkkqLg"    # Slack invite url for hyperswitch
    
    
    
    [frm]
    enabled = true
    
    [mandates.supported_payment_methods]
    bank_debit.ach = { connector_list = "gocardless,adyen" }                 # Mandate supported payment method type and connector for bank_debit
    bank_debit.becs = { connector_list = "gocardless" }                      # Mandate supported payment method type and connector for bank_debit
    bank_debit.bacs = { connector_list = "adyen" }                           # Mandate supported payment method type and connector for bank_debit
    bank_debit.sepa = { connector_list = "gocardless,adyen" }                # Mandate supported payment method type and connector for bank_debit
    card.credit.connector_list = "stripe,adyen,authorizedotnet,cybersource,globalpay,worldpay,multisafepay,nmi,nexinets,noon,bankofamerica,braintree"     # Mandate supported payment method type and connector for card
    card.debit.connector_list = "stripe,adyen,authorizedotnet,cybersource,globalpay,worldpay,multisafepay,nmi,nexinets,noon,bankofamerica,braintree"      # Mandate supported payment method type and connector for card
    pay_later.klarna.connector_list = "adyen"                       # Mandate supported payment method type and connector for pay_later
    wallet.apple_pay.connector_list = "stripe,adyen,cybersource,noon,bankofamerica"         # Mandate supported payment method type and connector for wallets
    wallet.google_pay.connector_list = "stripe,adyen,cybersource,bankofamerica"             # Mandate supported payment method type and connector for wallets
    wallet.paypal.connector_list = "adyen"                          # Mandate supported payment method type and connector for wallets
    bank_redirect.ideal.connector_list = "stripe,adyen,globalpay,multisafepay"   # Mandate supported payment method type and connector for bank_redirect
    bank_redirect.sofort.connector_list = "stripe,adyen,globalpay"  # Mandate supported payment method type and connector for bank_redirect
    bank_redirect.giropay.connector_list = "adyen,globalpay,multisafepay"        # Mandate supported payment method type and connector for bank_redirect
    
    [mandates.update_mandate_supported]
    card.credit = { connector_list = "cybersource" }            # Update Mandate supported payment method type and connector for card 
    card.debit = { connector_list = "cybersource" }             # Update Mandate supported payment method type and connector for card 
    
    [network_transaction_id_supported_connectors]
    connector_list = "stripe,adyen,cybersource"
    
    
    [payouts]
    payout_eligibility = true               # Defaults the eligibility of a payout method to true in case connector does not provide checks for payout eligibility
    
    #Payment Method Filters Based on Country and Currency
    [pm_filters.default]
    ach = { country = "US", currency = "USD" }
    affirm = { country = "US", currency = "USD" }
    afterpay_clearpay = { country = "AU,NZ,ES,GB,FR,IT,CA,US", currency = "GBP" }
    ali_pay = { country = "AU,JP,HK,SG,MY,TH,ES,GB,SE,NO,AT,NL,DE,CY,CH,BE,FR,DK,FI,RO,MT,SI,GR,PT,IE,IT,CA,US", currency = "USD,EUR,GBP,JPY,AUD,SGD,CHF,SEK,NOK,NZD,THB,HKD,CAD" }
    apple_pay = { country = "AU,CN,HK,JP,MO,MY,NZ,SG,TW,AM,AT,AZ,BY,BE,BG,HR,CY,CZ,DK,EE,FO,FI,FR,GE,DE,GR,GL,GG,HU,IS,IE,IM,IT,KZ,JE,LV,LI,LT,LU,MT,MD,MC,ME,NL,NO,PL,PT,RO,SM,RS,SK,SI,ES,SE,CH,UA,GB,AR,CO,CR,BR,MX,PE,BH,IL,JO,KW,PS,QA,SA,AE,CA,UM,US,KR,VN,MA,ZA,VA,CL,SV,GT,HN,PA", currency = "AED,AUD,CHF,CAD,EUR,GBP,HKD,SGD,USD" }
    bacs = { country = "GB", currency = "GBP" }
    bancontact_card = { country = "BE", currency = "EUR" }
    blik = { country = "PL", currency = "PLN" }
    eps = { country = "AT", currency = "EUR" }
    giropay = { country = "DE", currency = "EUR" }
    google_pay = { country = "AU,NZ,JP,HK,SG,MY,TH,VN,BH,AE,KW,BR,ES,GB,SE,NO,SK,AT,NL,DE,HU,CY,LU,CH,BE,FR,DK,RO,HR,LI,MT,SI,GR,PT,IE,CZ,EE,LT,LV,IT,PL,TR,IS,CA,US", currency = "AED,ALL,AMD,ANG,AOA,ARS,AUD,AWG,AZN,BAM,BBD,BDT,BGN,BHD,BMD,BND,BOB,BRL,BSD,BWP,BYN,BZD,CAD,CHF,CLP,CNY,COP,CRC,CUP,CVE,CZK,DJF,DKK,DOP,DZD,EGP,ETB,EUR,FJD,FKP,GBP,GEL,GHS,GIP,GMD,GNF,GTQ,GYD,HKD,HNL,HTG,HUF,IDR,ILS,INR,IQD,JMD,JOD,JPY,KES,KGS,KHR,KMF,KRW,KWD,KYD,KZT,LAK,LBP,LKR,LYD,MAD,MDL,MKD,MMK,MNT,MOP,MRU,MUR,MVR,MWK,MXN,MYR,MZN,NAD,NGN,NIO,NOK,NPR,NZD,OMR,PAB,PEN,PGK,PHP,PKR,PLN,PYG,QAR,RON,RSD,RUB,RWF,SAR,SBD,SCR,SEK,SGD,SHP,SLE,SOS,SRD,STN,SVC,SZL,THB,TND,TOP,TRY,TTD,TWD,TZS,UAH,UGX,USD,UYU,UZS,VES,VND,VUV,WST,XAF,XCD,XOF,XPF,YER,ZAR,ZMW" }
    ideal = { country = "NL", currency = "EUR" }
    klarna = { country = "AT,ES,GB,SE,NO,AT,NL,DE,CH,BE,FR,DK,FI,PT,IE,IT,PL,CA,US", currency = "USD,GBP,EUR,CHF,DKK,SEK,NOK,AUD,PLN,CAD" }
    mb_way = { country = "PT", currency = "EUR" }
    mobile_pay = { country = "DK,FI", currency = "DKK,SEK,NOK,EUR" }
    online_banking_czech_republic = { country = "CZ", currency = "EUR,CZK" }
    online_banking_finland = { country = "FI", currency = "EUR" }
    online_banking_poland = { country = "PL", currency = "PLN" }
    online_banking_slovakia = { country = "SK", currency = "EUR,CZK" }
    pay_bright = { country = "CA", currency = "CAD" }
    paypal = { country = "AU,NZ,CN,JP,HK,MY,TH,KR,PH,ID,AE,KW,BR,ES,GB,SE,NO,SK,AT,NL,DE,HU,CY,LU,CH,BE,FR,DK,FI,RO,HR,UA,MT,SI,GI,PT,IE,CZ,EE,LT,LV,IT,PL,IS,CA,US", currency = "AUD,BRL,CAD,CZK,DKK,EUR,HKD,HUF,INR,JPY,MYR,MXN,NZD,NOK,PHP,PLN,RUB,GBP,SGD,SEK,CHF,THB,USD" }
    sepa = { country = "ES,SK,AT,NL,DE,BE,FR,FI,PT,IE,EE,LT,LV,IT", currency = "EUR" }
    sofort = { country = "ES,GB,SE,AT,NL,DE,CH,BE,FR,FI,IT,PL", currency = "EUR" }
    trustly = { country = "ES,GB,SE,NO,AT,NL,DE,DK,FI,EE,LT,LV", currency = "CZK,DKK,EUR,GBP,NOK,SEK" }
    walley = { country = "SE,NO,DK,FI", currency = "DKK,EUR,NOK,SEK" }
    we_chat_pay = { country = "AU,NZ,CN,JP,HK,SG,ES,GB,SE,NO,AT,NL,DE,CY,CH,BE,FR,DK,LI,MT,SI,GR,PT,IT,CA,US", currency = "AUD,CAD,CNY,EUR,GBP,HKD,JPY,NZD,SGD,USD" }
    
    [pm_filters.adyen]
    ach = { country = "US", currency = "USD" }
    affirm = { country = "US", currency = "USD" }
    afterpay_clearpay = { country = "US,CA,GB,AU,NZ", currency = "GBP,AUD,NZD,CAD,USD" }
    alfamart = { country = "ID", currency = "IDR" }
    ali_pay = { country = "AU,JP,HK,SG,MY,TH,ES,GB,SE,NO,AT,NL,DE,CY,CH,BE,FR,DK,FI,RO,MT,SI,GR,PT,IE,IT,CA,US", currency = "USD,EUR,GBP,JPY,AUD,SGD,CHF,SEK,NOK,NZD,THB,HKD,CAD" }
    ali_pay_hk = { country = "HK", currency = "HKD" }
    alma = { country = "FR", currency = "EUR" }
    apple_pay = { country = "AU,NZ,CN,JP,HK,SG,MY,BH,AE,KW,BR,ES,GB,SE,NO,AT,NL,DE,HU,CY,LU,CH,BE,FR,DK,FI,RO,HR,LI,UA,MT,SI,GR,PT,IE,CZ,EE,LT,LV,IT,PL,IS,CA,US", currency = "AUD,CHF,CAD,EUR,GBP,HKD,SGD,USD,MYR" }
    atome = { country = "MY,SG", currency = "MYR,SGD" }
    bacs = { country = "GB", currency = "GBP" }
    bancontact_card = { country = "BE", currency = "EUR" }
    bca_bank_transfer = { country = "ID", currency = "IDR" }
    bizum = { country = "ES", currency = "EUR" }
    blik = { country = "PL", currency = "PLN" }
    bni_va = { country = "ID", currency = "IDR" }
    boleto = { country = "BR", currency = "BRL" }
    bri_va = { country = "ID", currency = "IDR" }
    cimb_va = { country = "ID", currency = "IDR" }
    dana = { country = "ID", currency = "IDR" }
    danamon_va = { country = "ID", currency = "IDR" }
    eps = { country = "AT", currency = "EUR" }
    family_mart = { country = "JP", currency = "JPY" }
    gcash = { country = "PH", currency = "PHP" }
    giropay = { country = "DE", currency = "EUR" }
    go_pay = { country = "ID", currency = "IDR" }
    google_pay = { country = "AU,NZ,JP,HK,SG,MY,TH,VN,BH,AE,KW,BR,ES,GB,SE,NO,SK,AT,NL,DE,HU,CY,LU,CH,BE,FR,DK,RO,HR,LI,MT,SI,GR,PT,IE,CZ,EE,LT,LV,IT,PL,TR,IS,CA,US", currency = "AED,ALL,AMD,ANG,AOA,ARS,AUD,AWG,AZN,BAM,BBD,BDT,BGN,BHD,BMD,BND,BOB,BRL,BSD,BWP,BYN,BZD,CAD,CHF,CLP,CNY,COP,CRC,CUP,CVE,CZK,DJF,DKK,DOP,DZD,EGP,ETB,EUR,FJD,FKP,GBP,GEL,GHS,GIP,GMD,GNF,GTQ,GYD,HKD,HNL,HTG,HUF,IDR,ILS,INR,IQD,JMD,JOD,JPY,KES,KGS,KHR,KMF,KRW,KWD,KYD,KZT,LAK,LBP,LKR,LYD,MAD,MDL,MKD,MMK,MNT,MOP,MRU,MUR,MVR,MWK,MXN,MYR,MZN,NAD,NGN,NIO,NOK,NPR,NZD,OMR,PAB,PEN,PGK,PHP,PKR,PLN,PYG,QAR,RON,RSD,RUB,RWF,SAR,SBD,SCR,SEK,SGD,SHP,SLE,SOS,SRD,STN,SVC,SZL,THB,TND,TOP,TRY,TTD,TWD,TZS,UAH,UGX,USD,UYU,UZS,VES,VND,VUV,WST,XAF,XCD,XOF,XPF,YER,ZAR,ZMW" }
    ideal = { country = "NL", currency = "EUR" }
    indomaret = { country = "ID", currency = "IDR" }
    kakao_pay = { country = "KR", currency = "KRW" }
    klarna = { country = "AU,AT,BE,CA,CZ,DK,FI,FR,DE,GR,IE,IT,NO,PL,PT,RO,ES,SE,CH,NL,GB,US", currency = "AUD,EUR,CAD,CZK,DKK,NOK,PLN,RON,SEK,CHF,GBP,USD" }
    lawson = { country = "JP", currency = "JPY" }
    mandiri_va = { country = "ID", currency = "IDR" }
    mb_way = { country = "PT", currency = "EUR" }
    mini_stop = { country = "JP", currency = "JPY" }
    mobile_pay = { country = "DK,FI", currency = "DKK,SEK,NOK,EUR" }
    momo = { country = "VN", currency = "VND" }
    momo_atm = { country = "VN", currency = "VND" }
    online_banking_czech_republic = { country = "CZ", currency = "EUR,CZK" }
    online_banking_finland = { country = "FI", currency = "EUR" }
    online_banking_fpx = { country = "MY", currency = "MYR" }
    online_banking_poland = { country = "PL", currency = "PLN" }
    online_banking_slovakia = { country = "SK", currency = "EUR,CZK" }
    online_banking_thailand = { country = "TH", currency = "THB" }
    open_banking_uk = { country = "GB", currency = "GBP" }
    oxxo = { country = "MX", currency = "MXN" }
    pay_bright = { country = "CA", currency = "CAD" }
    pay_easy = { country = "JP", currency = "JPY" }
    pay_safe_card = { country = "AT,AU,BE,BR,BE,CA,HR,CY,CZ,DK,FI,FR,GE,DE,GI,HU,IS,IE,KW,LV,IE,LI,LT,LU,MT,MX,MD,ME,NL,NZ,NO,PY,PE,PL,PT,RO,SA,RS,SK,SI,ES,SE,CH,TR,AE,GB,US,UY", currency = "EUR,AUD,BRL,CAD,CZK,DKK,GEL,GIP,HUF,KWD,CHF,MXN,MDL,NZD,NOK,PYG,PEN,PLN,RON,SAR,RSD,SEK,TRY,AED,GBP,USD,UYU" }
    paypal = { country = "AU,NZ,CN,JP,HK,MY,TH,KR,PH,ID,AE,KW,BR,ES,GB,SE,NO,SK,AT,NL,DE,HU,CY,LU,CH,BE,FR,DK,FI,RO,HR,UA,MT,SI,GI,PT,IE,CZ,EE,LT,LV,IT,PL,IS,CA,US", currency = "AUD,BRL,CAD,CZK,DKK,EUR,HKD,HUF,INR,JPY,MYR,MXN,NZD,NOK,PHP,PLN,RUB,GBP,SGD,SEK,CHF,THB,USD" }
    permata_bank_transfer = { country = "ID", currency = "IDR" }
    seicomart = { country = "JP", currency = "JPY" }
    sepa = { country = "ES,SK,AT,NL,DE,BE,FR,FI,PT,IE,EE,LT,LV,IT", currency = "EUR" }
    seven_eleven = { country = "JP", currency = "JPY" }
    sofort = { country = "AT,BE,DE,ES,CH,NL", currency = "CHF,EUR" }
    swish = { country = "SE", currency = "SEK" }
    touch_n_go = { country = "MY", currency = "MYR" }
    trustly = { country = "ES,GB,SE,NO,AT,NL,DE,DK,FI,EE,LT,LV", currency = "CZK,DKK,EUR,GBP,NOK,SEK" }
    twint = { country = "CH", currency = "CHF" }
    vipps = { country = "NO", currency = "NOK" }
    walley = { country = "SE,NO,DK,FI", currency = "DKK,EUR,NOK,SEK" }
    we_chat_pay = { country = "AU,NZ,CN,JP,HK,SG,ES,GB,SE,NO,AT,NL,DE,CY,CH,BE,FR,DK,LI,MT,SI,GR,PT,IT,CA,US", currency = "AUD,CAD,CNY,EUR,GBP,HKD,JPY,NZD,SGD,USD" }
    pix = { country = "BR", currency = "BRL" }
    
    [pm_filters.authorizedotnet]
    google_pay.currency = "CHF,DKK,EUR,GBP,NOK,PLN,SEK,USD,AUD,NZD,CAD"
    paypal.currency = "CHF,DKK,EUR,GBP,NOK,PLN,SEK,USD,AUD,NZD,CAD"
    
    [pm_filters.bankofamerica]
    credit = { currency = "USD" }
    debit = { currency = "USD" }
    apple_pay = { currency = "USD" }
    google_pay = { currency = "USD" }
    
    [pm_filters.cybersource]
    credit = { currency = "USD,GBP,EUR" }
    debit = { currency = "USD,GBP,EUR" }
    apple_pay = { currency = "USD,GBP,EUR" }
    google_pay = { currency = "USD,GBP,EUR" }
    samsung_pay = { currency = "USD,GBP,EUR" }
    paze = { currency = "USD" }
    
    [pm_filters.nexixpay]
    credit = { country = "AT,BE,CY,EE,FI,FR,DE,GR,IE,IT,LV,LT,LU,MT,NL,PT,SK,SI,ES,BG,HR,DK,GB,NO,PL,CZ,RO,SE,CH,HU", currency = "ARS,AUD,BHD,CAD,CLP,CNY,COP,HRK,CZK,DKK,HKD,HUF,INR,JPY,KZT,JOD,KRW,KWD,MYR,MXN,NGN,NOK,PHP,QAR,RUB,SAR,SGD,VND,ZAR,SEK,CHF,THB,AED,EGP,GBP,USD,TWD,BYN,RSD,AZN,RON,TRY,AOA,BGN,EUR,UAH,PLN,BRL" }
    debit = { country = "AT,BE,CY,EE,FI,FR,DE,GR,IE,IT,LV,LT,LU,MT,NL,PT,SK,SI,ES,BG,HR,DK,GB,NO,PL,CZ,RO,SE,CH,HU", currency = "ARS,AUD,BHD,CAD,CLP,CNY,COP,HRK,CZK,DKK,HKD,HUF,INR,JPY,KZT,JOD,KRW,KWD,MYR,MXN,NGN,NOK,PHP,QAR,RUB,SAR,SGD,VND,ZAR,SEK,CHF,THB,AED,EGP,GBP,USD,TWD,BYN,RSD,AZN,RON,TRY,AOA,BGN,EUR,UAH,PLN,BRL" }
    
    [pm_filters.novalnet]
    credit = { country = "AD,AE,AL,AM,AR,AT,AU,AZ,BA,BB,BD,BE,BG,BH,BI,BM,BN,BO,BR,BS,BW,BY,BZ,CA,CD,CH,CL,CN,CO,CR,CU,CY,CZ,DE,DJ,DK,DO,DZ,EE,EG,ET,ES,FI,FJ,FR,GB,GE,GH,GI,GM,GR,GT,GY,HK,HN,HR,HU,ID,IE,IL,IN,IS,IT,JM,JO,JP,KE,KH,KR,KW,KY,KZ,LB,LK,LT,LV,LY,MA,MC,MD,ME,MG,MK,MN,MO,MT,MV,MW,MX,MY,NG,NI,NO,NP,NL,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SB,SC,SE,SG,SH,SI,SK,SL,SO,SM,SR,ST,SV,SY,TH,TJ,TN,TO,TR,TW,TZ,UA,UG,US,UY,UZ,VE,VA,VN,VU,WS,CF,AG,DM,GD,KN,LC,VC,YE,ZA,ZM", currency = "AED,ALL,AMD,ARS,AUD,AZN,BAM,BBD,BDT,BGN,BHD,BIF,BMD,BND,BOB,BRL,BSD,BWP,BYN,BZD,CAD,CDF,CHF,CLP,CNY,COP,CRC,CUP,CZK,DJF,DKK,DOP,DZD,EGP,ETB,EUR,FJD,GBP,GEL,GHS,GIP,GMD,GTQ,GYD,HKD,HNL,HRK,HUF,IDR,ILS,INR,ISK,JMD,JOD,JPY,KES,KHR,KRW,KWD,KYD,KZT,LBP,LKR,LYD,MAD,MDL,MGA,MKD,MNT,MOP,MVR,MWK,MXN,MYR,NGN,NIO,NOK,NPR,NZD,OMR,PAB,PEN,PGK,PHP,PKR,PLN,PYG,QAR,RON,RSD,RUB,RWF,SAR,SBD,SCR,SEK,SGD,SHP,SLL,SOS,SRD,STN,SVC,SYP,THB,TJS,TND,TOP,TRY,TWD,TZS,UAH,UGX,USD,UYU,UZS,VES,VND,VUV,WST,XAF,XCD,YER,ZAR,ZMW"}
    debit = { country = "AD,AE,AL,AM,AR,AT,AU,AZ,BA,BB,BD,BE,BG,BH,BI,BM,BN,BO,BR,BS,BW,BY,BZ,CA,CD,CH,CL,CN,CO,CR,CU,CY,CZ,DE,DJ,DK,DO,DZ,EE,EG,ET,ES,FI,FJ,FR,GB,GE,GH,GI,GM,GR,GT,GY,HK,HN,HR,HU,ID,IE,IL,IN,IS,IT,JM,JO,JP,KE,KH,KR,KW,KY,KZ,LB,LK,LT,LV,LY,MA,MC,MD,ME,MG,MK,MN,MO,MT,MV,MW,MX,MY,NG,NI,NO,NP,NL,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SB,SC,SE,SG,SH,SI,SK,SL,SO,SM,SR,ST,SV,SY,TH,TJ,TN,TO,TR,TW,TZ,UA,UG,US,UY,UZ,VE,VA,VN,VU,WS,CF,AG,DM,GD,KN,LC,VC,YE,ZA,ZM", currency = "AED,ALL,AMD,ARS,AUD,AZN,BAM,BBD,BDT,BGN,BHD,BIF,BMD,BND,BOB,BRL,BSD,BWP,BYN,BZD,CAD,CDF,CHF,CLP,CNY,COP,CRC,CUP,CZK,DJF,DKK,DOP,DZD,EGP,ETB,EUR,FJD,GBP,GEL,GHS,GIP,GMD,GTQ,GYD,HKD,HNL,HRK,HUF,IDR,ILS,INR,ISK,JMD,JOD,JPY,KES,KHR,KRW,KWD,KYD,KZT,LBP,LKR,LYD,MAD,MDL,MGA,MKD,MNT,MOP,MVR,MWK,MXN,MYR,NGN,NIO,NOK,NPR,NZD,OMR,PAB,PEN,PGK,PHP,PKR,PLN,PYG,QAR,RON,RSD,RUB,RWF,SAR,SBD,SCR,SEK,SGD,SHP,SLL,SOS,SRD,STN,SVC,SYP,THB,TJS,TND,TOP,TRY,TWD,TZS,UAH,UGX,USD,UYU,UZS,VES,VND,VUV,WST,XAF,XCD,YER,ZAR,ZMW"}
    apple_pay = { country = "AD,AE,AL,AM,AR,AT,AU,AZ,BA,BB,BD,BE,BG,BH,BI,BM,BN,BO,BR,BS,BW,BY,BZ,CA,CD,CH,CL,CN,CO,CR,CU,CY,CZ,DE,DJ,DK,DO,DZ,EE,EG,ET,ES,FI,FJ,FR,GB,GE,GH,GI,GM,GR,GT,GY,HK,HN,HR,HU,ID,IE,IL,IN,IS,IT,JM,JO,JP,KE,KH,KR,KW,KY,KZ,LB,LK,LT,LV,LY,MA,MC,MD,ME,MG,MK,MN,MO,MT,MV,MW,MX,MY,NG,NI,NO,NP,NL,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SB,SC,SE,SG,SH,SI,SK,SL,SO,SM,SR,ST,SV,SY,TH,TJ,TN,TO,TR,TW,TZ,UA,UG,US,UY,UZ,VE,VA,VN,VU,WS,CF,AG,DM,GD,KN,LC,VC,YE,ZA,ZM", currency = "AED,ALL,AMD,ARS,AUD,AZN,BAM,BBD,BDT,BGN,BHD,BIF,BMD,BND,BOB,BRL,BSD,BWP,BYN,BZD,CAD,CDF,CHF,CLP,CNY,COP,CRC,CUP,CZK,DJF,DKK,DOP,DZD,EGP,ETB,EUR,FJD,GBP,GEL,GHS,GIP,GMD,GTQ,GYD,HKD,HNL,HRK,HUF,IDR,ILS,INR,ISK,JMD,JOD,JPY,KES,KHR,KRW,KWD,KYD,KZT,LBP,LKR,LYD,MAD,MDL,MGA,MKD,MNT,MOP,MVR,MWK,MXN,MYR,NGN,NIO,NOK,NPR,NZD,OMR,PAB,PEN,PGK,PHP,PKR,PLN,PYG,QAR,RON,RSD,RUB,RWF,SAR,SBD,SCR,SEK,SGD,SHP,SLL,SOS,SRD,STN,SVC,SYP,THB,TJS,TND,TOP,TRY,TWD,TZS,UAH,UGX,USD,UYU,UZS,VES,VND,VUV,WST,XAF,XCD,YER,ZAR,ZMW"}
    google_pay = { country = "AD,AE,AL,AM,AR,AT,AU,AZ,BA,BB,BD,BE,BG,BH,BI,BM,BN,BO,BR,BS,BW,BY,BZ,CA,CD,CH,CL,CN,CO,CR,CU,CY,CZ,DE,DJ,DK,DO,DZ,EE,EG,ET,ES,FI,FJ,FR,GB,GE,GH,GI,GM,GR,GT,GY,HK,HN,HR,HU,ID,IE,IL,IN,IS,IT,JM,JO,JP,KE,KH,KR,KW,KY,KZ,LB,LK,LT,LV,LY,MA,MC,MD,ME,MG,MK,MN,MO,MT,MV,MW,MX,MY,NG,NI,NO,NP,NL,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SB,SC,SE,SG,SH,SI,SK,SL,SO,SM,SR,ST,SV,SY,TH,TJ,TN,TO,TR,TW,TZ,UA,UG,US,UY,UZ,VE,VA,VN,VU,WS,CF,AG,DM,GD,KN,LC,VC,YE,ZA,ZM", currency = "AED,ALL,AMD,ARS,AUD,AZN,BAM,BBD,BDT,BGN,BHD,BIF,BMD,BND,BOB,BRL,BSD,BWP,BYN,BZD,CAD,CDF,CHF,CLP,CNY,COP,CRC,CUP,CZK,DJF,DKK,DOP,DZD,EGP,ETB,EUR,FJD,GBP,GEL,GHS,GIP,GMD,GTQ,GYD,HKD,HNL,HRK,HUF,IDR,ILS,INR,ISK,JMD,JOD,JPY,KES,KHR,KRW,KWD,KYD,KZT,LBP,LKR,LYD,MAD,MDL,MGA,MKD,MNT,MOP,MVR,MWK,MXN,MYR,NGN,NIO,NOK,NPR,NZD,OMR,PAB,PEN,PGK,PHP,PKR,PLN,PYG,QAR,RON,RSD,RUB,RWF,SAR,SBD,SCR,SEK,SGD,SHP,SLL,SOS,SRD,STN,SVC,SYP,THB,TJS,TND,TOP,TRY,TWD,TZS,UAH,UGX,USD,UYU,UZS,VES,VND,VUV,WST,XAF,XCD,YER,ZAR,ZMW"}
    paypal = { country = "AD,AE,AL,AM,AR,AT,AU,AZ,BA,BB,BD,BE,BG,BH,BI,BM,BN,BO,BR,BS,BW,BY,BZ,CA,CD,CH,CL,CN,CO,CR,CU,CY,CZ,DE,DJ,DK,DO,DZ,EE,EG,ET,ES,FI,FJ,FR,GB,GE,GH,GI,GM,GR,GT,GY,HK,HN,HR,HU,ID,IE,IL,IN,IS,IT,JM,JO,JP,KE,KH,KR,KW,KY,KZ,LB,LK,LT,LV,LY,MA,MC,MD,ME,MG,MK,MN,MO,MT,MV,MW,MX,MY,NG,NI,NO,NP,NL,NZ,OM,PA,PE,PG,PH,PK,PL,PT,PY,QA,RO,RS,RU,RW,SA,SB,SC,SE,SG,SH,SI,SK,SL,SO,SM,SR,ST,SV,SY,TH,TJ,TN,TO,TR,TW,TZ,UA,UG,US,UY,UZ,VE,VA,VN,VU,WS,CF,AG,DM,GD,KN,LC,VC,YE,ZA,ZM", currency = "AED,ALL,AMD,ARS,AUD,AZN,BAM,BBD,BDT,BGN,BHD,BIF,BMD,BND,BOB,BRL,BSD,BWP,BYN,BZD,CAD,CDF,CHF,CLP,CNY,COP,CRC,CUP,CZK,DJF,DKK,DOP,DZD,EGP,ETB,EUR,FJD,GBP,GEL,GHS,GIP,GMD,GTQ,GYD,HKD,HNL,HRK,HUF,IDR,ILS,INR,ISK,JMD,JOD,JPY,KES,KHR,KRW,KWD,KYD,KZT,LBP,LKR,LYD,MAD,MDL,MGA,MKD,MNT,MOP,MVR,MWK,MXN,MYR,NGN,NIO,NOK,NPR,NZD,OMR,PAB,PEN,PGK,PHP,PKR,PLN,PYG,QAR,RON,RSD,RUB,RWF,SAR,SBD,SCR,SEK,SGD,SHP,SLL,SOS,SRD,STN,SVC,SYP,THB,TJS,TND,TOP,TRY,TWD,TZS,UAH,UGX,USD,UYU,UZS,VES,VND,VUV,WST,XAF,XCD,YER,ZAR,ZMW"}
    
    [pm_filters.braintree]
    paypal.currency = "AUD,BRL,CAD,CNY,CZK,DKK,EUR,HKD,HUF,ILS,JPY,MYR,MXN,TWD,NZD,NOK,PHP,PLN,GBP,RUB,SGD,SEK,CHF,THB,USD"
    
    [pm_filters.forte]
    credit.currency = "USD"
    debit.currency = "USD"
    
    [pm_filters.helcim]
    credit.currency = "USD"
    debit.currency = "USD"
    
    [pm_filters.globepay]
    ali_pay.currency = "GBP,CNY"
    we_chat_pay.currency = "GBP,CNY"
    
    [pm_filters.klarna]
    klarna = { country = "AU,AT,BE,CA,CZ,DK,FI,FR,DE,GR,IE,IT,NL,NZ,NO,PL,PT,ES,SE,CH,GB,US", currency = "CHF,DKK,EUR,GBP,NOK,PLN,SEK,USD,AUD,NZD,CAD" }
    
    [pm_filters.mifinity]
    mifinity = { country = "BR,CN,SG,MY,DE,CH,DK,GB,ES,AD,GI,FI,FR,GR,HR,IT,JP,MX,AR,CO,CL,PE,VE,UY,PY,BO,EC,GT,HN,SV,NI,CR,PA,DO,CU,PR,NL,NO,PL,PT,SE,RU,TR,TW,HK,MO,AX,AL,DZ,AS,AO,AI,AG,AM,AW,AU,AT,AZ,BS,BH,BD,BB,BE,BZ,BJ,BM,BT,BQ,BA,BW,IO,BN,BG,BF,BI,KH,CM,CA,CV,KY,CF,TD,CX,CC,KM,CG,CK,CI,CW,CY,CZ,DJ,DM,EG,GQ,ER,EE,ET,FK,FO,FJ,GF,PF,TF,GA,GM,GE,GH,GL,GD,GP,GU,GG,GN,GW,GY,HT,HM,VA,IS,IN,ID,IE,IM,IL,JE,JO,KZ,KE,KI,KW,KG,LA,LV,LB,LS,LI,LT,LU,MK,MG,MW,MV,ML,MT,MH,MQ,MR,MU,YT,FM,MD,MC,MN,ME,MS,MA,MZ,NA,NR,NP,NC,NZ,NE,NG,NU,NF,MP,OM,PK,PW,PS,PG,PH,PN,QA,RE,RO,RW,BL,SH,KN,LC,MF,PM,VC,WS,SM,ST,SA,SN,RS,SC,SL,SX,SK,SI,SB,SO,ZA,GS,KR,LK,SR,SJ,SZ,TH,TL,TG,TK,TO,TT,TN,TM,TC,TV,UG,UA,AE,UZ,VU,VN,VG,VI,WF,EH,ZM", currency = "AUD,CAD,CHF,CNY,CZK,DKK,EUR,GBP,INR,JPY,NOK,NZD,PLN,RUB,SEK,ZAR,USD,EGP,UYU,UZS" }
    
    [pm_filters.prophetpay]
    card_redirect.currency = "USD"
    
    
    [pm_filters.stax]
    ach = { country = "US", currency = "USD" }
    
    [pm_filters.stripe]
    affirm = { country = "US", currency = "USD" }
    afterpay_clearpay = { country = "US,CA,GB,AU,NZ,FR,ES", currency = "USD,CAD,GBP,AUD,NZD" }
    apple_pay.country = "AU,CN,HK,JP,MO,MY,NZ,SG,TW,AM,AT,AZ,BY,BE,BG,HR,CY,CZ,DK,EE,FO,FI,FR,GE,DE,GR,GL,GG,HU,IS,IE,IM,IT,KZ,JE,LV,LI,LT,LU,MT,MD,MC,ME,NL,NO,PL,PT,RO,SM,RS,SK,SI,ES,SE,CH,UA,GB,AR,CO,CR,BR,MX,PE,BH,IL,JO,KW,PS,QA,SA,AE,CA,UM,US,KR,VN,MA,ZA,VA,CL,SV,GT,HN,PA"
    cashapp = { country = "US", currency = "USD" }
    eps = { country = "AT", currency = "EUR" }
    giropay = { country = "DE", currency = "EUR" }
    google_pay.country = "AL,DZ,AS,AO,AG,AR,AU,AT,AZ,BH,BY,BE,BR,BG,CA,CL,CO,HR,CZ,DK,DO,EG,EE,FI,FR,DE,GR,HK,HU,IN,ID,IE,IL,IT,JP,JO,KZ,KE,KW,LV,LB,LT,LU,MY,MX,NL,NZ,NO,OM,PK,PA,PE,PH,PL,PT,QA,RO,RU,SA,SG,SK,ZA,ES,LK,SE,CH,TW,TH,TR,UA,AE,GB,US,UY,VN"
    ideal = { country = "NL", currency = "EUR" }
    klarna = { country = "AU,AT,BE,CA,CZ,DK,FI,FR,DE,GR,IE,IT,NL,NZ,NO,PL,PT,ES,SE,CH,GB,US", currency = "AUD,CAD,CHF,CZK,DKK,EUR,GBP,NOK,NZD,PLN,SEK,USD" }
    sofort = { country = "AT,BE,DE,IT,NL,ES", currency = "EUR" }
    
    [pm_filters.volt]
    open_banking_uk = { country = "DE,GB,AT,BE,CY,EE,ES,FI,FR,GR,HR,IE,IT,LT,LU,LV,MT,NL,PT,SI,SK,BG,CZ,DK,HU,NO,PL,RO,SE,AU,BR", currency = "EUR,GBP,DKK,NOK,PLN,SEK,AUD,BRL" }
    
    [pm_filters.razorpay]
    upi_collect = {country = "IN", currency = "INR"}
    
    [pm_filters.plaid]
    open_banking_pis = {currency = "EUR,GBP"}
    
    [pm_filters.worldpay]
    debit = { country = "AF,DZ,AW,AU,AZ,BS,BH,BD,BB,BZ,BM,BT,BO,BA,BW,BR,BN,BG,BI,KH,CA,CV,KY,CL,CO,KM,CD,CR,CZ,DK,DJ,ST,DO,EC,EG,SV,ER,ET,FK,FJ,GM,GE,GH,GI,GT,GN,GY,HT,HN,HK,HU,IS,IN,ID,IR,IQ,IE,IL,IT,JM,JP,JO,KZ,KE,KW,LA,LB,LS,LR,LY,LT,MO,MK,MG,MW,MY,MV,MR,MU,MX,MD,MN,MA,MZ,MM,NA,NZ,NI,NG,KP,NO,AR,PK,PG,PY,PE,UY,PH,PL,GB,QA,OM,RO,RU,RW,WS,SG,ST,ZA,KR,LK,SH,SD,SR,SZ,SE,CH,SY,TW,TJ,TZ,TH,TT,TN,TR,UG,UA,US,UZ,VU,VE,VN,ZM,ZW", currency = "AFN,DZD,ANG,AWG,AUD,AZN,BSD,BHD,BDT,BBD,BZD,BMD,BTN,BOB,BAM,BWP,BRL,BND,BGN,BIF,KHR,CAD,CVE,KYD,XOF,XAF,XPF,CLP,COP,KMF,CDF,CRC,EUR,CZK,DKK,DJF,DOP,XCD,EGP,SVC,ERN,ETB,EUR,FKP,FJD,GMD,GEL,GHS,GIP,GTQ,GNF,GYD,HTG,HNL,HKD,HUF,ISK,INR,IDR,IRR,IQD,ILS,JMD,JPY,JOD,KZT,KES,KWD,LAK,LBP,LSL,LRD,LYD,MOP,MKD,MGA,MWK,MYR,MVR,MRU,MUR,MXN,MDL,MNT,MAD,MZN,MMK,NAD,NPR,NZD,NIO,NGN,KPW,NOK,ARS,PKR,PAB,PGK,PYG,PEN,UYU,PHP,PLN,GBP,QAR,OMR,RON,RUB,RWF,WST,SAR,RSD,SCR,SLL,SGD,STN,SBD,SOS,ZAR,KRW,LKR,SHP,SDG,SRD,SZL,SEK,CHF,SYP,TWD,TJS,TZS,THB,TOP,TTD,TND,TRY,TMT,AED,UGX,UAH,USD,UZS,VUV,VND,YER,CNY,ZMW,ZWL" }
    credit = { country = "AF,DZ,AW,AU,AZ,BS,BH,BD,BB,BZ,BM,BT,BO,BA,BW,BR,BN,BG,BI,KH,CA,CV,KY,CL,CO,KM,CD,CR,CZ,DK,DJ,ST,DO,EC,EG,SV,ER,ET,FK,FJ,GM,GE,GH,GI,GT,GN,GY,HT,HN,HK,HU,IS,IN,ID,IR,IQ,IE,IL,IT,JM,JP,JO,KZ,KE,KW,LA,LB,LS,LR,LY,LT,MO,MK,MG,MW,MY,MV,MR,MU,MX,MD,MN,MA,MZ,MM,NA,NZ,NI,NG,KP,NO,AR,PK,PG,PY,PE,UY,PH,PL,GB,QA,OM,RO,RU,RW,WS,SG,ST,ZA,KR,LK,SH,SD,SR,SZ,SE,CH,SY,TW,TJ,TZ,TH,TT,TN,TR,UG,UA,US,UZ,VU,VE,VN,ZM,ZW", currency = "AFN,DZD,ANG,AWG,AUD,AZN,BSD,BHD,BDT,BBD,BZD,BMD,BTN,BOB,BAM,BWP,BRL,BND,BGN,BIF,KHR,CAD,CVE,KYD,XOF,XAF,XPF,CLP,COP,KMF,CDF,CRC,EUR,CZK,DKK,DJF,DOP,XCD,EGP,SVC,ERN,ETB,EUR,FKP,FJD,GMD,GEL,GHS,GIP,GTQ,GNF,GYD,HTG,HNL,HKD,HUF,ISK,INR,IDR,IRR,IQD,ILS,JMD,JPY,JOD,KZT,KES,KWD,LAK,LBP,LSL,LRD,LYD,MOP,MKD,MGA,MWK,MYR,MVR,MRU,MUR,MXN,MDL,MNT,MAD,MZN,MMK,NAD,NPR,NZD,NIO,NGN,KPW,NOK,ARS,PKR,PAB,PGK,PYG,PEN,UYU,PHP,PLN,GBP,QAR,OMR,RON,RUB,RWF,WST,SAR,RSD,SCR,SLL,SGD,STN,SBD,SOS,ZAR,KRW,LKR,SHP,SDG,SRD,SZL,SEK,CHF,SYP,TWD,TJS,TZS,THB,TOP,TTD,TND,TRY,TMT,AED,UGX,UAH,USD,UZS,VUV,VND,YER,CNY,ZMW,ZWL" }
    google_pay = { country = "AL,DZ,AS,AO,AG,AR,AU,AT,AZ,BH,BY,BE,BR,BG,CA,CL,CO,HR,CZ,DK,DO,EG,EE,FI,FR,DE,GR,HK,HU,IN,ID,IE,IL,IT,JP,JO,KZ,KE,KW,LV,LB,LT,LU,MY,MX,NL,NZ,NO,OM,PK,PA,PE,PH,PL,PT,QA,RO,RU,SA,SG,SK,ZA,ES,LK,SE,CH,TW,TH,TR,UA,AE,GB,US,UY,VN" }
    apple_pay = { country = "AU,CN,HK,JP,MO,MY,NZ,SG,TW,AM,AT,AZ,BY,BE,BG,HR,CY,CZ,DK,EE,FO,FI,FR,GE,DE,GR,GL,GG,HU,IS,IE,IM,IT,KZ,JE,LV,LI,LT,LU,MT,MD,MC,ME,NL,NO,PL,PT,RO,SM,RS,SK,SI,ES,SE,CH,UA,GB,AR,CO,CR,BR,MX,PE,BH,IL,JO,KW,PS,QA,SA,AE,CA,UM,US" }
    
    [pm_filters.zen]
    boleto = { country = "BR", currency = "BRL" }
    efecty = { country = "CO", currency = "COP" }
    multibanco = { country = "PT", currency = "EUR" }
    pago_efectivo = { country = "PE", currency = "PEN" }
    pix = { country = "BR", currency = "BRL" }
    pse = { country = "CO", currency = "COP" }
    red_compra = { country = "CL", currency = "CLP" }
    red_pagos = { country = "UY", currency = "UYU" }
    
    [pm_filters.zsl]
    local_bank_transfer = { country = "CN", currency = "CNY" }
    
    
    [pm_filters.fiuu]
    duit_now = { country ="MY", currency = "MYR" }
    
    [payout_method_filters.adyenplatform]
    sepa = { country = "ES,SK,AT,NL,DE,BE,FR,FI,PT,IE,EE,LT,LV,IT,CZ,DE,HU,NO,PL,SE,GB,CH" , currency = "EUR,CZK,DKK,HUF,NOK,PLN,SEK,GBP,CHF" }
    
    [payout_method_filters.stripe]
    ach = { country = "US", currency = "USD" }
    
    [temp_locker_enable_config]
    bluesnap.payment_method = "card"
    nuvei.payment_method = "card"
    shift4.payment_method = "card"
    stripe.payment_method = "bank_transfer"
    bankofamerica = { payment_method = "card" }
    cybersource = { payment_method = "card" }
    nmi.payment_method = "card"
    payme.payment_method = "card"
    deutschebank = { payment_method = "bank_debit" }
    paybox = { payment_method = "card" }
    nexixpay = { payment_method = "card" }
    
    #tokenization configuration which describe token lifetime and payment method for specific connector
    [tokenization]
    braintree = { long_lived_token = false, payment_method = "card" }
    checkout = { long_lived_token = false, payment_method = "wallet", apple_pay_pre_decrypt_flow = "network_tokenization" }
    gocardless = { long_lived_token = true, payment_method = "bank_debit" }
    mollie = { long_lived_token = false, payment_method = "card" }
    payme = { long_lived_token = false, payment_method = "card" }
    square = { long_lived_token = false, payment_method = "card" }
    stax = { long_lived_token = true, payment_method = "card,bank_debit" }
    stripe = { long_lived_token = false, payment_method = "wallet", payment_method_type = { list = "google_pay", type = "disable_only" } }
    billwerk = {long_lived_token = false, payment_method = "card"}
    
    [webhooks]
    outgoing_enabled = true
    
    [webhook_source_verification_call]
    connectors_with_webhook_source_verification_call = "paypal"        # List of connectors which has additional source verification api-call
    
    [unmasked_headers]
    keys = "accept-language,user-agent"
    
    [saved_payment_methods]
    sdk_eligible_payment_methods = "card"
    
    [locker_based_open_banking_connectors]
    connector_list = ""
    
    [network_tokenization_supported_card_networks]
    card_networks = "Visa, AmericanExpress, Mastercard"
    
    [network_tokenization_supported_connectors]
    connector_list = "cybersource"
---
# Source: hyperswitch-stack/charts/hyperswitch-web/templates/statefulset-nginx-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hyperswitch-web-nginx
  labels:
    helm.sh/chart: hyperswitch-web-0.2.0
    app.kubernetes.io/name: hyperswitch-web
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "0.15.8"
    app.kubernetes.io/managed-by: Helm
data:
  envBackendUrl: "http://localhost:8080"
  envSdkUrl: "http://localhost:9090"
  envLogsUrl: "http://localhost:3103"
  default.conf: |-
    server {
        listen       9090;
        listen  [::]:9090;
        server_name  localhost;

        #access_log  /var/log/nginx/host.access.log  main;

        location /web/0.103.1/v0/ {
            autoindex on;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/grafana/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    helm.sh/chart: grafana-6.43.5
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "10.0.1"
    app.kubernetes.io/managed-by: Helm
  name: hypers-v1-grafana-clusterrole
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["configmaps", "secrets"]
  verbs: ["get", "watch", "list"]
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/promtail/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hypers-v1-promtail
  labels:
    helm.sh/chart: promtail-6.15.5
    app.kubernetes.io/name: promtail
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "2.9.3"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs:
      - get
      - watch
      - list
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/grafana/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hypers-v1-grafana-clusterrolebinding
  labels:
    helm.sh/chart: grafana-6.43.5
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "10.0.1"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: hypers-v1-grafana
    namespace: hyperswitch
roleRef:
  kind: ClusterRole
  name: hypers-v1-grafana-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/promtail/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hypers-v1-promtail
  labels:
    helm.sh/chart: promtail-6.15.5
    app.kubernetes.io/name: promtail
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "2.9.3"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: hypers-v1-promtail
    namespace: hyperswitch
roleRef:
  kind: ClusterRole
  name: hypers-v1-promtail
  apiGroup: rbac.authorization.k8s.io
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/grafana/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: hypers-v1-grafana
  namespace: hyperswitch
  labels:
    helm.sh/chart: grafana-6.43.5
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "10.0.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:      ['extensions']
  resources:      ['podsecuritypolicies']
  verbs:          ['use']
  resourceNames:  [hypers-v1-grafana]
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/loki/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: loki
  namespace: hyperswitch
  labels:
    app: loki
    chart: loki-2.16.0
    release: hypers-v1
    heritage: Helm
rules:
- apiGroups:      ['extensions']
  resources:      ['podsecuritypolicies']
  verbs:          ['use']
  resourceNames:  [loki]
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/grafana/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: hypers-v1-grafana
  namespace: hyperswitch
  labels:
    helm.sh/chart: grafana-6.43.5
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "10.0.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: hypers-v1-grafana
subjects:
- kind: ServiceAccount
  name: hypers-v1-grafana
  namespace: hyperswitch
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/loki/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: loki
  namespace: hyperswitch
  labels:
    app: loki
    chart: loki-2.16.0
    release: hypers-v1
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: loki
subjects:
- kind: ServiceAccount
  name: loki
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/clickhouse/charts/zookeeper/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: hypers-v1-zookeeper-headless
  namespace: hyperswitch
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/version: 3.9.3
    helm.sh/chart: zookeeper-13.6.0
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-client
      port: 2181
      targetPort: client
    - name: tcp-follower
      port: 2888
      targetPort: follower
    - name: tcp-election
      port: 3888
      targetPort: election
  selector:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/component: zookeeper
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/clickhouse/charts/zookeeper/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: hypers-v1-zookeeper
  namespace: hyperswitch
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/version: 3.9.3
    helm.sh/chart: zookeeper-13.6.0
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-client
      port: 2181
      targetPort: client
      nodePort: null
  selector:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/component: zookeeper
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/clickhouse/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: clickhouse-headless
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: clickhouse
    app.kubernetes.io/version: 24.10.2
    helm.sh/chart: clickhouse-6.3.3
    app.kubernetes.io/component: clickhouse
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      targetPort: http
      port: 8123
      protocol: TCP
    - name: tcp
      targetPort: tcp
      port: 9000
      protocol: TCP
    - name: tcp-mysql
      targetPort: tcp-mysql
      port: 9004
      protocol: TCP
    - name: tcp-postgresql
      targetPort: tcp-postgresql
      port: 9005
      protocol: TCP
    - name: http-intersrv
      targetPort: http-intersrv
      port: 9009
      protocol: TCP
  selector:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/name: clickhouse
    app.kubernetes.io/component: clickhouse
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/clickhouse/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clickhouse
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: clickhouse
    app.kubernetes.io/version: 24.10.2
    helm.sh/chart: clickhouse-6.3.3
    app.kubernetes.io/component: clickhouse
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      targetPort: http
      port: 8123
      protocol: TCP
      nodePort: null
    - name: tcp
      targetPort: tcp
      port: 9000
      protocol: TCP
      nodePort: null
    - name: tcp-mysql
      targetPort: tcp-mysql
      port: 9004
      protocol: TCP
      nodePort: null
    - name: tcp-postgresql
      targetPort: tcp-postgresql
      port: 9005
      protocol: TCP
      nodePort: null
    - name: http-intersrv
      targetPort: http-intersrv
      port: 9009
      protocol: TCP
      nodePort: null
  selector:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/name: clickhouse
    app.kubernetes.io/component: clickhouse
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/hyperswitch-card-vault/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: hypers-v1-locker-db-hl
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: locker-db
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.27
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/name: locker-db
    app.kubernetes.io/component: primary
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/hyperswitch-card-vault/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: hypers-v1-locker-db
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: locker-db
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.27
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/name: locker-db
    app.kubernetes.io/component: primary
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/hyperswitch-card-vault/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hyperswitch-vault
  namespace: hyperswitch
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8080
    - name: https
      port: 443
      protocol: TCP
      targetPort: 8080
  selector:
    app: hyperswitch-card-vault
  sessionAffinity: None
  type: ClusterIP
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/kafka/templates/broker/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka0-broker-headless
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.9.0
    helm.sh/chart: kafka-31.0.0
    app.kubernetes.io/component: broker
    app.kubernetes.io/part-of: kafka
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-interbroker
      port: 9094
      protocol: TCP
      targetPort: interbroker
    - name: tcp-client
      port: 29092
      protocol: TCP
      targetPort: client
  selector:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/name: kafka
    app.kubernetes.io/component: broker
    app.kubernetes.io/part-of: kafka
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/kafka/templates/controller-eligible/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka0-controller-headless
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.9.0
    helm.sh/chart: kafka-31.0.0
    app.kubernetes.io/component: controller-eligible
    app.kubernetes.io/part-of: kafka
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-interbroker
      port: 9094
      protocol: TCP
      targetPort: interbroker
    - name: tcp-client
      port: 29092
      protocol: TCP
      targetPort: client
    - name: tcp-controller
      protocol: TCP
      port: 9093
      targetPort: controller
  selector:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/name: kafka
    app.kubernetes.io/component: controller-eligible
    app.kubernetes.io/part-of: kafka
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/kafka/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka0
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.9.0
    helm.sh/chart: kafka-31.0.0
    app.kubernetes.io/component: kafka
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-client
      port: 29092
      protocol: TCP
      targetPort: client
      nodePort: null
  selector:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/name: kafka
    app.kubernetes.io/part-of: kafka
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/grafana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hypers-v1-grafana
  namespace: hyperswitch
  labels:
    helm.sh/chart: grafana-6.43.5
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "10.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: service
      port: 80
      protocol: TCP
      targetPort: 3000
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: hypers-v1
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/loki/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-headless
  namespace: hyperswitch
  labels:
    app: loki
    chart: loki-2.16.0
    release: hypers-v1
    heritage: Helm
    variant: headless
spec:
  clusterIP: None
  ports:
    - port: 3100
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app: loki
    release: hypers-v1
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/loki/templates/service-memberlist.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-memberlist
  namespace: hyperswitch
  labels:
    app: loki
    chart: loki-2.16.0
    release: hypers-v1
    heritage: Helm
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      port: 7946
      targetPort: memberlist-port
      protocol: TCP
  selector:
    app: loki
    release: hypers-v1
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/loki/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: hyperswitch
  labels:
    app: loki
    chart: loki-2.16.0
    release: hypers-v1
    heritage: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 3100
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app: loki
    release: hypers-v1
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/mailhog/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: mailhog
  labels:
    helm.sh/chart: mailhog-4.0.0
    app.kubernetes.io/name: mailhog
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "v1.0.1"
    app.kubernetes.io/managed-by: Helm
  namespace: hyperswitch
spec:
  type: "ClusterIP"
  ports:
    - name: http
      port: 8025
      protocol: TCP
      targetPort: http
    - name: tcp-smtp
      port: 1025
      protocol: TCP
      targetPort: tcp-smtp
  selector:
    app.kubernetes.io/name: mailhog
    app.kubernetes.io/instance: hypers-v1
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: hypers-v1-postgresql-hl
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.27
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: hypers-v1-postgresql
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.27
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/postgresql/templates/read/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: hypers-v1-postgresql-read-hl
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.27
    app.kubernetes.io/component: read
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: read
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/postgresql/templates/read/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: hypers-v1-postgresql-read
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.27
    app.kubernetes.io/component: read
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: read
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: hypers-v1-redis-headless
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.3
    helm.sh/chart: redis-18.6.1
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/name: redis
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hypers-v1-redis-master
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.3
    helm.sh/chart: redis-18.6.1
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/redis/templates/replicas/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hypers-v1-redis-replicas
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.3
    helm.sh/chart: redis-18.6.1
    app.kubernetes.io/component: replica
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: replica
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/vector/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: hypers-v1-vector-headless
  labels:
    helm.sh/chart: vector-0.37.0
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/component: Aggregator
    app.kubernetes.io/version: "0.42.0-distroless-libc"
    app.kubernetes.io/managed-by: Helm
    
  annotations:
spec:
  clusterIP: None
  ports:    
    - name: api
      port: 8686
      protocol: TCP
      targetPort: 8686
    - name: sdk-source
      port: 3103
      protocol: TCP
      targetPort: 3103
  selector:
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/component: Aggregator
  type: ClusterIP
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/vector/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hypers-v1-vector
  labels:
    helm.sh/chart: vector-0.37.0
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/component: Aggregator
    app.kubernetes.io/version: "0.42.0-distroless-libc"
    app.kubernetes.io/managed-by: Helm
    
  annotations:
spec:
  ports:    
    - name: api
      port: 8686
      protocol: TCP
      targetPort: 8686
    - name: sdk-source
      port: 3103
      protocol: TCP
      targetPort: 3103
  selector:
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/component: Aggregator
  type: ClusterIP
---
# Source: hyperswitch-stack/charts/hyperswitch-app/templates/control-center/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hyperswitch-control-center
  namespace: hyperswitch
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9000
    - name: https
      port: 443
      protocol: TCP
      targetPort: 9000
  selector:
    app: hyperswitch-control-center
  sessionAffinity: None
  type: ClusterIP
---
# Source: hyperswitch-stack/charts/hyperswitch-app/templates/router/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hyperswitch-server
  namespace: hyperswitch
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8080
    - name: https
      port: 443
      protocol: TCP
      targetPort: 8080
  selector:
    app: hyperswitch-server
  sessionAffinity: None
  type: ClusterIP
---
# Source: hyperswitch-stack/charts/hyperswitch-web/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hyperswitch-web
  labels:
    helm.sh/chart: hyperswitch-web-0.2.0
    app.kubernetes.io/name: hyperswitch-web
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "0.15.8"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: hyperswitch-web
    app.kubernetes.io/instance: hypers-v1
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/promtail/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: hypers-v1-promtail
  namespace: hyperswitch
  labels:
    helm.sh/chart: promtail-6.15.5
    app.kubernetes.io/name: promtail
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "2.9.3"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: promtail
      app.kubernetes.io/instance: hypers-v1
  updateStrategy:
    {}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: promtail
        app.kubernetes.io/instance: hypers-v1
      annotations:
        checksum/config: 30f5c7b874124b12826873762af93f265f37fff1f305930c16692b43d107e707
    spec:
      serviceAccountName: hypers-v1-promtail
      enableServiceLinks: true
      securityContext:
        runAsGroup: 0
        runAsUser: 0
      containers:
        - name: promtail
          image: "docker.io/grafana/promtail:2.9.3"
          imagePullPolicy: IfNotPresent
          args:
            - "-config.file=/etc/promtail/promtail.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/promtail
            - mountPath: /run/promtail
              name: run
            - mountPath: /var/lib/docker/containers
              name: containers
              readOnly: true
            - mountPath: /var/log/pods
              name: pods
              readOnly: true
          env:
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - name: http-metrics
              containerPort: 3101
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: '/ready'
              port: http-metrics
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
      volumes:
        - name: config
          secret:
            secretName: hypers-v1-promtail
        - hostPath:
            path: /run/promtail
          name: run
        - hostPath:
            path: /var/lib/docker/containers
          name: containers
        - hostPath:
            path: /var/log/pods
          name: pods
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/hyperswitch-card-vault/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hyperswitch-card-vault-hypers-v1
  namespace: hyperswitch
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hyperswitch-card-vault
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
  template:
    metadata:
      annotations:
        checksum/config: b6d76552ac923582dba1b6de69b72c2e4344d63aab18d3492a19a7a01d585579
        checksum/secrets: a3d0976bbfdd60acac6df2dfc77d4877fae664ac55b2f0aaed3324e1ad5c2ccb
      creationTimestamp: null
      labels:
        app: hyperswitch-card-vault
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
      containers:
        - env:
            - name: LOCKER__LOG__CONSOLE__ENABLED
              value: "true"
            - name: LOCKER__LOG__CONSOLE__LEVEL
              value: DEBUG
            - name: LOCKER__LOG__CONSOLE__LOG_FORMAT
              value: default
            - name: LOCKER__DATABASE__USERNAME
              value: db_user
            - name: LOCKER__DATABASE__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: locker-secrets-hypers-v1
                  key: LOCKER__DATABASE__PASSWORD
            - name: LOCKER__DATABASE__HOST
              value: hypers-v1-locker-db
            - name: LOCKER__DATABASE__PORT
              value: "5432"
            - name: LOCKER__DATABASE__DBNAME
              value: locker-db
            - name: LOCKER__LIMIT__REQUEST_COUNT
              value: "100"
            - name: LOCKER__LIMIT__DURATION
              value: "60"
            - name: LOCKER__SECRETS__TENANT
              value: hyperswitch
            - name: LOCKER__SECRETS__MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: locker-secrets-hypers-v1
                  key: LOCKER__SECRETS__MASTER_KEY
            - name: LOCKER__SECRETS__LOCKER_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: locker-secrets-hypers-v1
                  key: LOCKER__SECRETS__LOCKER_PRIVATE_KEY
            - name: LOCKER__SECRETS__TENANT_PUBLIC_KEY
              valueFrom:
                secretKeyRef:
                  name: locker-secrets-hypers-v1
                  key: LOCKER__SECRETS__TENANT_PUBLIC_KEY
            - name: LOCKER__CACHE__MAX_CAPACITY
              value: "5000"
            - name: LOCKER__CACHE__TTI
              value: "7200"
          image: juspaydotin/hyperswitch-card-vault:v0.4.0
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - pkill -15 node
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          name: tartarus
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 50
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 200Mi

          securityContext:
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /local/config/development.toml
              name: hyperswitch-vault-config
              subPath: development.toml
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: hyperswitch-vault-role
      serviceAccountName: hyperswitch-vault-role
      terminationGracePeriodSeconds: 120
      volumes:
        - configMap:
            defaultMode: 420
            name: hyperswitch-vault-config-hypers-v1
          name: hyperswitch-vault-config
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/grafana/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hypers-v1-grafana
  namespace: hyperswitch
  labels:
    helm.sh/chart: grafana-6.43.5
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "10.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: hypers-v1
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/instance: hypers-v1
      annotations:
        checksum/config: 60359e15da32b3c5a052fbe6f483fd486fa53f0fd9837c81af06fd02c15bd827
        checksum/dashboards-json-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/sc-dashboard-provider-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/secret: f47fbdec798f756b108b355bf2ef97bbf97db5022f2d0bc545bd7b8b9670663a
    spec:      
      serviceAccountName: hypers-v1-grafana
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsUser: 472
      enableServiceLinks: true
      containers:
        - name: grafana-sc-datasources
          image: "quay.io/kiwigrid/k8s-sidecar:1.19.2"
          imagePullPolicy: IfNotPresent
          env:
            - name: METHOD
              value: WATCH
            - name: LABEL
              value: ""
            - name: FOLDER
              value: "/etc/grafana/provisioning/datasources"
            - name: RESOURCE
              value: "both"
            - name: REQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: hypers-v1-grafana
                  key: admin-user
            - name: REQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hypers-v1-grafana
                  key: admin-password
            - name: REQ_URL
              value: http://localhost:3000/api/admin/provisioning/datasources/reload
            - name: REQ_METHOD
              value: POST
          volumeMounts:
            - name: sc-datasources-volume
              mountPath: "/etc/grafana/provisioning/datasources"
        - name: grafana
          image: "grafana/grafana:10.0.1"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: config
              mountPath: "/etc/grafana/grafana.ini"
              subPath: grafana.ini
            - name: storage
              mountPath: "/var/lib/grafana"
            - name: sc-datasources-volume
              mountPath: "/etc/grafana/provisioning/datasources"
          ports:
            - name: grafana
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: hypers-v1-grafana
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hypers-v1-grafana
                  key: admin-password
            - name: GF_PATHS_DATA
              value: /var/lib/grafana/
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
            - name: GF_PATHS_PLUGINS
              value: /var/lib/grafana/plugins
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
      volumes:
        - name: config
          configMap:
            name: hypers-v1-grafana
        - name: storage
          emptyDir: {}
        - name: sc-datasources-volume
          emptyDir: {}
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/mailhog/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mailhog
  labels:
    helm.sh/chart: mailhog-4.0.0
    app.kubernetes.io/name: mailhog
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "v1.0.1"
    app.kubernetes.io/managed-by: Helm
  namespace: hyperswitch
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mailhog
      app.kubernetes.io/instance: hypers-v1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mailhog
        app.kubernetes.io/instance: hypers-v1
    spec:
      serviceAccountName: mailhog
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        - name: mailhog
          image: "docker.io/mailhog/mailhog:v1.0.1"
          imagePullPolicy: "IfNotPresent"
          env:
            - name: MH_HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          ports:
            - name: http
              containerPort: 8025
              protocol: TCP
            - name: tcp-smtp
              containerPort: 1025
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: tcp-smtp
            initialDelaySeconds: 10
            timeoutSeconds: 1
          readinessProbe:
            tcpSocket:
              port: tcp-smtp
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
          resources:
            {}
---
# Source: hyperswitch-stack/charts/hyperswitch-app/templates/consumer/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  name: hyperswitch-consumer-v1o112o0
  namespace: hyperswitch
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: hyperswitch-consumer
      version: consumer-v1o112o0
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/restartedAt: "2023-04-21T14:21:23+05:30"
        checksum/consumer-config: 4ac72276a744cfdbb23757dadb7eaa19ad8fc7b58cee9fbf65f955e83ea05bf3
        checksum/consumer-secret: 5dcd2bad8f7fd5c9fefee844671b36b69a683ea5f7ac372f197af4d53491cc14
        checksum/misc-secrets: 6ce28431f6402604659828f402da6f0c33b94a56d25c69a94f981a2d14d872cb
      labels:
        app: hyperswitch-consumer
        version: consumer-v1o112o0
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-type
                operator: In
                values:
                - generic-compute
      initContainers:
        - name: check-postgres
          image: postgres:16-alpine3.19
          command: [ "/bin/sh", "-c" ]
          #language=sh
          args:
          - >
            MAX_ATTEMPTS=30;
            SLEEP_SECONDS=10;
            attempt=0;
            while ! pg_isready -U hyperswitch -d hyperswitch -h hypers-v1-postgresql -p 5432; do
              if [ $attempt -ge $MAX_ATTEMPTS ]; then
                echo "PostgreSQL did not become ready in time";
                exit 1;
              fi;
              attempt=$((attempt+1));
              echo "Waiting for PostgreSQL to be ready... Attempt: $attempt";
              sleep $SLEEP_SECONDS;
            done;
            echo "PostgreSQL is ready.";
        - name: check-redis
          image: redis:7.2.4
          command: [ "/bin/sh", "-c" ]
          #language=sh
          args:
          - >
            MAX_ATTEMPTS=30;
            SLEEP_SECONDS=10;
            attempt=0;
            while ! redis-cli -h hypers-v1-redis-master -p 6379 ping; do
              if [ $attempt -ge $MAX_ATTEMPTS ]; then
                echo "Redis did not become ready in time";
                exit 1;
              fi;
              attempt=$((attempt+1));
              echo "Waiting for Redis to be ready... Attempt: $attempt";
              sleep $SLEEP_SECONDS;
            done;
            echo "Redis is ready.";
      containers:
        - name: hyperswitch-consumer
          image: juspaydotin/hyperswitch-consumer:v1.112.0-standalone
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - pkill -15 node
          env:
            - name: ROUTER__JWEKEY__TUNNEL_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  key: ROUTER__JWEKEY__TUNNEL_PRIVATE_KEY
                  name: hyperswitch-secrets
            - name: ROUTER__KMS__KEY_ID
              valueFrom:
                secretKeyRef:
                  key: ROUTER__KMS__KEY_ID
                  name: hyperswitch-secrets
            - name: ROUTER__KMS__REGION
              valueFrom:
                secretKeyRef:
                  key: ROUTER__KMS__REGION
                  name: hyperswitch-secrets
            - name: ROUTER__SECRETS__ADMIN_API_KEY
              valueFrom:
                secretKeyRef:
                  key: ROUTER__SECRETS__ADMIN_API_KEY
                  name: hyperswitch-secrets
            - name: ROUTER__SECRETS__JWT_SECRET
              valueFrom:
                secretKeyRef:
                  key: ROUTER__SECRETS__JWT_SECRET
                  name: hyperswitch-secrets
            - name: ROUTER__API_KEYS__KMS_ENCRYPTED_HASH_KEY
              valueFrom:
                secretKeyRef:
                  key: ROUTER__API_KEYS__KMS_ENCRYPTED_HASH_KEY
                  name: hyperswitch-secrets
            - name: ROUTER__SECRETS__MASTER_ENC_KEY
              valueFrom:
                secretKeyRef:
                  key: ROUTER__SECRETS__MASTER_ENC_KEY
                  name: hyperswitch-secrets
            - name: ROUTER__CONNECTOR_ONBOARDING__PAYPAL__CLIENT_ID
              valueFrom:
                secretKeyRef:
                  key: ROUTER__CONNECTOR_ONBOARDING__PAYPAL__CLIENT_ID
                  name: hyperswitch-secrets
            - name: ROUTER__CONNECTOR_ONBOARDING__PAYPAL__CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  key: ROUTER__CONNECTOR_ONBOARDING__PAYPAL__CLIENT_SECRET
                  name: hyperswitch-secrets
            - name: ROUTER__CONNECTOR_ONBOARDING__PAYPAL__PARTNER_ID
              valueFrom:
                secretKeyRef:
                  key: ROUTER__CONNECTOR_ONBOARDING__PAYPAL__PARTNER_ID
                  name: hyperswitch-secrets
            - name: ROUTER__SECRETS_MANAGEMENT__AWS_KMS__KEY_ID
              valueFrom:
                secretKeyRef:
                  key: ROUTER__KMS__KEY_ID
                  name: hyperswitch-secrets
            - name: ROUTER__SECRETS_MANAGEMENT__AWS_KMS__REGION
              valueFrom:
                secretKeyRef:
                  key: ROUTER__KMS__REGION
                  name: hyperswitch-secrets
            - name: ROUTER__ENCRYPTION_MANAGEMENT__AWS_KMS__KEY_ID
              valueFrom:
                secretKeyRef:
                  key: ROUTER__KMS__KEY_ID
                  name: hyperswitch-secrets
            - name: ROUTER__ENCRYPTION_MANAGEMENT__AWS_KMS__REGION
              valueFrom:
                secretKeyRef:
                  key: ROUTER__KMS__REGION
                  name: hyperswitch-secrets
            - name: ROUTER__ANALYTICS__CLICKHOUSE__USERNAME
              valueFrom:
                secretKeyRef:
                  key: ROUTER__ANALYTICS__CLICKHOUSE__USERNAME
                  name: hyperswitch-secrets
            - name: ROUTER__ANALYTICS__CLICKHOUSE__DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  key: ROUTER__ANALYTICS__CLICKHOUSE__DATABASE_NAME
                  name: hyperswitch-secrets
            - name: ROUTER__ANALYTICS__CLICKHOUSE__HOST
              valueFrom:
                secretKeyRef:
                  key: ROUTER__ANALYTICS__CLICKHOUSE__HOST
                  name: hyperswitch-secrets
            - name: ROUTER__EMAIL__SENDER_EMAIL
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__SENDER_EMAIL
                  name: hyperswitch-secrets
            - name: ROUTER__EMAIL__ALLOWED_UNVERIFIED_DAYS
              value: "1"
            - name: ROUTER__EMAIL__AWS_REGION
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__AWS_REGION
                  name: hyperswitch-secrets
                  optional: true
            - name: ROUTER__EMAIL__RECON_RECIPIENT_EMAIL
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__RECON_RECIPIENT_EMAIL
                  name: hyperswitch-secrets
            - name: ROUTER__EMAIL__PROD_INTENT_RECIPIENT_EMAIL
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__PROD_INTENT_RECIPIENT_EMAIL
                  name: hyperswitch-secrets
            - name: ROUTER__EMAIL__SMTP__HOST
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__SMTP__HOST
                  name: hyperswitch-secrets
            - name: ROUTER__EMAIL__SMTP__PORT
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__SMTP__PORT
                  name: hyperswitch-secrets
            - name: ROUTER__EMAIL__SMTP__USERNAME
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__SMTP__USERNAME
                  name: hyperswitch-secrets
                  optional: true
            - name: ROUTER__EMAIL__SMTP__PASSWORD
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__SMTP__PASSWORD
                  name: hyperswitch-secrets
                  optional: true
            - name: ROUTER__EMAIL__AWS_SES__EMAIL_ROLE_ARN
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__AWS_SES__EMAIL_ROLE_ARN
                  name: hyperswitch-secrets
            - name: ROUTER__EMAIL__AWS_SES__STS_ROLE_SESSION_NAME
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__AWS_SES__STS_ROLE_SESSION_NAME
                  name: hyperswitch-secrets
            - name: RUN_ENV
              value: sandbox
            - name: ROUTER__ANALYTICS__CLICKHOUSE__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: clickhouse
                  key: admin-password
            - name: ROUTER__ANALYTICS__SQLX__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hypers-v1-postgresql
                  key: password
            - name: ROUTER__MASTER_DATABASE__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hypers-v1-postgresql
                  key: password
            - name: ROUTER__REPLICA_DATABASE__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hypers-v1-postgresql
                  key: password
          envFrom:
            - secretRef:
                name: consumer-secret-hypers-v1
            - secretRef:
                name: hyperswitch-secrets
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /local/config/sandbox.toml
              name: hyperswitch-config
              subPath: consumer.toml

            
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccountName: hyperswitch-router-role
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            defaultMode: 420
            name: consumer-cm-hypers-v1
          name: hyperswitch-config
---
# Source: hyperswitch-stack/charts/hyperswitch-app/templates/control-center/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  name: hyperswitch-control-center-v1o34o2
  namespace: hyperswitch
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: hyperswitch-control-center
      version: v1o34o2
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: hyperswitch-control-center
        version: v1o34o2
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-type
                operator: In
                values:
                - generic-compute
      containers:
        - name: hyperswitch-control-center
          image: juspaydotin/hyperswitch-control-center:v1.34.2
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - pkill -15 node
          env:
            - name: binary
              value: "dashboard"
            - name: default__endpoints__agreement_url
              value: "https://app.hyperswitch.io/agreement/tc-hyperswitch-aug-23.pdf"
            - name: default__endpoints__agreement_version
              value: "1.0.0"
            - name: default__endpoints__dss_certificate_url
              value: "https://app.hyperswitch.io/certificates/PCI_DSS_v4-0_AOC_Juspay_2024.pdf"
            - name: default__endpoints__favicon_url
              value: ""
            - name: default__endpoints__logo_url
              value: ""
            - name: default__endpoints__mixpanel_token
              value: "dd4da7f62941557e716fbc0a19f9cc7e"
            - name: default__features__authentication_analytics
              value: "false"
            - name: default__features__branding
              value: "false"
            - name: default__features__compliance_certificate
              value: "false"
            - name: default__features__configure_pmts
              value: "false"
            - name: default__features__custom_webhook_headers
              value: "false"
            - name: default__features__dispute_analytics
              value: "false"
            - name: default__features__dispute_evidence_upload
              value: "false"
            - name: default__features__email
              value: "false"
            - name: default__features__feedback
              value: "false"
            - name: default__features__frm
              value: "false"
            - name: default__features__generate_report
              value: "false"
            - name: default__features__global_search
              value: "false"
            - name: default__features__is_live_mode
              value: "false"
            - name: default__features__live_users_counter
              value: "false"
            - name: default__features__mixpanel
              value: "false"
            - name: default__features__payout
              value: "false"
            - name: default__features__paypal_automatic_flow
              value: "false"
            - name: default__features__performance_monitor
              value: "false"
            - name: default__features__pm_authentication_processor
              value: "false"
            - name: default__features__quick_start
              value: "false"
            - name: default__features__recon
              value: "false"
            - name: default__features__sample_data
              value: "false"
            - name: default__features__surcharge
              value: "false"
            - name: default__features__system_metrics
              value: "false"
            - name: default__features__test_live_toggle
              value: "false"
            - name: default__features__test_processors
              value: "false"
            - name: default__features__threeds_authenticator
              value: "false"
            - name: default__features__totp
              value: "false"
            - name: default__features__user_journey_analytics
              value: "false"
            - name: default__theme__primary_color
              value: "#006DF9"
            - name: default__theme__primary_hover_color
              value: "#005ED6"
            - name: default__theme__sidebar_color
              value: "#242F48"
            - name: host
              value: "hyperswitch-control-center"
            - name: mixpanelToken
              value: "dd4da7f62941557e716fbc0a19f9cc7e"
            - name: apiBaseUrl
              value: http://localhost:8080
            - name: sdkBaseUrl
              value: http://localhost:9090/web/0.103.1/v0/HyperLoader.js
            - name: "default__endpoints__api_url"
              value: http://localhost:8080
            - name: "default__endpoints__sdk_url"
              value: http://localhost:9090/web/0.103.1/v0/HyperLoader.js
            - name: "default__endpoints__apple_pay_certificate_url"
              value: "http://localhost:8080/applepay-domain/apple-developer-merchantid-domain-association"
            - name: "default__features__audit_trail"
              value: "true"
          ports:
            - containerPort: 9000
              name: http
              protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccountName: hyperswitch-router-role
      terminationGracePeriodSeconds: 30
---
# Source: hyperswitch-stack/charts/hyperswitch-app/templates/producer/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  name: hyperswitch-producer-v1o112o0
  namespace: hyperswitch
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: hyperswitch-producer
      version: v1o112o0
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: hyperswitch-producer
        version: v1o112o0
      annotations:
        checksum/producer-config: dc281659e51cc2e2338f033b6202b0e19fcc5ae8c265121193771bd64944acb9
        checksum/producer-secret: d76f2e393c406fec2fb1cda19a21aee6aadc9bbb1f22c4b19b8962ee78ab3231
        checksum/misc-secrets: 6ce28431f6402604659828f402da6f0c33b94a56d25c69a94f981a2d14d872cb
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-type
                operator: In
                values:
                - generic-compute
      initContainers:
        - name: check-postgres
          image: postgres:16-alpine3.19
          command: [ "/bin/sh", "-c" ]
          #language=sh
          args:
          - >
            MAX_ATTEMPTS=30;
            SLEEP_SECONDS=10;
            attempt=0;
            while ! pg_isready -U hyperswitch -d hyperswitch -h hypers-v1-postgresql -p 5432; do
              if [ $attempt -ge $MAX_ATTEMPTS ]; then
                echo "PostgreSQL did not become ready in time";
                exit 1;
              fi;
              attempt=$((attempt+1));
              echo "Waiting for PostgreSQL to be ready... Attempt: $attempt";
              sleep $SLEEP_SECONDS;
            done;
            echo "PostgreSQL is ready.";
        - name: check-redis
          image: redis:7.2.4
          command: [ "/bin/sh", "-c" ]
          #language=sh
          args:
          - >
            MAX_ATTEMPTS=30;
            SLEEP_SECONDS=10;
            attempt=0;
            while ! redis-cli -h hypers-v1-redis-master -p 6379 ping; do
              if [ $attempt -ge $MAX_ATTEMPTS ]; then
                echo "Redis did not become ready in time";
                exit 1;
              fi;
              attempt=$((attempt+1));
              echo "Waiting for Redis to be ready... Attempt: $attempt";
              sleep $SLEEP_SECONDS;
            done;
            echo "Redis is ready.";
      containers:
        - name: hyperswitch-producer
          image: juspaydotin/hyperswitch-producer:v1.112.0-standalone
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - pkill -15 node
          env:
            - name: ROUTER__JWEKEY__TUNNEL_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  key: ROUTER__JWEKEY__TUNNEL_PRIVATE_KEY
                  name: hyperswitch-secrets
            - name: ROUTER__KMS__KEY_ID
              valueFrom:
                secretKeyRef:
                  key: ROUTER__KMS__KEY_ID
                  name: hyperswitch-secrets
            - name: ROUTER__KMS__REGION
              valueFrom:
                secretKeyRef:
                  key: ROUTER__KMS__REGION
                  name: hyperswitch-secrets
            - name: ROUTER__SECRETS__ADMIN_API_KEY
              valueFrom:
                secretKeyRef:
                  key: ROUTER__SECRETS__ADMIN_API_KEY
                  name: hyperswitch-secrets
            - name: ROUTER__SECRETS__JWT_SECRET
              valueFrom:
                secretKeyRef:
                  key: ROUTER__SECRETS__JWT_SECRET
                  name: hyperswitch-secrets
            - name: ROUTER__API_KEYS__KMS_ENCRYPTED_HASH_KEY
              valueFrom:
                secretKeyRef:
                  key: ROUTER__API_KEYS__KMS_ENCRYPTED_HASH_KEY
                  name: hyperswitch-secrets
            - name: ROUTER__SECRETS__MASTER_ENC_KEY
              valueFrom:
                secretKeyRef:
                  key: ROUTER__SECRETS__MASTER_ENC_KEY
                  name: hyperswitch-secrets
            - name: ROUTER__CONNECTOR_ONBOARDING__PAYPAL__CLIENT_ID
              valueFrom:
                secretKeyRef:
                  key: ROUTER__CONNECTOR_ONBOARDING__PAYPAL__CLIENT_ID
                  name: hyperswitch-secrets
            - name: ROUTER__CONNECTOR_ONBOARDING__PAYPAL__CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  key: ROUTER__CONNECTOR_ONBOARDING__PAYPAL__CLIENT_SECRET
                  name: hyperswitch-secrets
            - name: ROUTER__CONNECTOR_ONBOARDING__PAYPAL__PARTNER_ID
              valueFrom:
                secretKeyRef:
                  key: ROUTER__CONNECTOR_ONBOARDING__PAYPAL__PARTNER_ID
                  name: hyperswitch-secrets
            - name: ROUTER__SECRETS_MANAGEMENT__AWS_KMS__KEY_ID
              valueFrom:
                secretKeyRef:
                  key: ROUTER__KMS__KEY_ID
                  name: hyperswitch-secrets
            - name: ROUTER__SECRETS_MANAGEMENT__AWS_KMS__REGION
              valueFrom:
                secretKeyRef:
                  key: ROUTER__KMS__REGION
                  name: hyperswitch-secrets
            - name: ROUTER__ENCRYPTION_MANAGEMENT__AWS_KMS__KEY_ID
              valueFrom:
                secretKeyRef:
                  key: ROUTER__KMS__KEY_ID
                  name: hyperswitch-secrets
            - name: ROUTER__ENCRYPTION_MANAGEMENT__AWS_KMS__REGION
              valueFrom:
                secretKeyRef:
                  key: ROUTER__KMS__REGION
                  name: hyperswitch-secrets
            - name: ROUTER__ANALYTICS__CLICKHOUSE__USERNAME
              valueFrom:
                secretKeyRef:
                  key: ROUTER__ANALYTICS__CLICKHOUSE__USERNAME
                  name: hyperswitch-secrets
            - name: ROUTER__ANALYTICS__CLICKHOUSE__DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  key: ROUTER__ANALYTICS__CLICKHOUSE__DATABASE_NAME
                  name: hyperswitch-secrets
            - name: ROUTER__ANALYTICS__CLICKHOUSE__HOST
              valueFrom:
                secretKeyRef:
                  key: ROUTER__ANALYTICS__CLICKHOUSE__HOST
                  name: hyperswitch-secrets
            - name: ROUTER__EMAIL__SENDER_EMAIL
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__SENDER_EMAIL
                  name: hyperswitch-secrets
            - name: ROUTER__EMAIL__ALLOWED_UNVERIFIED_DAYS
              value: "1"
            - name: ROUTER__EMAIL__AWS_REGION
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__AWS_REGION
                  name: hyperswitch-secrets
                  optional: true
            - name: ROUTER__EMAIL__RECON_RECIPIENT_EMAIL
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__RECON_RECIPIENT_EMAIL
                  name: hyperswitch-secrets
            - name: ROUTER__EMAIL__PROD_INTENT_RECIPIENT_EMAIL
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__PROD_INTENT_RECIPIENT_EMAIL
                  name: hyperswitch-secrets
            - name: ROUTER__EMAIL__SMTP__HOST
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__SMTP__HOST
                  name: hyperswitch-secrets
            - name: ROUTER__EMAIL__SMTP__PORT
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__SMTP__PORT
                  name: hyperswitch-secrets
            - name: ROUTER__EMAIL__SMTP__USERNAME
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__SMTP__USERNAME
                  name: hyperswitch-secrets
                  optional: true
            - name: ROUTER__EMAIL__SMTP__PASSWORD
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__SMTP__PASSWORD
                  name: hyperswitch-secrets
                  optional: true
            - name: ROUTER__EMAIL__AWS_SES__EMAIL_ROLE_ARN
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__AWS_SES__EMAIL_ROLE_ARN
                  name: hyperswitch-secrets
            - name: ROUTER__EMAIL__AWS_SES__STS_ROLE_SESSION_NAME
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__AWS_SES__STS_ROLE_SESSION_NAME
                  name: hyperswitch-secrets
            - name: RUN_ENV
              value: sandbox
            - name: ROUTER__ANALYTICS__CLICKHOUSE__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: clickhouse
                  key: admin-password
            - name: ROUTER__ANALYTICS__SQLX__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hypers-v1-postgresql
                  key: password
            - name: ROUTER__MASTER_DATABASE__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hypers-v1-postgresql
                  key: password
            - name: ROUTER__REPLICA_DATABASE__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hypers-v1-postgresql
                  key: password
          envFrom:
            - secretRef:
                name: producer-secret-hypers-v1
            - secretRef:
                name: hyperswitch-secrets
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /local/config/sandbox.toml
              name: hyperswitch-config
              subPath: producer.toml
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccountName: hyperswitch-router-role
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            defaultMode: 420
            name: producer-cm-hypers-v1
          name: hyperswitch-config
---
# Source: hyperswitch-stack/charts/hyperswitch-app/templates/router/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  name: hyperswitch-server-v1o112o0
  namespace: hyperswitch
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: hyperswitch-server
      version: v1o112o0
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/restartedAt: "2023-09-20T12:11:41+05:30"
        traffic.sidecar.istio.io/excludeOutboundIPRanges: 10.23.6.12/32
        checksum/router-config: 15aa86d564d9817c1def22e474f4e24cf1220cf968895b144722c79d7e70a1b4
        checksum/router-secret: b082cf9b98f1da19ff74a027c2d717424c590ad42068558cf35c9394a417da0a
        checksum/misc-secrets: 6ce28431f6402604659828f402da6f0c33b94a56d25c69a94f981a2d14d872cb
      labels:
        app: hyperswitch-server
        version: v1o112o0
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-type
                operator: In
                values:
                - generic-compute
      initContainers:
        - name: check-postgres
          image: postgres:16-alpine3.19
          command: [ "/bin/sh", "-c" ]
          #language=sh
          args:
          - >
            MAX_ATTEMPTS=30;
            SLEEP_SECONDS=10;
            attempt=0;
            while ! pg_isready -U hyperswitch -d hyperswitch -h hypers-v1-postgresql -p 5432; do
              if [ $attempt -ge $MAX_ATTEMPTS ]; then
                echo "PostgreSQL did not become ready in time";
                exit 1;
              fi;
              attempt=$((attempt+1));
              echo "Waiting for PostgreSQL to be ready... Attempt: $attempt";
              sleep $SLEEP_SECONDS;
            done;
            echo "PostgreSQL is ready.";
        - name: check-redis
          image: redis:7.2.4
          command: [ "/bin/sh", "-c" ]
          #language=sh
          args:
          - >
            MAX_ATTEMPTS=30;
            SLEEP_SECONDS=10;
            attempt=0;
            while ! redis-cli -h hypers-v1-redis-master -p 6379 ping; do
              if [ $attempt -ge $MAX_ATTEMPTS ]; then
                echo "Redis did not become ready in time";
                exit 1;
              fi;
              attempt=$((attempt+1));
              echo "Waiting for Redis to be ready... Attempt: $attempt";
              sleep $SLEEP_SECONDS;
            done;
            echo "Redis is ready.";
      containers:
        - name: hyperswitch-router
          image: juspaydotin/hyperswitch-router:v1.112.0-standalone
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - pkill -15 node
          env:
            
            - name: BINARY
              value: router
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: ROUTER__JWEKEY__TUNNEL_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  key: ROUTER__JWEKEY__TUNNEL_PRIVATE_KEY
                  name: hyperswitch-secrets
            - name: ROUTER__KMS__KEY_ID
              valueFrom:
                secretKeyRef:
                  key: ROUTER__KMS__KEY_ID
                  name: hyperswitch-secrets
            - name: ROUTER__KMS__REGION
              valueFrom:
                secretKeyRef:
                  key: ROUTER__KMS__REGION
                  name: hyperswitch-secrets
            - name: ROUTER__SECRETS__ADMIN_API_KEY
              valueFrom:
                secretKeyRef:
                  key: ROUTER__SECRETS__ADMIN_API_KEY
                  name: hyperswitch-secrets
            - name: ROUTER__SECRETS__JWT_SECRET
              valueFrom:
                secretKeyRef:
                  key: ROUTER__SECRETS__JWT_SECRET
                  name: hyperswitch-secrets
            - name: ROUTER__API_KEYS__KMS_ENCRYPTED_HASH_KEY
              valueFrom:
                secretKeyRef:
                  key: ROUTER__API_KEYS__KMS_ENCRYPTED_HASH_KEY
                  name: hyperswitch-secrets
            - name: ROUTER__SECRETS__MASTER_ENC_KEY
              valueFrom:
                secretKeyRef:
                  key: ROUTER__SECRETS__MASTER_ENC_KEY
                  name: hyperswitch-secrets
            - name: ROUTER__CONNECTOR_ONBOARDING__PAYPAL__CLIENT_ID
              valueFrom:
                secretKeyRef:
                  key: ROUTER__CONNECTOR_ONBOARDING__PAYPAL__CLIENT_ID
                  name: hyperswitch-secrets
            - name: ROUTER__CONNECTOR_ONBOARDING__PAYPAL__CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  key: ROUTER__CONNECTOR_ONBOARDING__PAYPAL__CLIENT_SECRET
                  name: hyperswitch-secrets
            - name: ROUTER__CONNECTOR_ONBOARDING__PAYPAL__PARTNER_ID
              valueFrom:
                secretKeyRef:
                  key: ROUTER__CONNECTOR_ONBOARDING__PAYPAL__PARTNER_ID
                  name: hyperswitch-secrets
            - name: ROUTER__SECRETS_MANAGEMENT__AWS_KMS__KEY_ID
              valueFrom:
                secretKeyRef:
                  key: ROUTER__KMS__KEY_ID
                  name: hyperswitch-secrets
            - name: ROUTER__SECRETS_MANAGEMENT__AWS_KMS__REGION
              valueFrom:
                secretKeyRef:
                  key: ROUTER__KMS__REGION
                  name: hyperswitch-secrets
            - name: ROUTER__ENCRYPTION_MANAGEMENT__AWS_KMS__KEY_ID
              valueFrom:
                secretKeyRef:
                  key: ROUTER__KMS__KEY_ID
                  name: hyperswitch-secrets
            - name: ROUTER__ENCRYPTION_MANAGEMENT__AWS_KMS__REGION
              valueFrom:
                secretKeyRef:
                  key: ROUTER__KMS__REGION
                  name: hyperswitch-secrets
            - name: ROUTER__ANALYTICS__CLICKHOUSE__USERNAME
              valueFrom:
                secretKeyRef:
                  key: ROUTER__ANALYTICS__CLICKHOUSE__USERNAME
                  name: hyperswitch-secrets
            - name: ROUTER__ANALYTICS__CLICKHOUSE__DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  key: ROUTER__ANALYTICS__CLICKHOUSE__DATABASE_NAME
                  name: hyperswitch-secrets
            - name: ROUTER__ANALYTICS__CLICKHOUSE__HOST
              valueFrom:
                secretKeyRef:
                  key: ROUTER__ANALYTICS__CLICKHOUSE__HOST
                  name: hyperswitch-secrets
            - name: ROUTER__EMAIL__SENDER_EMAIL
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__SENDER_EMAIL
                  name: hyperswitch-secrets
            - name: ROUTER__EMAIL__ALLOWED_UNVERIFIED_DAYS
              value: "1"
            - name: ROUTER__EMAIL__AWS_REGION
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__AWS_REGION
                  name: hyperswitch-secrets
                  optional: true
            - name: ROUTER__EMAIL__RECON_RECIPIENT_EMAIL
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__RECON_RECIPIENT_EMAIL
                  name: hyperswitch-secrets
            - name: ROUTER__EMAIL__PROD_INTENT_RECIPIENT_EMAIL
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__PROD_INTENT_RECIPIENT_EMAIL
                  name: hyperswitch-secrets
            - name: ROUTER__EMAIL__SMTP__HOST
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__SMTP__HOST
                  name: hyperswitch-secrets
            - name: ROUTER__EMAIL__SMTP__PORT
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__SMTP__PORT
                  name: hyperswitch-secrets
            - name: ROUTER__EMAIL__SMTP__USERNAME
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__SMTP__USERNAME
                  name: hyperswitch-secrets
                  optional: true
            - name: ROUTER__EMAIL__SMTP__PASSWORD
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__SMTP__PASSWORD
                  name: hyperswitch-secrets
                  optional: true
            - name: ROUTER__EMAIL__AWS_SES__EMAIL_ROLE_ARN
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__AWS_SES__EMAIL_ROLE_ARN
                  name: hyperswitch-secrets
            - name: ROUTER__EMAIL__AWS_SES__STS_ROLE_SESSION_NAME
              valueFrom:
                secretKeyRef:
                  key: ROUTER__EMAIL__AWS_SES__STS_ROLE_SESSION_NAME
                  name: hyperswitch-secrets
            - name: RUN_ENV
              value: sandbox
            - name: ROUTER__ANALYTICS__CLICKHOUSE__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: clickhouse
                  key: admin-password
            - name: ROUTER__ANALYTICS__SQLX__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hypers-v1-postgresql
                  key: password
            - name: ROUTER__MASTER_DATABASE__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hypers-v1-postgresql
                  key: password
            - name: ROUTER__REPLICA_DATABASE__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hypers-v1-postgresql
                  key: password
          envFrom:
            - configMapRef:
                name: router-cm-hypers-v1
            - secretRef:
                name: router-secret-hypers-v1
            - secretRef:
                name: hyperswitch-secrets
          failureThreshold: 3
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 1
          failureThreshold: 3
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 1
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          resources:
            requests:
              cpu: 200m
              memory: 500Mi
          securityContext:
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /local/config/sandbox.toml
              name: hyperswitch-config
              subPath: router.toml
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccountName: hyperswitch-router-role
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            defaultMode: 420
            name: router-cm-hypers-v1
          name: hyperswitch-config
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/clickhouse/charts/zookeeper/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: hypers-v1-zookeeper
  namespace: hyperswitch
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/version: 3.9.3
    helm.sh/chart: zookeeper-13.6.0
    app.kubernetes.io/component: zookeeper
    role: zookeeper
spec:
  replicas: 0
  revisionHistoryLimit: 10
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/instance: hypers-v1
      app.kubernetes.io/name: zookeeper
      app.kubernetes.io/component: zookeeper
  serviceName: hypers-v1-zookeeper-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/instance: hypers-v1
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: zookeeper
        app.kubernetes.io/version: 3.9.3
        helm.sh/chart: zookeeper-13.6.0
        app.kubernetes.io/component: zookeeper
    spec:
      enableServiceLinks: true
      serviceAccountName: hypers-v1-zookeeper
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: hypers-v1
                    app.kubernetes.io/name: zookeeper
                    app.kubernetes.io/component: zookeeper
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
      containers:
        - name: zookeeper
          image: docker.io/bitnami/zookeeper:3.8.4-debian-12-r16
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /scripts/setup.sh
          resources:
            limits:
              cpu: 375m
              ephemeral-storage: 2Gi
              memory: 384Mi
            requests:
              cpu: 250m
              ephemeral-storage: 50Mi
              memory: 256Mi
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: ZOO_DATA_LOG_DIR
              value: ""
            - name: ZOO_PORT_NUMBER
              value: "2181"
            - name: ZOO_TICK_TIME
              value: "2000"
            - name: ZOO_INIT_LIMIT
              value: "10"
            - name: ZOO_SYNC_LIMIT
              value: "5"
            - name: ZOO_PRE_ALLOC_SIZE
              value: "65536"
            - name: ZOO_SNAPCOUNT
              value: "100000"
            - name: ZOO_MAX_CLIENT_CNXNS
              value: "60"
            - name: ZOO_4LW_COMMANDS_WHITELIST
              value: "srvr, mntr, ruok"
            - name: ZOO_LISTEN_ALLIPS_ENABLED
              value: "no"
            - name: ZOO_AUTOPURGE_INTERVAL
              value: "1"
            - name: ZOO_AUTOPURGE_RETAIN_COUNT
              value: "10"
            - name: ZOO_MAX_SESSION_TIMEOUT
              value: "40000"
            - name: ZOO_SERVERS
              value: 
            - name: ZOO_ENABLE_AUTH
              value: "no"
            - name: ZOO_ENABLE_QUORUM_AUTH
              value: "no"
            - name: ZOO_HEAP_SIZE
              value: "1024"
            - name: ZOO_LOG_LEVEL
              value: "ERROR"
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: ZOO_ADMIN_SERVER_PORT_NUMBER
              value: "8080"
          ports:
            - name: client
              containerPort: 2181
            - name: http-admin
              containerPort: 8080
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/bash
                - -ec
                - ZOO_HC_TIMEOUT=3 /opt/bitnami/scripts/zookeeper/healthcheck.sh
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/bash
                - -ec
                - ZOO_HC_TIMEOUT=2 /opt/bitnami/scripts/zookeeper/healthcheck.sh
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/zookeeper/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/zookeeper/logs
              subPath: app-logs-dir
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
            - name: data
              mountPath: /bitnami/zookeeper
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: scripts
          configMap:
            name: hypers-v1-zookeeper-scripts
            defaultMode: 493
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/clickhouse/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: clickhouse-shard0
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: clickhouse
    app.kubernetes.io/version: 24.10.2
    helm.sh/chart: clickhouse-6.3.3
    app.kubernetes.io/component: clickhouse
    shard: "0"
spec:
  replicas: 1
  podManagementPolicy: "Parallel"
  selector:
    matchLabels:
      app.kubernetes.io/instance: hypers-v1
      app.kubernetes.io/name: clickhouse
      app.kubernetes.io/component: clickhouse
  serviceName: clickhouse-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: 80db11ae6e70c7642f4e7c6431f951579b89ba2f3d82091a53f48d13a9a044c5
        checksum/config-extra: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/config-users-extra: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
      labels:
        app.kubernetes.io/instance: hypers-v1
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: clickhouse
        app.kubernetes.io/version: 24.10.2
        helm.sh/chart: clickhouse-6.3.3
        app.kubernetes.io/component: clickhouse
        shard: "0"
    spec:
      serviceAccountName: clickhouse
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: hypers-v1
                    app.kubernetes.io/name: clickhouse
                    app.kubernetes.io/component: clickhouse
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - command:
          - sh
          - -c
          - git clone --depth 1 --branch chore/hyperswitch-sdk-clickhouse-script-fix https://github.com/juspay/hyperswitch.git
            /scripts && cp /scripts/crates/analytics/docs/clickhouse/scripts/*.sql /docker-entrypoint-initdb.d/
          image: alpine/git
          name: clone-sql-scripts
          volumeMounts:
          - mountPath: /docker-entrypoint-initdb.d
            name: initdb-scripts
      containers:
        - name: clickhouse
          image: docker.io/bitnami/clickhouse:24.3
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /scripts/setup.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CLICKHOUSE_HTTP_PORT
              value: "8123"
            - name: CLICKHOUSE_TCP_PORT
              value: "9000"
            - name: CLICKHOUSE_MYSQL_PORT
              value: "9004"
            - name: CLICKHOUSE_POSTGRESQL_PORT
              value: "9005"
            - name: CLICKHOUSE_INTERSERVER_HTTP_PORT
              value: "9009"
            - name: CLICKHOUSE_ADMIN_USER
              value: "default"
            - name: CLICKHOUSE_SHARD_ID
              value: "shard0"
            - name: CLICKHOUSE_REPLICA_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CLICKHOUSE_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: clickhouse
                  key: admin-password
          envFrom:
          resources:
            limits:
              cpu: 375m
              ephemeral-storage: 2Gi
              memory: 384Mi
            requests:
              cpu: 250m
              ephemeral-storage: 50Mi
              memory: 256Mi
          ports:
            - name: http
              containerPort: 8123
            - name: tcp
              containerPort: 9000
            - name: tcp-postgresql
              containerPort: 9005
            - name: tcp-mysql
              containerPort: 9004
            - name: http-intersrv
              containerPort: 9009
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /ping
              port: http
          volumeMounts:
            - name: empty-dir
              mountPath: /opt/bitnami/clickhouse/etc
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/clickhouse/logs
              subPath: app-logs-dir
            - name: empty-dir
              mountPath: /opt/bitnami/clickhouse/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
            - name: data
              mountPath: /bitnami/clickhouse
            - name: config
              mountPath: /bitnami/clickhouse/etc/conf.d/default
            - mountPath: /docker-entrypoint-initdb.d
              name: initdb-scripts
      volumes:
        - name: scripts
          configMap:
            name: clickhouse-scripts
            defaultMode: 0755
        - name: empty-dir
          emptyDir: {}
        - name: config
          configMap:
            name: clickhouse
        - emptyDir: {}
          name: initdb-scripts
  volumeClaimTemplates:    
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
        labels:
          app.kubernetes.io/instance: hypers-v1
          app.kubernetes.io/name: clickhouse
          app.kubernetes.io/component: clickhouse
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/hyperswitch-card-vault/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: hypers-v1-locker-db
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: locker-db
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.27
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: hypers-v1-locker-db-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: hypers-v1
      app.kubernetes.io/name: locker-db
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: hypers-v1-locker-db
      labels:
        app.kubernetes.io/instance: hypers-v1
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: locker-db
        app.kubernetes.io/version: 16.1.0
        helm.sh/chart: postgresql-13.2.27
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: hypers-v1
                    app.kubernetes.io/name: locker-db
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.1.0-debian-11-r18
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "db_user"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hypers-v1-locker-db
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hypers-v1-locker-db
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "locker-db"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "db_user" -d "dbname=locker-db" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "db_user" -d "dbname=locker-db" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 100m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/kafka/templates/broker/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka0-broker
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.9.0
    helm.sh/chart: kafka-31.0.0
    app.kubernetes.io/component: broker
    app.kubernetes.io/part-of: kafka
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: hypers-v1
      app.kubernetes.io/name: kafka
      app.kubernetes.io/component: broker
      app.kubernetes.io/part-of: kafka
  serviceName: kafka0-broker-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: hypers-v1
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kafka
        app.kubernetes.io/version: 3.9.0
        helm.sh/chart: kafka-31.0.0
        app.kubernetes.io/component: broker
        app.kubernetes.io/part-of: kafka
      annotations:
        checksum/configuration: 43d89e869fd3b5083c1bd1e411bd89389d9d7eb086f046225627c5e62aecd18c
    spec:
      
      automountServiceAccountToken: false
      hostNetwork: false
      hostIPC: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: hypers-v1
                    app.kubernetes.io/name: kafka
                    app.kubernetes.io/component: broker
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: []
        sysctls: []
      serviceAccountName: kafka0
      enableServiceLinks: true
      initContainers:
        - name: kafka-init
          image: docker.io/bitnami/kafka:3.9.0-debian-12-r1
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
          resources:
            limits: {}
            requests: {} 
          command:
            - /bin/bash
          args:
            - -ec
            - |
              /scripts/kafka-init.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                    fieldPath: metadata.name
            - name: KAFKA_VOLUME_DIR
              value: "/bitnami/kafka"
            - name: KAFKA_MIN_ID
              value: "100"
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
            - name: kafka-config
              mountPath: /config
            - name: kafka-configmaps
              mountPath: /configmaps
            - name: kafka-secret-config
              mountPath: /secret-config
            - name: scripts
              mountPath: /scripts
            - name: tmp
              mountPath: /tmp
      containers:
        - name: kafka
          image: docker.io/bitnami/kafka:3.9.0-debian-12-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: KAFKA_HEAP_OPTS
              value: "-Xmx1024m -Xms1024m"
            - name: KAFKA_KRAFT_CLUSTER_ID
              valueFrom:
                secretKeyRef:
                  name: kafka0-kraft-cluster-id
                  key: kraft-cluster-id
          ports:
            - name: client
              containerPort: 9092
            - name: interbroker
              containerPort: 9094
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - pgrep
                - -f
                - kafka
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: "client"
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
            - name: logs
              mountPath: /opt/bitnami/kafka/logs
            - name: kafka-config
              mountPath: /opt/bitnami/kafka/config/server.properties
              subPath: server.properties
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: kafka-configmaps
          configMap:
            name: kafka0-broker-configuration
        - name: kafka-secret-config
          emptyDir: {}
        - name: kafka-config
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: scripts
          configMap:
            name: kafka0-scripts
            defaultMode: 493
        - name: logs
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/kafka/templates/controller-eligible/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka0-controller
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.9.0
    helm.sh/chart: kafka-31.0.0
    app.kubernetes.io/component: controller-eligible
    app.kubernetes.io/part-of: kafka
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: hypers-v1
      app.kubernetes.io/name: kafka
      app.kubernetes.io/component: controller-eligible
      app.kubernetes.io/part-of: kafka
  serviceName: kafka0-controller-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: hypers-v1
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kafka
        app.kubernetes.io/version: 3.9.0
        helm.sh/chart: kafka-31.0.0
        app.kubernetes.io/component: controller-eligible
        app.kubernetes.io/part-of: kafka
      annotations:
        checksum/configuration: bc193cec75a79953d4765c6c93564cb90843ea2b218fb101365a2780df46d5dc
    spec:
      
      automountServiceAccountToken: false
      hostNetwork: false
      hostIPC: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: hypers-v1
                    app.kubernetes.io/name: kafka
                    app.kubernetes.io/component: controller-eligible
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: []
        sysctls: []
      serviceAccountName: kafka0
      enableServiceLinks: true
      initContainers:
        - name: kafka-init
          image: docker.io/bitnami/kafka:3.9.0-debian-12-r1
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
          resources:
            limits: {}
            requests: {} 
          command:
            - /bin/bash
          args:
            - -ec
            - |
              /scripts/kafka-init.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                    fieldPath: metadata.name
            - name: KAFKA_VOLUME_DIR
              value: "/bitnami/kafka"
            - name: KAFKA_MIN_ID
              value: "0"
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
            - name: kafka-config
              mountPath: /config
            - name: kafka-configmaps
              mountPath: /configmaps
            - name: kafka-secret-config
              mountPath: /secret-config
            - name: scripts
              mountPath: /scripts
            - name: tmp
              mountPath: /tmp
      containers:
        - name: kafka
          image: docker.io/bitnami/kafka:3.9.0-debian-12-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: KAFKA_HEAP_OPTS
              value: "-Xmx1024m -Xms1024m"
            - name: KAFKA_KRAFT_CLUSTER_ID
              valueFrom:
                secretKeyRef:
                  name: kafka0-kraft-cluster-id
                  key: kraft-cluster-id
          ports:
            - name: controller
              containerPort: 9093
            - name: client
              containerPort: 9092
            - name: interbroker
              containerPort: 9094
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - pgrep
                - -f
                - kafka
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: "controller"
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
            - name: logs
              mountPath: /opt/bitnami/kafka/logs
            - name: kafka-config
              mountPath: /opt/bitnami/kafka/config/server.properties
              subPath: server.properties
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: kafka-configmaps
          configMap:
            name: kafka0-controller-configuration
        - name: kafka-secret-config
          emptyDir: {}
        - name: kafka-config
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: scripts
          configMap:
            name: kafka0-scripts
            defaultMode: 493
        - name: logs
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/loki-stack/charts/loki/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: loki
  namespace: hyperswitch
  labels:
    app: loki
    chart: loki-2.16.0
    release: hypers-v1
    heritage: Helm
  annotations:
    {}
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app: loki
      release: hypers-v1
  serviceName: loki-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: loki
        name: loki
        release: hypers-v1
      annotations:
        checksum/config: 76f0a5200c5c4176e3eff4318792744a0ce5e1bcbac40faf20b8b72909a65655
        prometheus.io/port: http-metrics
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: loki
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      initContainers:
        []
      containers:
        - name: loki
          image: "grafana/loki:2.6.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-config.file=/etc/loki/loki.yaml"
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: config
              mountPath: /etc/loki
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: memberlist-port
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            {}
          securityContext:
            readOnlyRootFilesystem: true
          env:
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 4800
      volumes:
        - name: tmp
          emptyDir: {}
        - name: config
          secret:
            secretName: loki
        - name: storage
          emptyDir: {}
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: hypers-v1-postgresql
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.27
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: hypers-v1-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: hypers-v1
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: hypers-v1-postgresql
      labels:
        app.kubernetes.io/instance: hypers-v1
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.1.0
        helm.sh/chart: postgresql-13.2.27
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: hypers-v1
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.1.0-debian-11-r18
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "hyperswitch"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hypers-v1-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hypers-v1-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "hyperswitch"
            # Replication
            - name: POSTGRES_REPLICATION_MODE
              value: "master"
            - name: POSTGRES_REPLICATION_USER
              value: "repl_user"
            - name: POSTGRES_REPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hypers-v1-postgresql
                  key: replication-password
            - name: POSTGRES_CLUSTER_APP_NAME
              value: my_application
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "hyperswitch" -d "dbname=hyperswitch" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "hyperswitch" -d "dbname=hyperswitch" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 150m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/postgresql/templates/read/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: hypers-v1-postgresql-read
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.27
    app.kubernetes.io/component: read
spec:
  replicas: 1
  serviceName: hypers-v1-postgresql-read-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: hypers-v1
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: read
  template:
    metadata:
      name: hypers-v1-postgresql-read
      labels:
        app.kubernetes.io/instance: hypers-v1
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.1.0
        helm.sh/chart: postgresql-13.2.27
        app.kubernetes.io/component: read
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: hypers-v1
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: read
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.1.0-debian-11-r18
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "hyperswitch"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hypers-v1-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hypers-v1-postgresql
                  key: postgres-password
            # Replication
            - name: POSTGRES_REPLICATION_MODE
              value: "slave"
            - name: POSTGRES_REPLICATION_USER
              value: "repl_user"
            - name: POSTGRES_REPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hypers-v1-postgresql
                  key: replication-password
            - name: POSTGRES_CLUSTER_APP_NAME
              value: my_application
            - name: POSTGRES_MASTER_HOST
              value: hypers-v1-postgresql
            - name: POSTGRES_MASTER_PORT_NUMBER
              value: "5432"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "hyperswitch" -d "dbname=hyperswitch" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "hyperswitch" -d "dbname=hyperswitch" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 100m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: hypers-v1-redis-master
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.3
    helm.sh/chart: redis-18.6.1
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: hypers-v1
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
  serviceName: hypers-v1-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: hypers-v1
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.2.3
        helm.sh/chart: redis-18.6.1
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 8ef76dbbbc026db33e048debe5364b56849c13bcf470bec0b400b468cf15da42
        checksum/secret: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: hypers-v1-redis
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: hypers-v1
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.2.3-debian-11-r2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: hypers-v1-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: hypers-v1-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: hypers-v1-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: redis-data
        labels:
          app.kubernetes.io/instance: hypers-v1
          app.kubernetes.io/name: redis
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/redis/templates/replicas/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: hypers-v1-redis-replicas
  namespace: "hyperswitch"
  labels:
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.3
    helm.sh/chart: redis-18.6.1
    app.kubernetes.io/component: replica
spec:
  replicas: 0
  selector:
    matchLabels:
      app.kubernetes.io/instance: hypers-v1
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: replica
  serviceName: hypers-v1-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: hypers-v1
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.2.3
        helm.sh/chart: redis-18.6.1
        app.kubernetes.io/component: replica
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 8ef76dbbbc026db33e048debe5364b56849c13bcf470bec0b400b468cf15da42
        checksum/secret: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: hypers-v1-redis
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: hypers-v1
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: replica
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.2.3-debian-11-r2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-replica.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: replica
            - name: REDIS_MASTER_HOST
              value: hypers-v1-redis-master-0.hypers-v1-redis-headless.hyperswitch.svc.cluster.local
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          startupProbe:
            failureThreshold: 22
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: redis
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local_and_master.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc
      volumes:
        - name: start-scripts
          configMap:
            name: hypers-v1-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: hypers-v1-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: hypers-v1-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: redis-data
        labels:
          app.kubernetes.io/instance: hypers-v1
          app.kubernetes.io/name: redis
          app.kubernetes.io/component: replica
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: hyperswitch-stack/charts/hyperswitch-app/charts/vector/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: hypers-v1-vector
  labels:
    helm.sh/chart: vector-0.37.0
    app.kubernetes.io/name: vector
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/component: Aggregator
    app.kubernetes.io/version: "0.42.0-distroless-libc"
    app.kubernetes.io/managed-by: Helm
    
  annotations:
    {}
spec:
  replicas: 1
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      app.kubernetes.io/name: vector
      app.kubernetes.io/instance: hypers-v1
      app.kubernetes.io/component: Aggregator
  minReadySeconds: 0
  serviceName: hypers-v1-vector-headless
  template:
    metadata:
      annotations:
        checksum/config: 28113ef82c13b6d44dbfaf1752995b2867ee1dc20215316e5dda70b7f91c4bbc
      labels:
        app.kubernetes.io/name: vector
        app.kubernetes.io/instance: hypers-v1
        app.kubernetes.io/component: Aggregator
        vector.dev/exclude: "true"
    spec:
      serviceAccountName: hypers-v1-vector
      dnsPolicy: ClusterFirst
      containers:
        - name: vector
          image: "timberio/vector:0.42.0-distroless-libc"
          imagePullPolicy: IfNotPresent
          args:
            - --config-dir
            - /etc/vector/
          env:
            - name: VECTOR_LOG
              value: "info"
            - name: KAFKA_HOST
              value: kafka0:29092
          ports:      
            - name: api
              containerPort: 8686
              protocol: TCP
            - name: sdk-source
              containerPort: 3103
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: "/vector-data-dir"
            - name: config
              mountPath: "/etc/vector/"
              readOnly: true
      terminationGracePeriodSeconds: 60
      volumes:
        - name: data
          emptyDir: {}
        - name: config
          projected:
            sources:
              - configMap:
                  name: hypers-v1-vector
  volumeClaimTemplates:
---
# Source: hyperswitch-stack/charts/hyperswitch-app/templates/control-center/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hyperswitch-control-center-ingress
  namespace:  hyperswitch
  annotations:
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/backend-protocol-version: HTTP1
    alb.ingress.kubernetes.io/group.name: hyperswitch-control-center-alb-ingress-group
    alb.ingress.kubernetes.io/ip-address-type: ipv4
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    alb.ingress.kubernetes.io/load-balancer-name: hyperswitch-control-center
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/security-groups: lg-security-group
    alb.ingress.kubernetes.io/tags: stack=hyperswitch-lb
    alb.ingress.kubernetes.io/target-type: ip
spec:
  ingressClassName: alb
  rules:
    - http: 
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: hyperswitch-control-center
                port:
                  number: 80
---
# Source: hyperswitch-stack/charts/hyperswitch-app/templates/misc/loki-grafana-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hyperswitch-logs-alb-ingress
  namespace: hyperswitch
  annotations:
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/backend-protocol-version: HTTP1
    alb.ingress.kubernetes.io/group.name: hyperswitch-logs-alb-ingress-group
    alb.ingress.kubernetes.io/ip-address-type: ipv4
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    alb.ingress.kubernetes.io/load-balancer-name: hyperswitch-logs
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/security-groups: lg-security-group
    alb.ingress.kubernetes.io/tags: stack=hyperswitch-lb
    alb.ingress.kubernetes.io/target-type: ip
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: loki-grafana
                port:
                  number: 80
---
# Source: hyperswitch-stack/charts/hyperswitch-app/templates/router/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hyperswitch-alb-ingress
  namespace:  hyperswitch
  annotations:
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/backend-protocol-version: HTTP1
    alb.ingress.kubernetes.io/group.name: hyperswitch-alb-ingress-group
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "5"
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-port: "8080"
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "2"
    alb.ingress.kubernetes.io/healthy-threshold-count: "5"
    alb.ingress.kubernetes.io/ip-address-type: ipv4
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    alb.ingress.kubernetes.io/load-balancer-name: hyperswitch
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/security-groups: lg-security-group
    alb.ingress.kubernetes.io/tags: stack=hyperswitch-lb
    alb.ingress.kubernetes.io/target-type: ip
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: hyperswitch-server
                port:
                  number: 80
---
# Source: hyperswitch-stack/charts/hyperswitch-web/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hyperswitch-web-ingress
  labels:
    helm.sh/chart: hyperswitch-web-0.2.0
    app.kubernetes.io/name: hyperswitch-web
    app.kubernetes.io/instance: hypers-v1
    app.kubernetes.io/version: "0.15.8"
    app.kubernetes.io/managed-by: Helm
  annotations:
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/backend-protocol-version: HTTP1
    alb.ingress.kubernetes.io/group.name: hyperswitch-web-alb-ingress-group
    alb.ingress.kubernetes.io/ip-address-type: ipv4
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    alb.ingress.kubernetes.io/load-balancer-name: hyperswitch-web
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/security-groups: lg-security-group
    alb.ingress.kubernetes.io/tags: stack=hyperswitch-lb
    alb.ingress.kubernetes.io/target-type: ip
spec:
  ingressClassName: alb
  rules:
    - host: 
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: hyperswitch-web
                port:
                  number: 9090

NOTES:
1. Get the Application URL:
   - If Ingress is not available, use port-forwarding:
     ```shell
     export ADDRESS_CREATED=$(kubectl get ingress -n hyperswitch -o jsonpath="{.items[0].status.addresses[0].address}")
     if [ -z "$ADDRESS_CREATED" ]; then
       echo "Ingress not available. Using port-forwarding to access the services."

       # Port-forwarding commands
       kubectl port-forward deployment/hyperswitch-server-v1o112o0 8080:8080 -n hyperswitch & \
       kubectl port-forward deployment/hyperswitch-control-center-v1o34o2 9000:9000 -n hyperswitch & \
       kubectl port-forward service/hyperswitch-web 9090:9090 -n hyperswitch &

       echo "======================================================"
       echo " App server running on: http://localhost:8080      "
       echo " Control center running on: http://localhost:9000  "
       echo " Hyperswitch Web running on: http://localhost:9090/web/0.103.1/v0/HyperLoader.js "
       echo "======================================================"

       echo "\nTo close the exposed ports, run the following command:\n"
       echo "kill \$( lsof -i:8080 -t ); kill \$( lsof -i:9090 -t ); kill \$( lsof -i:9000 -t )"
       echo "======================================================"
     else
       echo "Ingress available. Access the services using the following command:"
       kubectl get ingress -n hyperswitch
     fi
     ```

2. Grafana Loki Setup:
   - Expose Grafana at http://localhost:3000 to view logs:
     ```shell
     kubectl port-forward service/hypers-v1-grafana 3000:3000 -n hyperswitch &
     ```

3. Vector Setup:
   - Expose Vector at http://localhost:3103 to collect logs:
     ```shell
     kubectl port-forward service/hypers-v1-vector 3103:3103 -n hyperswitch &
     ```

4. Clickhouse Setup:
   - Run Clickhouse init script after Clickhouse is started:
     ```shell
     CKH_PASS=$(kubectl get secret clickhouse -n hyperswitch -o jsonpath="{.data.admin-password}" | base64 --decode)
     kubectl exec -it clickhouse-shard0-0 -n hyperswitch -- sh -c 'cat docker-entrypoint-initdb.d/*.sql | clickhouse-client --user default --password '${CKH_PASS}' --multiquery'
     ```

5. Expose Mailhog for Local Email Service:
   - Expose Mailhog and access it at http://localhost:8025/:
     ```shell
     kubectl expose deployment mailhog --type=LoadBalancer --name=mailhog-service -n hyperswitch
     ```

========================================================
